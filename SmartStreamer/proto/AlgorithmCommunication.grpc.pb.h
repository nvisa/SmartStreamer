// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AlgorithmCommunication.proto
#ifndef GRPC_AlgorithmCommunication_2eproto__INCLUDED
#define GRPC_AlgorithmCommunication_2eproto__INCLUDED

#include "AlgorithmCommunication.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace AlgorithmCommunication {

class AlgorithmService final {
 public:
  static constexpr char const* service_full_name() {
    return "AlgorithmCommunication.AlgorithmService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetScreenShot(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::AlgorithmCommunication::ScreenFrame* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ScreenFrame>> AsyncGetScreenShot(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ScreenFrame>>(AsyncGetScreenShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ScreenFrame>> PrepareAsyncGetScreenShot(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ScreenFrame>>(PrepareAsyncGetScreenShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::AlgorithmCommunication::ScreenFrame>> GetScreenShotStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::AlgorithmCommunication::ScreenFrame>>(GetScreenShotStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::ScreenFrame>> AsyncGetScreenShotStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::ScreenFrame>>(AsyncGetScreenShotStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::ScreenFrame>> PrepareAsyncGetScreenShotStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::ScreenFrame>>(PrepareAsyncGetScreenShotStreamRaw(context, request, cq));
    }
    // ////////////////////////////////////////////////////////////////////////////
    virtual ::grpc::Status RunAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::AlgorithmCommunication::ResponseOfRequests* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>> AsyncRunAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>>(AsyncRunAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>> PrepareAsyncRunAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>>(PrepareAsyncRunAlgorithmRaw(context, request, cq));
    }
    virtual ::grpc::Status StopAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::AlgorithmCommunication::ResponseOfRequests* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>> AsyncStopAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>>(AsyncStopAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>> PrepareAsyncStopAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>>(PrepareAsyncStopAlgorithmRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::AlgorithmCommunication::ResponseOfRequests* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>> AsyncSetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>>(AsyncSetAlgorithmParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>> PrepareAsyncSetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>>(PrepareAsyncSetAlgorithmParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::AlgorithmCommunication::ResponseOfParameterRequests* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfParameterRequests>> AsyncGetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfParameterRequests>>(AsyncGetAlgorithmParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfParameterRequests>> PrepareAsyncGetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfParameterRequests>>(PrepareAsyncGetAlgorithmParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::AlgorithmCommunication::SystemFeature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>> AsyncGetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>>(AsyncGetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>> PrepareAsyncGetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>>(PrepareAsyncGetSystemFeatureRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::AlgorithmCommunication::SystemFeature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>> AsyncSetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>>(AsyncSetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>> PrepareAsyncSetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>>(PrepareAsyncSetSystemFeatureRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::AlgorithmCommunication::SystemFeatures* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>> AsyncGetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>>(AsyncGetAllSystemFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>> PrepareAsyncGetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>>(PrepareAsyncGetAllSystemFeaturesRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::AlgorithmCommunication::SystemFeatures* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>> AsyncSetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>>(AsyncSetAllSystemFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>> PrepareAsyncSetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>>(PrepareAsyncSetAllSystemFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>> GetAlarm(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>>(GetAlarmRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>> AsyncGetAlarm(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>>(AsyncGetAlarmRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>> PrepareAsyncGetAlarm(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>>(PrepareAsyncGetAlarmRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetScreenShot(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetScreenShotStream(::grpc::ClientContext* context, ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::experimental::ClientReadReactor< ::AlgorithmCommunication::ScreenFrame>* reactor) = 0;
      // ////////////////////////////////////////////////////////////////////////////
      virtual void RunAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAlarm(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::AlgorithmCommunication::AlarmReqInfo,::AlgorithmCommunication::Alarms>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ScreenFrame>* AsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ScreenFrame>* PrepareAsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::AlgorithmCommunication::ScreenFrame>* GetScreenShotStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::ScreenFrame>* AsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::ScreenFrame>* PrepareAsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>* AsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>* PrepareAsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>* AsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>* PrepareAsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>* AsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfRequests>* PrepareAsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfParameterRequests>* AsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::ResponseOfParameterRequests>* PrepareAsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>* AsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>* PrepareAsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>* AsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeature>* PrepareAsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>* AsyncGetAllSystemFeaturesRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>* PrepareAsyncGetAllSystemFeaturesRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>* AsyncSetAllSystemFeaturesRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::SystemFeatures>* PrepareAsyncSetAllSystemFeaturesRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>* GetAlarmRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>* AsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>* PrepareAsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetScreenShot(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::AlgorithmCommunication::ScreenFrame* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ScreenFrame>> AsyncGetScreenShot(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ScreenFrame>>(AsyncGetScreenShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ScreenFrame>> PrepareAsyncGetScreenShot(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ScreenFrame>>(PrepareAsyncGetScreenShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::AlgorithmCommunication::ScreenFrame>> GetScreenShotStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::AlgorithmCommunication::ScreenFrame>>(GetScreenShotStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::AlgorithmCommunication::ScreenFrame>> AsyncGetScreenShotStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::AlgorithmCommunication::ScreenFrame>>(AsyncGetScreenShotStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::AlgorithmCommunication::ScreenFrame>> PrepareAsyncGetScreenShotStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::AlgorithmCommunication::ScreenFrame>>(PrepareAsyncGetScreenShotStreamRaw(context, request, cq));
    }
    ::grpc::Status RunAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::AlgorithmCommunication::ResponseOfRequests* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>> AsyncRunAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>>(AsyncRunAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>> PrepareAsyncRunAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>>(PrepareAsyncRunAlgorithmRaw(context, request, cq));
    }
    ::grpc::Status StopAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::AlgorithmCommunication::ResponseOfRequests* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>> AsyncStopAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>>(AsyncStopAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>> PrepareAsyncStopAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>>(PrepareAsyncStopAlgorithmRaw(context, request, cq));
    }
    ::grpc::Status SetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::AlgorithmCommunication::ResponseOfRequests* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>> AsyncSetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>>(AsyncSetAlgorithmParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>> PrepareAsyncSetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>>(PrepareAsyncSetAlgorithmParametersRaw(context, request, cq));
    }
    ::grpc::Status GetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::AlgorithmCommunication::ResponseOfParameterRequests* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfParameterRequests>> AsyncGetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfParameterRequests>>(AsyncGetAlgorithmParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfParameterRequests>> PrepareAsyncGetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfParameterRequests>>(PrepareAsyncGetAlgorithmParametersRaw(context, request, cq));
    }
    ::grpc::Status GetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::AlgorithmCommunication::SystemFeature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>> AsyncGetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>>(AsyncGetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>> PrepareAsyncGetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>>(PrepareAsyncGetSystemFeatureRaw(context, request, cq));
    }
    ::grpc::Status SetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::AlgorithmCommunication::SystemFeature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>> AsyncSetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>>(AsyncSetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>> PrepareAsyncSetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>>(PrepareAsyncSetSystemFeatureRaw(context, request, cq));
    }
    ::grpc::Status GetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::AlgorithmCommunication::SystemFeatures* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>> AsyncGetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>>(AsyncGetAllSystemFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>> PrepareAsyncGetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>>(PrepareAsyncGetAllSystemFeaturesRaw(context, request, cq));
    }
    ::grpc::Status SetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::AlgorithmCommunication::SystemFeatures* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>> AsyncSetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>>(AsyncSetAllSystemFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>> PrepareAsyncSetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>>(PrepareAsyncSetAllSystemFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>> GetAlarm(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>>(GetAlarmRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>> AsyncGetAlarm(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>>(AsyncGetAlarmRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>> PrepareAsyncGetAlarm(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>>(PrepareAsyncGetAlarmRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetScreenShot(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response, std::function<void(::grpc::Status)>) override;
      void GetScreenShotStream(::grpc::ClientContext* context, ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::experimental::ClientReadReactor< ::AlgorithmCommunication::ScreenFrame>* reactor) override;
      void RunAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, std::function<void(::grpc::Status)>) override;
      void StopAlgorithm(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, std::function<void(::grpc::Status)>) override;
      void SetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, std::function<void(::grpc::Status)>) override;
      void GetAlgorithmParameters(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response, std::function<void(::grpc::Status)>) override;
      void GetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response, std::function<void(::grpc::Status)>) override;
      void SetSystemFeature(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response, std::function<void(::grpc::Status)>) override;
      void GetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response, std::function<void(::grpc::Status)>) override;
      void SetAllSystemFeatures(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response, std::function<void(::grpc::Status)>) override;
      void GetAlarm(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::AlgorithmCommunication::AlarmReqInfo,::AlgorithmCommunication::Alarms>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ScreenFrame>* AsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ScreenFrame>* PrepareAsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::AlgorithmCommunication::ScreenFrame>* GetScreenShotStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request) override;
    ::grpc::ClientAsyncReader< ::AlgorithmCommunication::ScreenFrame>* AsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::AlgorithmCommunication::ScreenFrame>* PrepareAsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>* AsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>* PrepareAsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>* AsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>* PrepareAsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>* AsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfRequests>* PrepareAsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfParameterRequests>* AsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::ResponseOfParameterRequests>* PrepareAsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::RequestForAlgorithm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>* AsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>* PrepareAsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>* AsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeature>* PrepareAsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>* AsyncGetAllSystemFeaturesRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>* PrepareAsyncGetAllSystemFeaturesRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>* AsyncSetAllSystemFeaturesRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::SystemFeatures>* PrepareAsyncSetAllSystemFeaturesRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::SystemFeatures& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>* GetAlarmRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>* AsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>* PrepareAsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetScreenShot_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScreenShotStream_;
    const ::grpc::internal::RpcMethod rpcmethod_RunAlgorithm_;
    const ::grpc::internal::RpcMethod rpcmethod_StopAlgorithm_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAlgorithmParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAlgorithmParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSystemFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSystemFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllSystemFeatures_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAllSystemFeatures_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAlarm_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response);
    virtual ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerWriter< ::AlgorithmCommunication::ScreenFrame>* writer);
    // ////////////////////////////////////////////////////////////////////////////
    virtual ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response);
    virtual ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response);
    virtual ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response);
    virtual ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response);
    virtual ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response);
    virtual ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response);
    virtual ::grpc::Status GetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response);
    virtual ::grpc::Status SetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response);
    virtual ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AlgorithmCommunication::Alarms, ::AlgorithmCommunication::AlarmReqInfo>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetScreenShot() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScreenShot(::grpc::ServerContext* context, ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::ScreenFrame>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetScreenShotStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerWriter< ::AlgorithmCommunication::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScreenShotStream(::grpc::ServerContext* context, ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerAsyncWriter< ::AlgorithmCommunication::ScreenFrame>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RunAlgorithm() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunAlgorithm(::grpc::ServerContext* context, ::AlgorithmCommunication::RequestForAlgorithm* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::ResponseOfRequests>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopAlgorithm() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopAlgorithm(::grpc::ServerContext* context, ::AlgorithmCommunication::RequestForAlgorithm* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::ResponseOfRequests>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetAlgorithmParameters() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAlgorithmParameters(::grpc::ServerContext* context, ::AlgorithmCommunication::RequestForAlgorithm* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::ResponseOfRequests>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAlgorithmParameters() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlgorithmParameters(::grpc::ServerContext* context, ::AlgorithmCommunication::RequestForAlgorithm* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::ResponseOfParameterRequests>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSystemFeature() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSystemFeature(::grpc::ServerContext* context, ::AlgorithmCommunication::SystemFeature* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::SystemFeature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetSystemFeature() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSystemFeature(::grpc::ServerContext* context, ::AlgorithmCommunication::SystemFeature* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::SystemFeature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAllSystemFeatures() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSystemFeatures(::grpc::ServerContext* context, ::AlgorithmCommunication::SystemFeatures* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::SystemFeatures>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetAllSystemFeatures() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAllSystemFeatures(::grpc::ServerContext* context, ::AlgorithmCommunication::SystemFeatures* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::SystemFeatures>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAlarm() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AlgorithmCommunication::Alarms, ::AlgorithmCommunication::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlarm(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::AlgorithmCommunication::Alarms, ::AlgorithmCommunication::AlarmReqInfo>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(10, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetScreenShot<WithAsyncMethod_GetScreenShotStream<WithAsyncMethod_RunAlgorithm<WithAsyncMethod_StopAlgorithm<WithAsyncMethod_SetAlgorithmParameters<WithAsyncMethod_GetAlgorithmParameters<WithAsyncMethod_GetSystemFeature<WithAsyncMethod_SetSystemFeature<WithAsyncMethod_GetAllSystemFeatures<WithAsyncMethod_SetAllSystemFeatures<WithAsyncMethod_GetAlarm<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetScreenShot() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::ScreenshotInfo, ::AlgorithmCommunication::ScreenFrame>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::ScreenshotInfo* request,
                 ::AlgorithmCommunication::ScreenFrame* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetScreenShot(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetScreenShot(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetScreenShotStream() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::AlgorithmCommunication::ScreenshotInfo, ::AlgorithmCommunication::ScreenFrame>(
          [this] { return this->GetScreenShotStream(); }));
    }
    ~ExperimentalWithCallbackMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerWriter< ::AlgorithmCommunication::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::AlgorithmCommunication::ScreenshotInfo, ::AlgorithmCommunication::ScreenFrame>* GetScreenShotStream() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::AlgorithmCommunication::ScreenshotInfo, ::AlgorithmCommunication::ScreenFrame>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RunAlgorithm() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::RequestForAlgorithm, ::AlgorithmCommunication::ResponseOfRequests>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::RequestForAlgorithm* request,
                 ::AlgorithmCommunication::ResponseOfRequests* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RunAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RunAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StopAlgorithm() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::RequestForAlgorithm, ::AlgorithmCommunication::ResponseOfRequests>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::RequestForAlgorithm* request,
                 ::AlgorithmCommunication::ResponseOfRequests* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StopAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetAlgorithmParameters() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::RequestForAlgorithm, ::AlgorithmCommunication::ResponseOfRequests>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::RequestForAlgorithm* request,
                 ::AlgorithmCommunication::ResponseOfRequests* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetAlgorithmParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAlgorithmParameters() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::RequestForAlgorithm, ::AlgorithmCommunication::ResponseOfParameterRequests>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::RequestForAlgorithm* request,
                 ::AlgorithmCommunication::ResponseOfParameterRequests* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAlgorithmParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetSystemFeature() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::SystemFeature, ::AlgorithmCommunication::SystemFeature>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::SystemFeature* request,
                 ::AlgorithmCommunication::SystemFeature* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSystemFeature(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetSystemFeature() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::SystemFeature, ::AlgorithmCommunication::SystemFeature>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::SystemFeature* request,
                 ::AlgorithmCommunication::SystemFeature* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetSystemFeature(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAllSystemFeatures() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::SystemFeatures, ::AlgorithmCommunication::SystemFeatures>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::SystemFeatures* request,
                 ::AlgorithmCommunication::SystemFeatures* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAllSystemFeatures(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetAllSystemFeatures() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::SystemFeatures, ::AlgorithmCommunication::SystemFeatures>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::SystemFeatures* request,
                 ::AlgorithmCommunication::SystemFeatures* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetAllSystemFeatures(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAlarm() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackBidiHandler< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>(
          [this] { return this->GetAlarm(); }));
    }
    ~ExperimentalWithCallbackMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AlgorithmCommunication::Alarms, ::AlgorithmCommunication::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>* GetAlarm() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::AlgorithmCommunication::AlarmReqInfo, ::AlgorithmCommunication::Alarms>;}
  };
  typedef ExperimentalWithCallbackMethod_GetScreenShot<ExperimentalWithCallbackMethod_GetScreenShotStream<ExperimentalWithCallbackMethod_RunAlgorithm<ExperimentalWithCallbackMethod_StopAlgorithm<ExperimentalWithCallbackMethod_SetAlgorithmParameters<ExperimentalWithCallbackMethod_GetAlgorithmParameters<ExperimentalWithCallbackMethod_GetSystemFeature<ExperimentalWithCallbackMethod_SetSystemFeature<ExperimentalWithCallbackMethod_GetAllSystemFeatures<ExperimentalWithCallbackMethod_SetAllSystemFeatures<ExperimentalWithCallbackMethod_GetAlarm<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetScreenShot() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetScreenShotStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerWriter< ::AlgorithmCommunication::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RunAlgorithm() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopAlgorithm() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetAlgorithmParameters() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAlgorithmParameters() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSystemFeature() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetSystemFeature() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAllSystemFeatures() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetAllSystemFeatures() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAlarm() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AlgorithmCommunication::Alarms, ::AlgorithmCommunication::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetScreenShot() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScreenShot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetScreenShotStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerWriter< ::AlgorithmCommunication::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScreenShotStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RunAlgorithm() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunAlgorithm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StopAlgorithm() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopAlgorithm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetAlgorithmParameters() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAlgorithmParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAlgorithmParameters() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlgorithmParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSystemFeature() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSystemFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetSystemFeature() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSystemFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAllSystemFeatures() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSystemFeatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetAllSystemFeatures() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAllSystemFeatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAlarm() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AlgorithmCommunication::Alarms, ::AlgorithmCommunication::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlarm(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(10, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetScreenShot() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetScreenShot(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetScreenShot(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetScreenShotStream() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetScreenShotStream(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerWriter< ::AlgorithmCommunication::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetScreenShotStream() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RunAlgorithm() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RunAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RunAlgorithm(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StopAlgorithm() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StopAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopAlgorithm(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetAlgorithmParameters() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetAlgorithmParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetAlgorithmParameters(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAlgorithmParameters() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAlgorithmParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAlgorithmParameters(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSystemFeature() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSystemFeature(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSystemFeature(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetSystemFeature() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetSystemFeature(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetSystemFeature(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllSystemFeatures() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAllSystemFeatures(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAllSystemFeatures(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetAllSystemFeatures() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetAllSystemFeatures(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetAllSystemFeatures(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAlarm() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetAlarm(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AlgorithmCommunication::Alarms, ::AlgorithmCommunication::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetAlarm() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetScreenShot() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::ScreenshotInfo, ::AlgorithmCommunication::ScreenFrame>(std::bind(&WithStreamedUnaryMethod_GetScreenShot<BaseClass>::StreamedGetScreenShot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::AlgorithmCommunication::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetScreenShot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::ScreenshotInfo,::AlgorithmCommunication::ScreenFrame>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RunAlgorithm() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::RequestForAlgorithm, ::AlgorithmCommunication::ResponseOfRequests>(std::bind(&WithStreamedUnaryMethod_RunAlgorithm<BaseClass>::StreamedRunAlgorithm, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunAlgorithm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::RequestForAlgorithm,::AlgorithmCommunication::ResponseOfRequests>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopAlgorithm() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::RequestForAlgorithm, ::AlgorithmCommunication::ResponseOfRequests>(std::bind(&WithStreamedUnaryMethod_StopAlgorithm<BaseClass>::StreamedStopAlgorithm, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopAlgorithm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::RequestForAlgorithm,::AlgorithmCommunication::ResponseOfRequests>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetAlgorithmParameters() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::RequestForAlgorithm, ::AlgorithmCommunication::ResponseOfRequests>(std::bind(&WithStreamedUnaryMethod_SetAlgorithmParameters<BaseClass>::StreamedSetAlgorithmParameters, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAlgorithmParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::RequestForAlgorithm,::AlgorithmCommunication::ResponseOfRequests>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAlgorithmParameters() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::RequestForAlgorithm, ::AlgorithmCommunication::ResponseOfParameterRequests>(std::bind(&WithStreamedUnaryMethod_GetAlgorithmParameters<BaseClass>::StreamedGetAlgorithmParameters, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::AlgorithmCommunication::RequestForAlgorithm* request, ::AlgorithmCommunication::ResponseOfParameterRequests* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAlgorithmParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::RequestForAlgorithm,::AlgorithmCommunication::ResponseOfParameterRequests>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSystemFeature() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::SystemFeature, ::AlgorithmCommunication::SystemFeature>(std::bind(&WithStreamedUnaryMethod_GetSystemFeature<BaseClass>::StreamedGetSystemFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSystemFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::SystemFeature,::AlgorithmCommunication::SystemFeature>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetSystemFeature() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::SystemFeature, ::AlgorithmCommunication::SystemFeature>(std::bind(&WithStreamedUnaryMethod_SetSystemFeature<BaseClass>::StreamedSetSystemFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeature* request, ::AlgorithmCommunication::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSystemFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::SystemFeature,::AlgorithmCommunication::SystemFeature>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAllSystemFeatures() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::SystemFeatures, ::AlgorithmCommunication::SystemFeatures>(std::bind(&WithStreamedUnaryMethod_GetAllSystemFeatures<BaseClass>::StreamedGetAllSystemFeatures, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllSystemFeatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::SystemFeatures,::AlgorithmCommunication::SystemFeatures>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAllSystemFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetAllSystemFeatures() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::SystemFeatures, ::AlgorithmCommunication::SystemFeatures>(std::bind(&WithStreamedUnaryMethod_SetAllSystemFeatures<BaseClass>::StreamedSetAllSystemFeatures, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetAllSystemFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAllSystemFeatures(::grpc::ServerContext* context, const ::AlgorithmCommunication::SystemFeatures* request, ::AlgorithmCommunication::SystemFeatures* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAllSystemFeatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::SystemFeatures,::AlgorithmCommunication::SystemFeatures>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetScreenShot<WithStreamedUnaryMethod_RunAlgorithm<WithStreamedUnaryMethod_StopAlgorithm<WithStreamedUnaryMethod_SetAlgorithmParameters<WithStreamedUnaryMethod_GetAlgorithmParameters<WithStreamedUnaryMethod_GetSystemFeature<WithStreamedUnaryMethod_SetSystemFeature<WithStreamedUnaryMethod_GetAllSystemFeatures<WithStreamedUnaryMethod_SetAllSystemFeatures<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetScreenShotStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::AlgorithmCommunication::ScreenshotInfo, ::AlgorithmCommunication::ScreenFrame>(std::bind(&WithSplitStreamingMethod_GetScreenShotStream<BaseClass>::StreamedGetScreenShotStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::ScreenshotInfo* request, ::grpc::ServerWriter< ::AlgorithmCommunication::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetScreenShotStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::AlgorithmCommunication::ScreenshotInfo,::AlgorithmCommunication::ScreenFrame>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetScreenShotStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetScreenShot<WithSplitStreamingMethod_GetScreenShotStream<WithStreamedUnaryMethod_RunAlgorithm<WithStreamedUnaryMethod_StopAlgorithm<WithStreamedUnaryMethod_SetAlgorithmParameters<WithStreamedUnaryMethod_GetAlgorithmParameters<WithStreamedUnaryMethod_GetSystemFeature<WithStreamedUnaryMethod_SetSystemFeature<WithStreamedUnaryMethod_GetAllSystemFeatures<WithStreamedUnaryMethod_SetAllSystemFeatures<Service > > > > > > > > > > StreamedService;
};

class DiagnosticService final {
 public:
  static constexpr char const* service_full_name() {
    return "AlgorithmCommunication.DiagnosticService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>> GetDiagnosticStatusStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>>(GetDiagnosticStatusStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>> AsyncGetDiagnosticStatusStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>>(AsyncGetDiagnosticStatusStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>> PrepareAsyncGetDiagnosticStatusStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>>(PrepareAsyncGetDiagnosticStatusStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDiagnosticStatus(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::AlgorithmCommunication::DiagnosticInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>> AsyncGetDiagnosticStatus(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>>(AsyncGetDiagnosticStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>> PrepareAsyncGetDiagnosticStatus(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>>(PrepareAsyncGetDiagnosticStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetDiagnosticStatusStream(::grpc::ClientContext* context, ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::experimental::ClientReadReactor< ::AlgorithmCommunication::DiagnosticInfo>* reactor) = 0;
      virtual void GetDiagnosticStatus(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>* GetDiagnosticStatusStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>* AsyncGetDiagnosticStatusStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>* PrepareAsyncGetDiagnosticStatusStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>* AsyncGetDiagnosticStatusRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AlgorithmCommunication::DiagnosticInfo>* PrepareAsyncGetDiagnosticStatusRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::AlgorithmCommunication::DiagnosticInfo>> GetDiagnosticStatusStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::AlgorithmCommunication::DiagnosticInfo>>(GetDiagnosticStatusStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::AlgorithmCommunication::DiagnosticInfo>> AsyncGetDiagnosticStatusStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::AlgorithmCommunication::DiagnosticInfo>>(AsyncGetDiagnosticStatusStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::AlgorithmCommunication::DiagnosticInfo>> PrepareAsyncGetDiagnosticStatusStream(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::AlgorithmCommunication::DiagnosticInfo>>(PrepareAsyncGetDiagnosticStatusStreamRaw(context, request, cq));
    }
    ::grpc::Status GetDiagnosticStatus(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::AlgorithmCommunication::DiagnosticInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::DiagnosticInfo>> AsyncGetDiagnosticStatus(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::DiagnosticInfo>>(AsyncGetDiagnosticStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::DiagnosticInfo>> PrepareAsyncGetDiagnosticStatus(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::DiagnosticInfo>>(PrepareAsyncGetDiagnosticStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDiagnosticStatusStream(::grpc::ClientContext* context, ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::experimental::ClientReadReactor< ::AlgorithmCommunication::DiagnosticInfo>* reactor) override;
      void GetDiagnosticStatus(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::AlgorithmCommunication::DiagnosticInfo>* GetDiagnosticStatusStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request) override;
    ::grpc::ClientAsyncReader< ::AlgorithmCommunication::DiagnosticInfo>* AsyncGetDiagnosticStatusStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::AlgorithmCommunication::DiagnosticInfo>* PrepareAsyncGetDiagnosticStatusStreamRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::DiagnosticInfo>* AsyncGetDiagnosticStatusRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AlgorithmCommunication::DiagnosticInfo>* PrepareAsyncGetDiagnosticStatusRaw(::grpc::ClientContext* context, const ::AlgorithmCommunication::DiagnosticQ& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDiagnosticStatusStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDiagnosticStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetDiagnosticStatusStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerWriter< ::AlgorithmCommunication::DiagnosticInfo>* writer);
    virtual ::grpc::Status GetDiagnosticStatus(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDiagnosticStatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDiagnosticStatusStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDiagnosticStatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatusStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerWriter< ::AlgorithmCommunication::DiagnosticInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDiagnosticStatusStream(::grpc::ServerContext* context, ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerAsyncWriter< ::AlgorithmCommunication::DiagnosticInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDiagnosticStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDiagnosticStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDiagnosticStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatus(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDiagnosticStatus(::grpc::ServerContext* context, ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerAsyncResponseWriter< ::AlgorithmCommunication::DiagnosticInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDiagnosticStatusStream<WithAsyncMethod_GetDiagnosticStatus<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDiagnosticStatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetDiagnosticStatusStream() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::AlgorithmCommunication::DiagnosticQ, ::AlgorithmCommunication::DiagnosticInfo>(
          [this] { return this->GetDiagnosticStatusStream(); }));
    }
    ~ExperimentalWithCallbackMethod_GetDiagnosticStatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatusStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerWriter< ::AlgorithmCommunication::DiagnosticInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::AlgorithmCommunication::DiagnosticQ, ::AlgorithmCommunication::DiagnosticInfo>* GetDiagnosticStatusStream() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::AlgorithmCommunication::DiagnosticQ, ::AlgorithmCommunication::DiagnosticInfo>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDiagnosticStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetDiagnosticStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::AlgorithmCommunication::DiagnosticQ, ::AlgorithmCommunication::DiagnosticInfo>(
          [this](::grpc::ServerContext* context,
                 const ::AlgorithmCommunication::DiagnosticQ* request,
                 ::AlgorithmCommunication::DiagnosticInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetDiagnosticStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetDiagnosticStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatus(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDiagnosticStatus(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetDiagnosticStatusStream<ExperimentalWithCallbackMethod_GetDiagnosticStatus<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDiagnosticStatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDiagnosticStatusStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDiagnosticStatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatusStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerWriter< ::AlgorithmCommunication::DiagnosticInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDiagnosticStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDiagnosticStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDiagnosticStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatus(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDiagnosticStatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDiagnosticStatusStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDiagnosticStatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatusStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerWriter< ::AlgorithmCommunication::DiagnosticInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDiagnosticStatusStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDiagnosticStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDiagnosticStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetDiagnosticStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatus(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDiagnosticStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDiagnosticStatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDiagnosticStatusStream() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetDiagnosticStatusStream(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDiagnosticStatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatusStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerWriter< ::AlgorithmCommunication::DiagnosticInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetDiagnosticStatusStream() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDiagnosticStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDiagnosticStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetDiagnosticStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDiagnosticStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDiagnosticStatus(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDiagnosticStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDiagnosticStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDiagnosticStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::AlgorithmCommunication::DiagnosticQ, ::AlgorithmCommunication::DiagnosticInfo>(std::bind(&WithStreamedUnaryMethod_GetDiagnosticStatus<BaseClass>::StreamedGetDiagnosticStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDiagnosticStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDiagnosticStatus(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::AlgorithmCommunication::DiagnosticInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDiagnosticStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AlgorithmCommunication::DiagnosticQ,::AlgorithmCommunication::DiagnosticInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDiagnosticStatus<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDiagnosticStatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetDiagnosticStatusStream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::AlgorithmCommunication::DiagnosticQ, ::AlgorithmCommunication::DiagnosticInfo>(std::bind(&WithSplitStreamingMethod_GetDiagnosticStatusStream<BaseClass>::StreamedGetDiagnosticStatusStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetDiagnosticStatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDiagnosticStatusStream(::grpc::ServerContext* context, const ::AlgorithmCommunication::DiagnosticQ* request, ::grpc::ServerWriter< ::AlgorithmCommunication::DiagnosticInfo>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDiagnosticStatusStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::AlgorithmCommunication::DiagnosticQ,::AlgorithmCommunication::DiagnosticInfo>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetDiagnosticStatusStream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetDiagnosticStatusStream<WithStreamedUnaryMethod_GetDiagnosticStatus<Service > > StreamedService;
};

}  // namespace AlgorithmCommunication


#endif  // GRPC_AlgorithmCommunication_2eproto__INCLUDED
