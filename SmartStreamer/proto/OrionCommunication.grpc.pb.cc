// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: OrionCommunication.proto

#include "OrionCommunication.pb.h"
#include "OrionCommunication.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace OrionCommunication {

static const char* OrionCommunicationService_method_names[] = {
  "/OrionCommunication.OrionCommunicationService/SetPanaromaParameters",
  "/OrionCommunication.OrionCommunicationService/GetPanaromaParameters",
  "/OrionCommunication.OrionCommunicationService/SetMotionDetectionParameters",
  "/OrionCommunication.OrionCommunicationService/GetMotionDetectionParameters",
  "/OrionCommunication.OrionCommunicationService/SetCurrentMode",
  "/OrionCommunication.OrionCommunicationService/GetCurrentMode",
  "/OrionCommunication.OrionCommunicationService/SetSensivityParameter",
  "/OrionCommunication.OrionCommunicationService/GetSensivityParameter",
  "/OrionCommunication.OrionCommunicationService/GetLastPanaromaFrame",
  "/OrionCommunication.OrionCommunicationService/GetPanaromaFrames",
  "/OrionCommunication.OrionCommunicationService/RunMotion",
  "/OrionCommunication.OrionCommunicationService/RunPanaroma",
  "/OrionCommunication.OrionCommunicationService/StopMotion",
  "/OrionCommunication.OrionCommunicationService/StopPanaroma",
  "/OrionCommunication.OrionCommunicationService/RunCalibration",
  "/OrionCommunication.OrionCommunicationService/StopCalibration",
  "/OrionCommunication.OrionCommunicationService/RunStabilization",
  "/OrionCommunication.OrionCommunicationService/StopStabilization",
  "/OrionCommunication.OrionCommunicationService/GetUptime",
  "/OrionCommunication.OrionCommunicationService/GetFovValue",
  "/OrionCommunication.OrionCommunicationService/SetItemProperty",
  "/OrionCommunication.OrionCommunicationService/GetItemProperty",
  "/OrionCommunication.OrionCommunicationService/SetBitrate",
  "/OrionCommunication.OrionCommunicationService/GetBitrate",
  "/OrionCommunication.OrionCommunicationService/RunCIT",
  "/OrionCommunication.OrionCommunicationService/GetMainScreenShot",
  "/OrionCommunication.OrionCommunicationService/GetSecScreenShot",
  "/OrionCommunication.OrionCommunicationService/GotoPanaromaPixel",
  "/OrionCommunication.OrionCommunicationService/CurrentPanaromaPixel",
  "/OrionCommunication.OrionCommunicationService/RunAutoTrack",
  "/OrionCommunication.OrionCommunicationService/StopAutoTrack",
  "/OrionCommunication.OrionCommunicationService/SetVideoOverlay",
};

std::unique_ptr< OrionCommunicationService::Stub> OrionCommunicationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrionCommunicationService::Stub> stub(new OrionCommunicationService::Stub(channel));
  return stub;
}

OrionCommunicationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetPanaromaParameters_(OrionCommunicationService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPanaromaParameters_(OrionCommunicationService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMotionDetectionParameters_(OrionCommunicationService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMotionDetectionParameters_(OrionCommunicationService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentMode_(OrionCommunicationService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentMode_(OrionCommunicationService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSensivityParameter_(OrionCommunicationService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSensivityParameter_(OrionCommunicationService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastPanaromaFrame_(OrionCommunicationService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPanaromaFrames_(OrionCommunicationService_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RunMotion_(OrionCommunicationService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunPanaroma_(OrionCommunicationService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopMotion_(OrionCommunicationService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopPanaroma_(OrionCommunicationService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunCalibration_(OrionCommunicationService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopCalibration_(OrionCommunicationService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunStabilization_(OrionCommunicationService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopStabilization_(OrionCommunicationService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUptime_(OrionCommunicationService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFovValue_(OrionCommunicationService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetItemProperty_(OrionCommunicationService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetItemProperty_(OrionCommunicationService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBitrate_(OrionCommunicationService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBitrate_(OrionCommunicationService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunCIT_(OrionCommunicationService_method_names[24], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetMainScreenShot_(OrionCommunicationService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSecScreenShot_(OrionCommunicationService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GotoPanaromaPixel_(OrionCommunicationService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrentPanaromaPixel_(OrionCommunicationService_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunAutoTrack_(OrionCommunicationService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopAutoTrack_(OrionCommunicationService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVideoOverlay_(OrionCommunicationService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrionCommunicationService::Stub::SetPanaromaParameters(::grpc::ClientContext* context, const ::OrionCommunication::PanoramaPars& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPanaromaParameters_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::SetPanaromaParameters(::grpc::ClientContext* context, const ::OrionCommunication::PanoramaPars* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPanaromaParameters_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncSetPanaromaParametersRaw(::grpc::ClientContext* context, const ::OrionCommunication::PanoramaPars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetPanaromaParameters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncSetPanaromaParametersRaw(::grpc::ClientContext* context, const ::OrionCommunication::PanoramaPars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetPanaromaParameters_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetPanaromaParameters(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::PanoramaPars* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPanaromaParameters_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetPanaromaParameters(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::PanoramaPars* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPanaromaParameters_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::PanoramaPars>* OrionCommunicationService::Stub::AsyncGetPanaromaParametersRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::PanoramaPars>::Create(channel_.get(), cq, rpcmethod_GetPanaromaParameters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::PanoramaPars>* OrionCommunicationService::Stub::PrepareAsyncGetPanaromaParametersRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::PanoramaPars>::Create(channel_.get(), cq, rpcmethod_GetPanaromaParameters_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::SetMotionDetectionParameters(::grpc::ClientContext* context, const ::OrionCommunication::TRoi& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMotionDetectionParameters_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::SetMotionDetectionParameters(::grpc::ClientContext* context, const ::OrionCommunication::TRoi* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMotionDetectionParameters_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncSetMotionDetectionParametersRaw(::grpc::ClientContext* context, const ::OrionCommunication::TRoi& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetMotionDetectionParameters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncSetMotionDetectionParametersRaw(::grpc::ClientContext* context, const ::OrionCommunication::TRoi& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetMotionDetectionParameters_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetMotionDetectionParameters(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::TRoi* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMotionDetectionParameters_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetMotionDetectionParameters(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::TRoi* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMotionDetectionParameters_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::TRoi>* OrionCommunicationService::Stub::AsyncGetMotionDetectionParametersRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::TRoi>::Create(channel_.get(), cq, rpcmethod_GetMotionDetectionParameters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::TRoi>* OrionCommunicationService::Stub::PrepareAsyncGetMotionDetectionParametersRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::TRoi>::Create(channel_.get(), cq, rpcmethod_GetMotionDetectionParameters_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::SetCurrentMode(::grpc::ClientContext* context, const ::OrionCommunication::ModeQ& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCurrentMode_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::SetCurrentMode(::grpc::ClientContext* context, const ::OrionCommunication::ModeQ* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentMode_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncSetCurrentModeRaw(::grpc::ClientContext* context, const ::OrionCommunication::ModeQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetCurrentMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncSetCurrentModeRaw(::grpc::ClientContext* context, const ::OrionCommunication::ModeQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetCurrentMode_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetCurrentMode(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::ModeQ* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCurrentMode_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetCurrentMode(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::ModeQ* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCurrentMode_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ModeQ>* OrionCommunicationService::Stub::AsyncGetCurrentModeRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ModeQ>::Create(channel_.get(), cq, rpcmethod_GetCurrentMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ModeQ>* OrionCommunicationService::Stub::PrepareAsyncGetCurrentModeRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ModeQ>::Create(channel_.get(), cq, rpcmethod_GetCurrentMode_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::SetSensivityParameter(::grpc::ClientContext* context, const ::OrionCommunication::SetSensivity& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSensivityParameter_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::SetSensivityParameter(::grpc::ClientContext* context, const ::OrionCommunication::SetSensivity* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSensivityParameter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncSetSensivityParameterRaw(::grpc::ClientContext* context, const ::OrionCommunication::SetSensivity& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetSensivityParameter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncSetSensivityParameterRaw(::grpc::ClientContext* context, const ::OrionCommunication::SetSensivity& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetSensivityParameter_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetSensivityParameter(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::SetSensivity* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSensivityParameter_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetSensivityParameter(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::SetSensivity* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSensivityParameter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::SetSensivity>* OrionCommunicationService::Stub::AsyncGetSensivityParameterRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::SetSensivity>::Create(channel_.get(), cq, rpcmethod_GetSensivityParameter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::SetSensivity>* OrionCommunicationService::Stub::PrepareAsyncGetSensivityParameterRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::SetSensivity>::Create(channel_.get(), cq, rpcmethod_GetSensivityParameter_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetLastPanaromaFrame(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLastPanaromaFrame_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetLastPanaromaFrame(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastPanaromaFrame_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncGetLastPanaromaFrameRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_GetLastPanaromaFrame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncGetLastPanaromaFrameRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_GetLastPanaromaFrame_, context, request, false);
}

::grpc::ClientReader< ::OrionCommunication::PanoramaFrame>* OrionCommunicationService::Stub::GetPanaromaFramesRaw(::grpc::ClientContext* context, const ::OrionCommunication::FrameModeQ& request) {
  return ::grpc::internal::ClientReaderFactory< ::OrionCommunication::PanoramaFrame>::Create(channel_.get(), rpcmethod_GetPanaromaFrames_, context, request);
}

void OrionCommunicationService::Stub::experimental_async::GetPanaromaFrames(::grpc::ClientContext* context, ::OrionCommunication::FrameModeQ* request, ::grpc::experimental::ClientReadReactor< ::OrionCommunication::PanoramaFrame>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::OrionCommunication::PanoramaFrame>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPanaromaFrames_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::OrionCommunication::PanoramaFrame>* OrionCommunicationService::Stub::AsyncGetPanaromaFramesRaw(::grpc::ClientContext* context, const ::OrionCommunication::FrameModeQ& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::OrionCommunication::PanoramaFrame>::Create(channel_.get(), cq, rpcmethod_GetPanaromaFrames_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::OrionCommunication::PanoramaFrame>* OrionCommunicationService::Stub::PrepareAsyncGetPanaromaFramesRaw(::grpc::ClientContext* context, const ::OrionCommunication::FrameModeQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::OrionCommunication::PanoramaFrame>::Create(channel_.get(), cq, rpcmethod_GetPanaromaFrames_, context, request, false, nullptr);
}

::grpc::Status OrionCommunicationService::Stub::RunMotion(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunMotion_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::RunMotion(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunMotion_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncRunMotionRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunMotion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncRunMotionRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunMotion_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::RunPanaroma(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunPanaroma_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::RunPanaroma(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunPanaroma_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncRunPanaromaRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunPanaroma_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncRunPanaromaRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunPanaroma_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::StopMotion(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopMotion_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncStopMotionRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopMotion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncStopMotionRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopMotion_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::StopPanaroma(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopPanaroma_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::StopPanaroma(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopPanaroma_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncStopPanaromaRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopPanaroma_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncStopPanaromaRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopPanaroma_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::RunCalibration(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunCalibration_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::RunCalibration(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunCalibration_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncRunCalibrationRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunCalibration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncRunCalibrationRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunCalibration_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::StopCalibration(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopCalibration_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::StopCalibration(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopCalibration_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncStopCalibrationRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopCalibration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncStopCalibrationRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopCalibration_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::RunStabilization(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunStabilization_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::RunStabilization(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunStabilization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncRunStabilizationRaw(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunStabilization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncRunStabilizationRaw(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunStabilization_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::StopStabilization(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopStabilization_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::StopStabilization(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopStabilization_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncStopStabilizationRaw(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopStabilization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncStopStabilizationRaw(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopStabilization_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetUptime(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::OrionCommunication::ReturnUptimeValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUptime_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetUptime(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo* request, ::OrionCommunication::ReturnUptimeValue* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUptime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ReturnUptimeValue>* OrionCommunicationService::Stub::AsyncGetUptimeRaw(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ReturnUptimeValue>::Create(channel_.get(), cq, rpcmethod_GetUptime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ReturnUptimeValue>* OrionCommunicationService::Stub::PrepareAsyncGetUptimeRaw(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ReturnUptimeValue>::Create(channel_.get(), cq, rpcmethod_GetUptime_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetFovValue(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::OrionCommunication::ReturnFOVValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFovValue_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetFovValue(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo* request, ::OrionCommunication::ReturnFOVValue* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFovValue_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ReturnFOVValue>* OrionCommunicationService::Stub::AsyncGetFovValueRaw(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ReturnFOVValue>::Create(channel_.get(), cq, rpcmethod_GetFovValue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ReturnFOVValue>* OrionCommunicationService::Stub::PrepareAsyncGetFovValueRaw(::grpc::ClientContext* context, const ::OrionCommunication::DevicedBasedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ReturnFOVValue>::Create(channel_.get(), cq, rpcmethod_GetFovValue_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::SetItemProperty(::grpc::ClientContext* context, const ::OrionCommunication::ItemProperty& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetItemProperty_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::SetItemProperty(::grpc::ClientContext* context, const ::OrionCommunication::ItemProperty* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetItemProperty_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncSetItemPropertyRaw(::grpc::ClientContext* context, const ::OrionCommunication::ItemProperty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetItemProperty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncSetItemPropertyRaw(::grpc::ClientContext* context, const ::OrionCommunication::ItemProperty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetItemProperty_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetItemProperty(::grpc::ClientContext* context, const ::OrionCommunication::ItemProperty& request, ::OrionCommunication::ItemProperty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetItemProperty_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetItemProperty(::grpc::ClientContext* context, const ::OrionCommunication::ItemProperty* request, ::OrionCommunication::ItemProperty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetItemProperty_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ItemProperty>* OrionCommunicationService::Stub::AsyncGetItemPropertyRaw(::grpc::ClientContext* context, const ::OrionCommunication::ItemProperty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ItemProperty>::Create(channel_.get(), cq, rpcmethod_GetItemProperty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ItemProperty>* OrionCommunicationService::Stub::PrepareAsyncGetItemPropertyRaw(::grpc::ClientContext* context, const ::OrionCommunication::ItemProperty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ItemProperty>::Create(channel_.get(), cq, rpcmethod_GetItemProperty_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::SetBitrate(::grpc::ClientContext* context, const ::OrionCommunication::BitrateValue& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetBitrate_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::SetBitrate(::grpc::ClientContext* context, const ::OrionCommunication::BitrateValue* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetBitrate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncSetBitrateRaw(::grpc::ClientContext* context, const ::OrionCommunication::BitrateValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetBitrate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncSetBitrateRaw(::grpc::ClientContext* context, const ::OrionCommunication::BitrateValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetBitrate_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetBitrate(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::BitrateValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBitrate_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetBitrate(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::BitrateValue* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBitrate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::BitrateValue>* OrionCommunicationService::Stub::AsyncGetBitrateRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::BitrateValue>::Create(channel_.get(), cq, rpcmethod_GetBitrate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::BitrateValue>* OrionCommunicationService::Stub::PrepareAsyncGetBitrateRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::BitrateValue>::Create(channel_.get(), cq, rpcmethod_GetBitrate_, context, request, false);
}

::grpc::ClientReader< ::OrionCommunication::CitMessage>* OrionCommunicationService::Stub::RunCITRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request) {
  return ::grpc::internal::ClientReaderFactory< ::OrionCommunication::CitMessage>::Create(channel_.get(), rpcmethod_RunCIT_, context, request);
}

void OrionCommunicationService::Stub::experimental_async::RunCIT(::grpc::ClientContext* context, ::OrionCommunication::DummyInfo* request, ::grpc::experimental::ClientReadReactor< ::OrionCommunication::CitMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::OrionCommunication::CitMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_RunCIT_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::OrionCommunication::CitMessage>* OrionCommunicationService::Stub::AsyncRunCITRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::OrionCommunication::CitMessage>::Create(channel_.get(), cq, rpcmethod_RunCIT_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::OrionCommunication::CitMessage>* OrionCommunicationService::Stub::PrepareAsyncRunCITRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::OrionCommunication::CitMessage>::Create(channel_.get(), cq, rpcmethod_RunCIT_, context, request, false, nullptr);
}

::grpc::Status OrionCommunicationService::Stub::GetMainScreenShot(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::ScreenFrame* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMainScreenShot_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetMainScreenShot(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::ScreenFrame* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMainScreenShot_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ScreenFrame>* OrionCommunicationService::Stub::AsyncGetMainScreenShotRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ScreenFrame>::Create(channel_.get(), cq, rpcmethod_GetMainScreenShot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ScreenFrame>* OrionCommunicationService::Stub::PrepareAsyncGetMainScreenShotRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ScreenFrame>::Create(channel_.get(), cq, rpcmethod_GetMainScreenShot_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GetSecScreenShot(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::ScreenFrame* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSecScreenShot_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GetSecScreenShot(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::ScreenFrame* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSecScreenShot_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ScreenFrame>* OrionCommunicationService::Stub::AsyncGetSecScreenShotRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ScreenFrame>::Create(channel_.get(), cq, rpcmethod_GetSecScreenShot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::ScreenFrame>* OrionCommunicationService::Stub::PrepareAsyncGetSecScreenShotRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::ScreenFrame>::Create(channel_.get(), cq, rpcmethod_GetSecScreenShot_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::GotoPanaromaPixel(::grpc::ClientContext* context, const ::OrionCommunication::TPoint& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GotoPanaromaPixel_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::GotoPanaromaPixel(::grpc::ClientContext* context, const ::OrionCommunication::TPoint* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GotoPanaromaPixel_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncGotoPanaromaPixelRaw(::grpc::ClientContext* context, const ::OrionCommunication::TPoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_GotoPanaromaPixel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncGotoPanaromaPixelRaw(::grpc::ClientContext* context, const ::OrionCommunication::TPoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_GotoPanaromaPixel_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::CurrentPanaromaPixel(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::TPoint* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CurrentPanaromaPixel_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::CurrentPanaromaPixel(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::TPoint* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CurrentPanaromaPixel_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::TPoint>* OrionCommunicationService::Stub::AsyncCurrentPanaromaPixelRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::TPoint>::Create(channel_.get(), cq, rpcmethod_CurrentPanaromaPixel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::TPoint>* OrionCommunicationService::Stub::PrepareAsyncCurrentPanaromaPixelRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::TPoint>::Create(channel_.get(), cq, rpcmethod_CurrentPanaromaPixel_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::RunAutoTrack(::grpc::ClientContext* context, const ::OrionCommunication::AutoTrackQ& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunAutoTrack_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::RunAutoTrack(::grpc::ClientContext* context, const ::OrionCommunication::AutoTrackQ* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunAutoTrack_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncRunAutoTrackRaw(::grpc::ClientContext* context, const ::OrionCommunication::AutoTrackQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunAutoTrack_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncRunAutoTrackRaw(::grpc::ClientContext* context, const ::OrionCommunication::AutoTrackQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_RunAutoTrack_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::StopAutoTrack(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopAutoTrack_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::StopAutoTrack(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopAutoTrack_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncStopAutoTrackRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopAutoTrack_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncStopAutoTrackRaw(::grpc::ClientContext* context, const ::OrionCommunication::DummyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_StopAutoTrack_, context, request, false);
}

::grpc::Status OrionCommunicationService::Stub::SetVideoOverlay(::grpc::ClientContext* context, const ::OrionCommunication::OverlayQ& request, ::OrionCommunication::AppCommandResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetVideoOverlay_, context, request, response);
}

void OrionCommunicationService::Stub::experimental_async::SetVideoOverlay(::grpc::ClientContext* context, const ::OrionCommunication::OverlayQ* request, ::OrionCommunication::AppCommandResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetVideoOverlay_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::AsyncSetVideoOverlayRaw(::grpc::ClientContext* context, const ::OrionCommunication::OverlayQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetVideoOverlay_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OrionCommunication::AppCommandResult>* OrionCommunicationService::Stub::PrepareAsyncSetVideoOverlayRaw(::grpc::ClientContext* context, const ::OrionCommunication::OverlayQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrionCommunication::AppCommandResult>::Create(channel_.get(), cq, rpcmethod_SetVideoOverlay_, context, request, false);
}

OrionCommunicationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::PanoramaPars, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::SetPanaromaParameters), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::PanoramaPars>(
          std::mem_fn(&OrionCommunicationService::Service::GetPanaromaParameters), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::TRoi, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::SetMotionDetectionParameters), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::TRoi>(
          std::mem_fn(&OrionCommunicationService::Service::GetMotionDetectionParameters), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::ModeQ, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::SetCurrentMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::ModeQ>(
          std::mem_fn(&OrionCommunicationService::Service::GetCurrentMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::SetSensivity, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::SetSensivityParameter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::SetSensivity>(
          std::mem_fn(&OrionCommunicationService::Service::GetSensivityParameter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::GetLastPanaromaFrame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< OrionCommunicationService::Service, ::OrionCommunication::FrameModeQ, ::OrionCommunication::PanoramaFrame>(
          std::mem_fn(&OrionCommunicationService::Service::GetPanaromaFrames), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::RunMotion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::RunPanaroma), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::StopMotion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::StopPanaroma), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::RunCalibration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::StopCalibration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DevicedBasedInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::RunStabilization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DevicedBasedInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::StopStabilization), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DevicedBasedInfo, ::OrionCommunication::ReturnUptimeValue>(
          std::mem_fn(&OrionCommunicationService::Service::GetUptime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DevicedBasedInfo, ::OrionCommunication::ReturnFOVValue>(
          std::mem_fn(&OrionCommunicationService::Service::GetFovValue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::ItemProperty, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::SetItemProperty), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::ItemProperty, ::OrionCommunication::ItemProperty>(
          std::mem_fn(&OrionCommunicationService::Service::GetItemProperty), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::BitrateValue, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::SetBitrate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::BitrateValue>(
          std::mem_fn(&OrionCommunicationService::Service::GetBitrate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[24],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::CitMessage>(
          std::mem_fn(&OrionCommunicationService::Service::RunCIT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::ScreenFrame>(
          std::mem_fn(&OrionCommunicationService::Service::GetMainScreenShot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::ScreenFrame>(
          std::mem_fn(&OrionCommunicationService::Service::GetSecScreenShot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::TPoint, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::GotoPanaromaPixel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::TPoint>(
          std::mem_fn(&OrionCommunicationService::Service::CurrentPanaromaPixel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::AutoTrackQ, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::RunAutoTrack), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::DummyInfo, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::StopAutoTrack), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrionCommunicationService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrionCommunicationService::Service, ::OrionCommunication::OverlayQ, ::OrionCommunication::AppCommandResult>(
          std::mem_fn(&OrionCommunicationService::Service::SetVideoOverlay), this)));
}

OrionCommunicationService::Service::~Service() {
}

::grpc::Status OrionCommunicationService::Service::SetPanaromaParameters(::grpc::ServerContext* context, const ::OrionCommunication::PanoramaPars* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetPanaromaParameters(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::PanoramaPars* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::SetMotionDetectionParameters(::grpc::ServerContext* context, const ::OrionCommunication::TRoi* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetMotionDetectionParameters(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::TRoi* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::SetCurrentMode(::grpc::ServerContext* context, const ::OrionCommunication::ModeQ* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetCurrentMode(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::ModeQ* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::SetSensivityParameter(::grpc::ServerContext* context, const ::OrionCommunication::SetSensivity* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetSensivityParameter(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::SetSensivity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetLastPanaromaFrame(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetPanaromaFrames(::grpc::ServerContext* context, const ::OrionCommunication::FrameModeQ* request, ::grpc::ServerWriter< ::OrionCommunication::PanoramaFrame>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::RunMotion(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::RunPanaroma(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::StopMotion(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::StopPanaroma(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::RunCalibration(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::StopCalibration(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::RunStabilization(::grpc::ServerContext* context, const ::OrionCommunication::DevicedBasedInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::StopStabilization(::grpc::ServerContext* context, const ::OrionCommunication::DevicedBasedInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetUptime(::grpc::ServerContext* context, const ::OrionCommunication::DevicedBasedInfo* request, ::OrionCommunication::ReturnUptimeValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetFovValue(::grpc::ServerContext* context, const ::OrionCommunication::DevicedBasedInfo* request, ::OrionCommunication::ReturnFOVValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::SetItemProperty(::grpc::ServerContext* context, const ::OrionCommunication::ItemProperty* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetItemProperty(::grpc::ServerContext* context, const ::OrionCommunication::ItemProperty* request, ::OrionCommunication::ItemProperty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::SetBitrate(::grpc::ServerContext* context, const ::OrionCommunication::BitrateValue* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetBitrate(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::BitrateValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::RunCIT(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::grpc::ServerWriter< ::OrionCommunication::CitMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetMainScreenShot(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::ScreenFrame* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GetSecScreenShot(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::ScreenFrame* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::GotoPanaromaPixel(::grpc::ServerContext* context, const ::OrionCommunication::TPoint* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::CurrentPanaromaPixel(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::TPoint* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::RunAutoTrack(::grpc::ServerContext* context, const ::OrionCommunication::AutoTrackQ* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::StopAutoTrack(::grpc::ServerContext* context, const ::OrionCommunication::DummyInfo* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrionCommunicationService::Service::SetVideoOverlay(::grpc::ServerContext* context, const ::OrionCommunication::OverlayQ* request, ::OrionCommunication::AppCommandResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace OrionCommunication

