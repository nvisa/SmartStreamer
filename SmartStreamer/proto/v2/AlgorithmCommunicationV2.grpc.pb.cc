// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AlgorithmCommunicationV2.proto

#include "AlgorithmCommunicationV2.pb.h"
#include "AlgorithmCommunicationV2.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace algorithm {
namespace v2 {

static const char* AlgorithmService_method_names[] = {
  "/algorithm.v2.AlgorithmService/GetScreenShot",
  "/algorithm.v2.AlgorithmService/GetScreenShotStream",
  "/algorithm.v2.AlgorithmService/RunAlgorithm",
  "/algorithm.v2.AlgorithmService/RestartAlgorithm",
  "/algorithm.v2.AlgorithmService/StopAlgorithm",
  "/algorithm.v2.AlgorithmService/SetAlgorithmParameters",
  "/algorithm.v2.AlgorithmService/GetAlgorithmParameters",
  "/algorithm.v2.AlgorithmService/ListAlgorithms",
  "/algorithm.v2.AlgorithmService/GetSystemFeature",
  "/algorithm.v2.AlgorithmService/SetSystemFeature",
  "/algorithm.v2.AlgorithmService/GetAlarm",
};

std::unique_ptr< AlgorithmService::Stub> AlgorithmService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AlgorithmService::Stub> stub(new AlgorithmService::Stub(channel));
  return stub;
}

AlgorithmService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetScreenShot_(AlgorithmService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetScreenShotStream_(AlgorithmService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RunAlgorithm_(AlgorithmService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestartAlgorithm_(AlgorithmService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopAlgorithm_(AlgorithmService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAlgorithmParameters_(AlgorithmService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAlgorithmParameters_(AlgorithmService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAlgorithms_(AlgorithmService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSystemFeature_(AlgorithmService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSystemFeature_(AlgorithmService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAlarm_(AlgorithmService_method_names[10], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status AlgorithmService::Stub::GetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::algorithm::v2::ScreenFrame* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetScreenShot_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::GetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetScreenShot_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::ScreenFrame>* AlgorithmService::Stub::AsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::ScreenFrame>::Create(channel_.get(), cq, rpcmethod_GetScreenShot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::ScreenFrame>* AlgorithmService::Stub::PrepareAsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::ScreenFrame>::Create(channel_.get(), cq, rpcmethod_GetScreenShot_, context, request, false);
}

::grpc::ClientReader< ::algorithm::v2::ScreenFrame>* AlgorithmService::Stub::GetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request) {
  return ::grpc::internal::ClientReaderFactory< ::algorithm::v2::ScreenFrame>::Create(channel_.get(), rpcmethod_GetScreenShotStream_, context, request);
}

void AlgorithmService::Stub::experimental_async::GetScreenShotStream(::grpc::ClientContext* context, ::algorithm::v2::ScreenshotInfo* request, ::grpc::experimental::ClientReadReactor< ::algorithm::v2::ScreenFrame>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::algorithm::v2::ScreenFrame>::Create(stub_->channel_.get(), stub_->rpcmethod_GetScreenShotStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::algorithm::v2::ScreenFrame>* AlgorithmService::Stub::AsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::algorithm::v2::ScreenFrame>::Create(channel_.get(), cq, rpcmethod_GetScreenShotStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::algorithm::v2::ScreenFrame>* AlgorithmService::Stub::PrepareAsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::algorithm::v2::ScreenFrame>::Create(channel_.get(), cq, rpcmethod_GetScreenShotStream_, context, request, false, nullptr);
}

::grpc::Status AlgorithmService::Stub::RunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunAlgorithm_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::RunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunAlgorithm_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AlgorithmService::Stub::AsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RunAlgorithm_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AlgorithmService::Stub::PrepareAsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RunAlgorithm_, context, request, false);
}

::grpc::Status AlgorithmService::Stub::RestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RestartAlgorithm_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::RestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartAlgorithm_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AlgorithmService::Stub::AsyncRestartAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RestartAlgorithm_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AlgorithmService::Stub::PrepareAsyncRestartAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_RestartAlgorithm_, context, request, false);
}

::grpc::Status AlgorithmService::Stub::StopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopAlgorithm_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::StopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopAlgorithm_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AlgorithmService::Stub::AsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StopAlgorithm_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AlgorithmService::Stub::PrepareAsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StopAlgorithm_, context, request, false);
}

::grpc::Status AlgorithmService::Stub::SetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAlgorithmParameters_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::SetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAlgorithmParameters_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AlgorithmService::Stub::AsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetAlgorithmParameters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AlgorithmService::Stub::PrepareAsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetAlgorithmParameters_, context, request, false);
}

::grpc::Status AlgorithmService::Stub::GetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::algorithm::v2::AlgorithmParameters* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAlgorithmParameters_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::GetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAlgorithmParameters_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmParameters>* AlgorithmService::Stub::AsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::AlgorithmParameters>::Create(channel_.get(), cq, rpcmethod_GetAlgorithmParameters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmParameters>* AlgorithmService::Stub::PrepareAsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::AlgorithmParameters>::Create(channel_.get(), cq, rpcmethod_GetAlgorithmParameters_, context, request, false);
}

::grpc::Status AlgorithmService::Stub::ListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::algorithm::v2::AlgorithmListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAlgorithms_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::ListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAlgorithms_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmListResponse>* AlgorithmService::Stub::AsyncListAlgorithmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::AlgorithmListResponse>::Create(channel_.get(), cq, rpcmethod_ListAlgorithms_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmListResponse>* AlgorithmService::Stub::PrepareAsyncListAlgorithmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::AlgorithmListResponse>::Create(channel_.get(), cq, rpcmethod_ListAlgorithms_, context, request, false);
}

::grpc::Status AlgorithmService::Stub::GetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::algorithm::v2::SystemFeature* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSystemFeature_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::GetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSystemFeature_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>* AlgorithmService::Stub::AsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::SystemFeature>::Create(channel_.get(), cq, rpcmethod_GetSystemFeature_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>* AlgorithmService::Stub::PrepareAsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::SystemFeature>::Create(channel_.get(), cq, rpcmethod_GetSystemFeature_, context, request, false);
}

::grpc::Status AlgorithmService::Stub::SetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::algorithm::v2::SystemFeature* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSystemFeature_, context, request, response);
}

void AlgorithmService::Stub::experimental_async::SetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSystemFeature_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>* AlgorithmService::Stub::AsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::SystemFeature>::Create(channel_.get(), cq, rpcmethod_SetSystemFeature_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>* AlgorithmService::Stub::PrepareAsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::algorithm::v2::SystemFeature>::Create(channel_.get(), cq, rpcmethod_SetSystemFeature_, context, request, false);
}

::grpc::ClientReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* AlgorithmService::Stub::GetAlarmRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>::Create(channel_.get(), rpcmethod_GetAlarm_, context);
}

void AlgorithmService::Stub::experimental_async::GetAlarm(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::algorithm::v2::AlarmReqInfo,::algorithm::v2::Alarms>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::algorithm::v2::AlarmReqInfo,::algorithm::v2::Alarms>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAlarm_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* AlgorithmService::Stub::AsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>::Create(channel_.get(), cq, rpcmethod_GetAlarm_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* AlgorithmService::Stub::PrepareAsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>::Create(channel_.get(), cq, rpcmethod_GetAlarm_, context, false, nullptr);
}

AlgorithmService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::v2::ScreenshotInfo, ::algorithm::v2::ScreenFrame>(
          std::mem_fn(&AlgorithmService::Service::GetScreenShot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AlgorithmService::Service, ::algorithm::v2::ScreenshotInfo, ::algorithm::v2::ScreenFrame>(
          std::mem_fn(&AlgorithmService::Service::GetScreenShotStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(
          std::mem_fn(&AlgorithmService::Service::RunAlgorithm), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(
          std::mem_fn(&AlgorithmService::Service::RestartAlgorithm), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(
          std::mem_fn(&AlgorithmService::Service::StopAlgorithm), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::v2::AlgorithmParametersSetRequest, ::google::protobuf::Empty>(
          std::mem_fn(&AlgorithmService::Service::SetAlgorithmParameters), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::v2::AlgorithmHead, ::algorithm::v2::AlgorithmParameters>(
          std::mem_fn(&AlgorithmService::Service::GetAlgorithmParameters), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::google::protobuf::Empty, ::algorithm::v2::AlgorithmListResponse>(
          std::mem_fn(&AlgorithmService::Service::ListAlgorithms), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::v2::SystemFeature, ::algorithm::v2::SystemFeature>(
          std::mem_fn(&AlgorithmService::Service::GetSystemFeature), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlgorithmService::Service, ::algorithm::v2::SystemFeature, ::algorithm::v2::SystemFeature>(
          std::mem_fn(&AlgorithmService::Service::SetSystemFeature), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlgorithmService_method_names[10],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< AlgorithmService::Service, ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>(
          std::mem_fn(&AlgorithmService::Service::GetAlarm), this)));
}

AlgorithmService::Service::~Service() {
}

::grpc::Status AlgorithmService::Service::GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::GetScreenShotStream(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerWriter< ::algorithm::v2::ScreenFrame>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlgorithmService::Service::GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::algorithm::v2::Alarms, ::algorithm::v2::AlarmReqInfo>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace algorithm
}  // namespace v2

