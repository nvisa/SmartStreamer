// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AlgorithmCommunicationV2.proto
#ifndef GRPC_AlgorithmCommunicationV2_2eproto__INCLUDED
#define GRPC_AlgorithmCommunicationV2_2eproto__INCLUDED

#include "AlgorithmCommunicationV2.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace algorithm {
namespace v2 {

class AlgorithmService final {
 public:
  static constexpr char const* service_full_name() {
    return "algorithm.v2.AlgorithmService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::algorithm::v2::ScreenFrame* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::ScreenFrame>> AsyncGetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::ScreenFrame>>(AsyncGetScreenShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::ScreenFrame>> PrepareAsyncGetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::ScreenFrame>>(PrepareAsyncGetScreenShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::algorithm::v2::ScreenFrame>> GetScreenShotStream(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::algorithm::v2::ScreenFrame>>(GetScreenShotStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::algorithm::v2::ScreenFrame>> AsyncGetScreenShotStream(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::algorithm::v2::ScreenFrame>>(AsyncGetScreenShotStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::algorithm::v2::ScreenFrame>> PrepareAsyncGetScreenShotStream(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::algorithm::v2::ScreenFrame>>(PrepareAsyncGetScreenShotStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status RunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRunAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRunAlgorithmRaw(context, request, cq));
    }
    virtual ::grpc::Status RestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRestartAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRestartAlgorithmRaw(context, request, cq));
    }
    virtual ::grpc::Status StopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncStopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncStopAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncStopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncStopAlgorithmRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSetAlgorithmParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSetAlgorithmParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::algorithm::v2::AlgorithmParameters* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmParameters>> AsyncGetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmParameters>>(AsyncGetAlgorithmParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmParameters>> PrepareAsyncGetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmParameters>>(PrepareAsyncGetAlgorithmParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::algorithm::v2::AlgorithmListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmListResponse>> AsyncListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmListResponse>>(AsyncListAlgorithmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmListResponse>> PrepareAsyncListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmListResponse>>(PrepareAsyncListAlgorithmsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::algorithm::v2::SystemFeature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>> AsyncGetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>>(AsyncGetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>> PrepareAsyncGetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>>(PrepareAsyncGetSystemFeatureRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::algorithm::v2::SystemFeature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>> AsyncSetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>>(AsyncSetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>> PrepareAsyncSetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>>(PrepareAsyncSetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>> GetAlarm(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>>(GetAlarmRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>> AsyncGetAlarm(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>>(AsyncGetAlarmRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>> PrepareAsyncGetAlarm(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>>(PrepareAsyncGetAlarmRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetScreenShotStream(::grpc::ClientContext* context, ::algorithm::v2::ScreenshotInfo* request, ::grpc::experimental::ClientReadReactor< ::algorithm::v2::ScreenFrame>* reactor) = 0;
      virtual void RunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAlarm(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::algorithm::v2::AlarmReqInfo,::algorithm::v2::Alarms>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::ScreenFrame>* AsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::ScreenFrame>* PrepareAsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::algorithm::v2::ScreenFrame>* GetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::algorithm::v2::ScreenFrame>* AsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::algorithm::v2::ScreenFrame>* PrepareAsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRestartAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRestartAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmParameters>* AsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmParameters>* PrepareAsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmListResponse>* AsyncListAlgorithmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::AlgorithmListResponse>* PrepareAsyncListAlgorithmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>* AsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>* PrepareAsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>* AsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::algorithm::v2::SystemFeature>* PrepareAsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* GetAlarmRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* AsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* PrepareAsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::algorithm::v2::ScreenFrame* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::ScreenFrame>> AsyncGetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::ScreenFrame>>(AsyncGetScreenShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::ScreenFrame>> PrepareAsyncGetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::ScreenFrame>>(PrepareAsyncGetScreenShotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::algorithm::v2::ScreenFrame>> GetScreenShotStream(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::algorithm::v2::ScreenFrame>>(GetScreenShotStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::algorithm::v2::ScreenFrame>> AsyncGetScreenShotStream(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::algorithm::v2::ScreenFrame>>(AsyncGetScreenShotStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::algorithm::v2::ScreenFrame>> PrepareAsyncGetScreenShotStream(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::algorithm::v2::ScreenFrame>>(PrepareAsyncGetScreenShotStreamRaw(context, request, cq));
    }
    ::grpc::Status RunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRunAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRunAlgorithmRaw(context, request, cq));
    }
    ::grpc::Status RestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRestartAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRestartAlgorithmRaw(context, request, cq));
    }
    ::grpc::Status StopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncStopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncStopAlgorithmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncStopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncStopAlgorithmRaw(context, request, cq));
    }
    ::grpc::Status SetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSetAlgorithmParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSetAlgorithmParametersRaw(context, request, cq));
    }
    ::grpc::Status GetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::algorithm::v2::AlgorithmParameters* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmParameters>> AsyncGetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmParameters>>(AsyncGetAlgorithmParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmParameters>> PrepareAsyncGetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmParameters>>(PrepareAsyncGetAlgorithmParametersRaw(context, request, cq));
    }
    ::grpc::Status ListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::algorithm::v2::AlgorithmListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmListResponse>> AsyncListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmListResponse>>(AsyncListAlgorithmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmListResponse>> PrepareAsyncListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmListResponse>>(PrepareAsyncListAlgorithmsRaw(context, request, cq));
    }
    ::grpc::Status GetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::algorithm::v2::SystemFeature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>> AsyncGetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>>(AsyncGetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>> PrepareAsyncGetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>>(PrepareAsyncGetSystemFeatureRaw(context, request, cq));
    }
    ::grpc::Status SetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::algorithm::v2::SystemFeature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>> AsyncSetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>>(AsyncSetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>> PrepareAsyncSetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>>(PrepareAsyncSetSystemFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>> GetAlarm(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>>(GetAlarmRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>> AsyncGetAlarm(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>>(AsyncGetAlarmRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>> PrepareAsyncGetAlarm(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>>(PrepareAsyncGetAlarmRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetScreenShot(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response, std::function<void(::grpc::Status)>) override;
      void GetScreenShotStream(::grpc::ClientContext* context, ::algorithm::v2::ScreenshotInfo* request, ::grpc::experimental::ClientReadReactor< ::algorithm::v2::ScreenFrame>* reactor) override;
      void RunAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void RestartAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StopAlgorithm(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void GetAlgorithmParameters(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response, std::function<void(::grpc::Status)>) override;
      void ListAlgorithms(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response, std::function<void(::grpc::Status)>) override;
      void SetSystemFeature(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response, std::function<void(::grpc::Status)>) override;
      void GetAlarm(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::algorithm::v2::AlarmReqInfo,::algorithm::v2::Alarms>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::ScreenFrame>* AsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::ScreenFrame>* PrepareAsyncGetScreenShotRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::algorithm::v2::ScreenFrame>* GetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request) override;
    ::grpc::ClientAsyncReader< ::algorithm::v2::ScreenFrame>* AsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::algorithm::v2::ScreenFrame>* PrepareAsyncGetScreenShotStreamRaw(::grpc::ClientContext* context, const ::algorithm::v2::ScreenshotInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRunAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRestartAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRestartAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncStopAlgorithmRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmParameters>* AsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmParameters>* PrepareAsyncGetAlgorithmParametersRaw(::grpc::ClientContext* context, const ::algorithm::v2::AlgorithmHead& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmListResponse>* AsyncListAlgorithmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::AlgorithmListResponse>* PrepareAsyncListAlgorithmsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>* AsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>* PrepareAsyncGetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>* AsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::algorithm::v2::SystemFeature>* PrepareAsyncSetSystemFeatureRaw(::grpc::ClientContext* context, const ::algorithm::v2::SystemFeature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* GetAlarmRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* AsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* PrepareAsyncGetAlarmRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetScreenShot_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScreenShotStream_;
    const ::grpc::internal::RpcMethod rpcmethod_RunAlgorithm_;
    const ::grpc::internal::RpcMethod rpcmethod_RestartAlgorithm_;
    const ::grpc::internal::RpcMethod rpcmethod_StopAlgorithm_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAlgorithmParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAlgorithmParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAlgorithms_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSystemFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSystemFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAlarm_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response);
    virtual ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerWriter< ::algorithm::v2::ScreenFrame>* writer);
    virtual ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response);
    virtual ::grpc::Status ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response);
    virtual ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response);
    virtual ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response);
    virtual ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::algorithm::v2::Alarms, ::algorithm::v2::AlarmReqInfo>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetScreenShot() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScreenShot(::grpc::ServerContext* context, ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerAsyncResponseWriter< ::algorithm::v2::ScreenFrame>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetScreenShotStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerWriter< ::algorithm::v2::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScreenShotStream(::grpc::ServerContext* context, ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerAsyncWriter< ::algorithm::v2::ScreenFrame>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RunAlgorithm() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunAlgorithm(::grpc::ServerContext* context, ::algorithm::v2::AlgorithmHead* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestartAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RestartAlgorithm() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RestartAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartAlgorithm(::grpc::ServerContext* context, ::algorithm::v2::AlgorithmHead* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopAlgorithm() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopAlgorithm(::grpc::ServerContext* context, ::algorithm::v2::AlgorithmHead* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetAlgorithmParameters() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAlgorithmParameters(::grpc::ServerContext* context, ::algorithm::v2::AlgorithmParametersSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAlgorithmParameters() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlgorithmParameters(::grpc::ServerContext* context, ::algorithm::v2::AlgorithmHead* request, ::grpc::ServerAsyncResponseWriter< ::algorithm::v2::AlgorithmParameters>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAlgorithms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListAlgorithms() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListAlgorithms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAlgorithms(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::algorithm::v2::AlgorithmListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSystemFeature() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSystemFeature(::grpc::ServerContext* context, ::algorithm::v2::SystemFeature* request, ::grpc::ServerAsyncResponseWriter< ::algorithm::v2::SystemFeature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetSystemFeature() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSystemFeature(::grpc::ServerContext* context, ::algorithm::v2::SystemFeature* request, ::grpc::ServerAsyncResponseWriter< ::algorithm::v2::SystemFeature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAlarm() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::algorithm::v2::Alarms, ::algorithm::v2::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlarm(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::algorithm::v2::Alarms, ::algorithm::v2::AlarmReqInfo>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(10, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetScreenShot<WithAsyncMethod_GetScreenShotStream<WithAsyncMethod_RunAlgorithm<WithAsyncMethod_RestartAlgorithm<WithAsyncMethod_StopAlgorithm<WithAsyncMethod_SetAlgorithmParameters<WithAsyncMethod_GetAlgorithmParameters<WithAsyncMethod_ListAlgorithms<WithAsyncMethod_GetSystemFeature<WithAsyncMethod_SetSystemFeature<WithAsyncMethod_GetAlarm<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetScreenShot() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::algorithm::v2::ScreenshotInfo, ::algorithm::v2::ScreenFrame>(
          [this](::grpc::ServerContext* context,
                 const ::algorithm::v2::ScreenshotInfo* request,
                 ::algorithm::v2::ScreenFrame* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetScreenShot(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetScreenShotStream() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::algorithm::v2::ScreenshotInfo, ::algorithm::v2::ScreenFrame>(
          [this] { return this->GetScreenShotStream(); }));
    }
    ~ExperimentalWithCallbackMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerWriter< ::algorithm::v2::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::algorithm::v2::ScreenshotInfo, ::algorithm::v2::ScreenFrame>* GetScreenShotStream() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::algorithm::v2::ScreenshotInfo, ::algorithm::v2::ScreenFrame>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RunAlgorithm() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::algorithm::v2::AlgorithmHead* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RunAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RestartAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RestartAlgorithm() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::algorithm::v2::AlgorithmHead* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RestartAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RestartAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StopAlgorithm() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::algorithm::v2::AlgorithmHead* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StopAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetAlgorithmParameters() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::algorithm::v2::AlgorithmParametersSetRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::algorithm::v2::AlgorithmParametersSetRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetAlgorithmParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAlgorithmParameters() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::algorithm::v2::AlgorithmHead, ::algorithm::v2::AlgorithmParameters>(
          [this](::grpc::ServerContext* context,
                 const ::algorithm::v2::AlgorithmHead* request,
                 ::algorithm::v2::AlgorithmParameters* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAlgorithmParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListAlgorithms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListAlgorithms() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::algorithm::v2::AlgorithmListResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::algorithm::v2::AlgorithmListResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListAlgorithms(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ListAlgorithms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetSystemFeature() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::algorithm::v2::SystemFeature, ::algorithm::v2::SystemFeature>(
          [this](::grpc::ServerContext* context,
                 const ::algorithm::v2::SystemFeature* request,
                 ::algorithm::v2::SystemFeature* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSystemFeature(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetSystemFeature() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::algorithm::v2::SystemFeature, ::algorithm::v2::SystemFeature>(
          [this](::grpc::ServerContext* context,
                 const ::algorithm::v2::SystemFeature* request,
                 ::algorithm::v2::SystemFeature* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetSystemFeature(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAlarm() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackBidiHandler< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>(
          [this] { return this->GetAlarm(); }));
    }
    ~ExperimentalWithCallbackMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::algorithm::v2::Alarms, ::algorithm::v2::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>* GetAlarm() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::algorithm::v2::AlarmReqInfo, ::algorithm::v2::Alarms>;}
  };
  typedef ExperimentalWithCallbackMethod_GetScreenShot<ExperimentalWithCallbackMethod_GetScreenShotStream<ExperimentalWithCallbackMethod_RunAlgorithm<ExperimentalWithCallbackMethod_RestartAlgorithm<ExperimentalWithCallbackMethod_StopAlgorithm<ExperimentalWithCallbackMethod_SetAlgorithmParameters<ExperimentalWithCallbackMethod_GetAlgorithmParameters<ExperimentalWithCallbackMethod_ListAlgorithms<ExperimentalWithCallbackMethod_GetSystemFeature<ExperimentalWithCallbackMethod_SetSystemFeature<ExperimentalWithCallbackMethod_GetAlarm<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetScreenShot() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetScreenShotStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerWriter< ::algorithm::v2::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RunAlgorithm() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestartAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RestartAlgorithm() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RestartAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopAlgorithm() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetAlgorithmParameters() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAlgorithmParameters() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAlgorithms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListAlgorithms() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListAlgorithms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSystemFeature() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetSystemFeature() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAlarm() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::algorithm::v2::Alarms, ::algorithm::v2::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetScreenShot() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScreenShot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetScreenShotStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerWriter< ::algorithm::v2::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScreenShotStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RunAlgorithm() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunAlgorithm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestartAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RestartAlgorithm() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RestartAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartAlgorithm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StopAlgorithm() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopAlgorithm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetAlgorithmParameters() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAlgorithmParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAlgorithmParameters() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlgorithmParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAlgorithms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListAlgorithms() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListAlgorithms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAlgorithms(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSystemFeature() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSystemFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetSystemFeature() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSystemFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAlarm() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::algorithm::v2::Alarms, ::algorithm::v2::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlarm(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(10, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetScreenShot() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetScreenShot(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetScreenShot(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetScreenShotStream() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetScreenShotStream(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerWriter< ::algorithm::v2::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetScreenShotStream() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RunAlgorithm() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RunAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RunAlgorithm(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RestartAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RestartAlgorithm() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RestartAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RestartAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RestartAlgorithm(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StopAlgorithm() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StopAlgorithm(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopAlgorithm(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetAlgorithmParameters() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetAlgorithmParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetAlgorithmParameters(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAlgorithmParameters() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAlgorithmParameters(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAlgorithmParameters(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListAlgorithms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListAlgorithms() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListAlgorithms(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListAlgorithms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListAlgorithms(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSystemFeature() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSystemFeature(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSystemFeature(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetSystemFeature() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetSystemFeature(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetSystemFeature(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAlarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAlarm() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetAlarm(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAlarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlarm(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::algorithm::v2::Alarms, ::algorithm::v2::AlarmReqInfo>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetAlarm() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetScreenShot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetScreenShot() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::algorithm::v2::ScreenshotInfo, ::algorithm::v2::ScreenFrame>(std::bind(&WithStreamedUnaryMethod_GetScreenShot<BaseClass>::StreamedGetScreenShot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetScreenShot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScreenShot(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::algorithm::v2::ScreenFrame* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetScreenShot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::v2::ScreenshotInfo,::algorithm::v2::ScreenFrame>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RunAlgorithm() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_RunAlgorithm<BaseClass>::StreamedRunAlgorithm, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RunAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunAlgorithm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::v2::AlgorithmHead,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestartAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RestartAlgorithm() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_RestartAlgorithm<BaseClass>::StreamedRestartAlgorithm, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RestartAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestartAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestartAlgorithm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::v2::AlgorithmHead,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopAlgorithm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopAlgorithm() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::algorithm::v2::AlgorithmHead, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_StopAlgorithm<BaseClass>::StreamedStopAlgorithm, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopAlgorithm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopAlgorithm(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopAlgorithm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::v2::AlgorithmHead,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetAlgorithmParameters() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::algorithm::v2::AlgorithmParametersSetRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_SetAlgorithmParameters<BaseClass>::StreamedSetAlgorithmParameters, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmParametersSetRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAlgorithmParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::v2::AlgorithmParametersSetRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAlgorithmParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAlgorithmParameters() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::algorithm::v2::AlgorithmHead, ::algorithm::v2::AlgorithmParameters>(std::bind(&WithStreamedUnaryMethod_GetAlgorithmParameters<BaseClass>::StreamedGetAlgorithmParameters, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAlgorithmParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAlgorithmParameters(::grpc::ServerContext* context, const ::algorithm::v2::AlgorithmHead* request, ::algorithm::v2::AlgorithmParameters* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAlgorithmParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::v2::AlgorithmHead,::algorithm::v2::AlgorithmParameters>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAlgorithms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListAlgorithms() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::algorithm::v2::AlgorithmListResponse>(std::bind(&WithStreamedUnaryMethod_ListAlgorithms<BaseClass>::StreamedListAlgorithms, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListAlgorithms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAlgorithms(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::algorithm::v2::AlgorithmListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAlgorithms(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::algorithm::v2::AlgorithmListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSystemFeature() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::algorithm::v2::SystemFeature, ::algorithm::v2::SystemFeature>(std::bind(&WithStreamedUnaryMethod_GetSystemFeature<BaseClass>::StreamedGetSystemFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSystemFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::v2::SystemFeature,::algorithm::v2::SystemFeature>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSystemFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetSystemFeature() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::algorithm::v2::SystemFeature, ::algorithm::v2::SystemFeature>(std::bind(&WithStreamedUnaryMethod_SetSystemFeature<BaseClass>::StreamedSetSystemFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetSystemFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSystemFeature(::grpc::ServerContext* context, const ::algorithm::v2::SystemFeature* request, ::algorithm::v2::SystemFeature* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSystemFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::algorithm::v2::SystemFeature,::algorithm::v2::SystemFeature>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetScreenShot<WithStreamedUnaryMethod_RunAlgorithm<WithStreamedUnaryMethod_RestartAlgorithm<WithStreamedUnaryMethod_StopAlgorithm<WithStreamedUnaryMethod_SetAlgorithmParameters<WithStreamedUnaryMethod_GetAlgorithmParameters<WithStreamedUnaryMethod_ListAlgorithms<WithStreamedUnaryMethod_GetSystemFeature<WithStreamedUnaryMethod_SetSystemFeature<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetScreenShotStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetScreenShotStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::algorithm::v2::ScreenshotInfo, ::algorithm::v2::ScreenFrame>(std::bind(&WithSplitStreamingMethod_GetScreenShotStream<BaseClass>::StreamedGetScreenShotStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetScreenShotStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScreenShotStream(::grpc::ServerContext* context, const ::algorithm::v2::ScreenshotInfo* request, ::grpc::ServerWriter< ::algorithm::v2::ScreenFrame>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetScreenShotStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::algorithm::v2::ScreenshotInfo,::algorithm::v2::ScreenFrame>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetScreenShotStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetScreenShot<WithSplitStreamingMethod_GetScreenShotStream<WithStreamedUnaryMethod_RunAlgorithm<WithStreamedUnaryMethod_RestartAlgorithm<WithStreamedUnaryMethod_StopAlgorithm<WithStreamedUnaryMethod_SetAlgorithmParameters<WithStreamedUnaryMethod_GetAlgorithmParameters<WithStreamedUnaryMethod_ListAlgorithms<WithStreamedUnaryMethod_GetSystemFeature<WithStreamedUnaryMethod_SetSystemFeature<Service > > > > > > > > > > StreamedService;
};

}  // namespace v2
}  // namespace algorithm


#endif  // GRPC_AlgorithmCommunicationV2_2eproto__INCLUDED
