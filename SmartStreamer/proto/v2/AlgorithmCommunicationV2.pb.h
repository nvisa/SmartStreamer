// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AlgorithmCommunicationV2.proto

#ifndef PROTOBUF_INCLUDED_AlgorithmCommunicationV2_2eproto
#define PROTOBUF_INCLUDED_AlgorithmCommunicationV2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AlgorithmCommunicationV2_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_AlgorithmCommunicationV2_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_AlgorithmCommunicationV2_2eproto();
namespace algorithm {
namespace v2 {
class Alarm;
class AlarmDefaultTypeInternal;
extern AlarmDefaultTypeInternal _Alarm_default_instance_;
class AlarmReqAdvancedParameters;
class AlarmReqAdvancedParametersDefaultTypeInternal;
extern AlarmReqAdvancedParametersDefaultTypeInternal _AlarmReqAdvancedParameters_default_instance_;
class AlarmReqInfo;
class AlarmReqInfoDefaultTypeInternal;
extern AlarmReqInfoDefaultTypeInternal _AlarmReqInfo_default_instance_;
class Alarms;
class AlarmsDefaultTypeInternal;
extern AlarmsDefaultTypeInternal _Alarms_default_instance_;
class AlgorithmHead;
class AlgorithmHeadDefaultTypeInternal;
extern AlgorithmHeadDefaultTypeInternal _AlgorithmHead_default_instance_;
class AlgorithmInformation;
class AlgorithmInformationDefaultTypeInternal;
extern AlgorithmInformationDefaultTypeInternal _AlgorithmInformation_default_instance_;
class AlgorithmListResponse;
class AlgorithmListResponseDefaultTypeInternal;
extern AlgorithmListResponseDefaultTypeInternal _AlgorithmListResponse_default_instance_;
class AlgorithmParameters;
class AlgorithmParametersDefaultTypeInternal;
extern AlgorithmParametersDefaultTypeInternal _AlgorithmParameters_default_instance_;
class AlgorithmParametersSetRequest;
class AlgorithmParametersSetRequestDefaultTypeInternal;
extern AlgorithmParametersSetRequestDefaultTypeInternal _AlgorithmParametersSetRequest_default_instance_;
class AlgorithmStatus;
class AlgorithmStatusDefaultTypeInternal;
extern AlgorithmStatusDefaultTypeInternal _AlgorithmStatus_default_instance_;
class DetectedObject;
class DetectedObjectDefaultTypeInternal;
extern DetectedObjectDefaultTypeInternal _DetectedObject_default_instance_;
class FaceDetectionParameters;
class FaceDetectionParametersDefaultTypeInternal;
extern FaceDetectionParametersDefaultTypeInternal _FaceDetectionParameters_default_instance_;
class FeatureCustom;
class FeatureCustomDefaultTypeInternal;
extern FeatureCustomDefaultTypeInternal _FeatureCustom_default_instance_;
class FeatureIPVideoSource;
class FeatureIPVideoSourceDefaultTypeInternal;
extern FeatureIPVideoSourceDefaultTypeInternal _FeatureIPVideoSource_default_instance_;
class LineCrossRegion;
class LineCrossRegionDefaultTypeInternal;
extern LineCrossRegionDefaultTypeInternal _LineCrossRegion_default_instance_;
class LocationInformation;
class LocationInformationDefaultTypeInternal;
extern LocationInformationDefaultTypeInternal _LocationInformation_default_instance_;
class PanChangeAlgorithmParameters;
class PanChangeAlgorithmParametersDefaultTypeInternal;
extern PanChangeAlgorithmParametersDefaultTypeInternal _PanChangeAlgorithmParameters_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class PrivacyMaskingParameters;
class PrivacyMaskingParametersDefaultTypeInternal;
extern PrivacyMaskingParametersDefaultTypeInternal _PrivacyMaskingParameters_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class ScreenFrame;
class ScreenFrameDefaultTypeInternal;
extern ScreenFrameDefaultTypeInternal _ScreenFrame_default_instance_;
class ScreenshotInfo;
class ScreenshotInfoDefaultTypeInternal;
extern ScreenshotInfoDefaultTypeInternal _ScreenshotInfo_default_instance_;
class SmartMotionAlgorithmParameters;
class SmartMotionAlgorithmParametersDefaultTypeInternal;
extern SmartMotionAlgorithmParametersDefaultTypeInternal _SmartMotionAlgorithmParameters_default_instance_;
class SmartMotionRegion;
class SmartMotionRegionDefaultTypeInternal;
extern SmartMotionRegionDefaultTypeInternal _SmartMotionRegion_default_instance_;
class SystemFeature;
class SystemFeatureDefaultTypeInternal;
extern SystemFeatureDefaultTypeInternal _SystemFeature_default_instance_;
}  // namespace v2
}  // namespace algorithm
namespace google {
namespace protobuf {
template<> ::algorithm::v2::Alarm* Arena::CreateMaybeMessage<::algorithm::v2::Alarm>(Arena*);
template<> ::algorithm::v2::AlarmReqAdvancedParameters* Arena::CreateMaybeMessage<::algorithm::v2::AlarmReqAdvancedParameters>(Arena*);
template<> ::algorithm::v2::AlarmReqInfo* Arena::CreateMaybeMessage<::algorithm::v2::AlarmReqInfo>(Arena*);
template<> ::algorithm::v2::Alarms* Arena::CreateMaybeMessage<::algorithm::v2::Alarms>(Arena*);
template<> ::algorithm::v2::AlgorithmHead* Arena::CreateMaybeMessage<::algorithm::v2::AlgorithmHead>(Arena*);
template<> ::algorithm::v2::AlgorithmInformation* Arena::CreateMaybeMessage<::algorithm::v2::AlgorithmInformation>(Arena*);
template<> ::algorithm::v2::AlgorithmListResponse* Arena::CreateMaybeMessage<::algorithm::v2::AlgorithmListResponse>(Arena*);
template<> ::algorithm::v2::AlgorithmParameters* Arena::CreateMaybeMessage<::algorithm::v2::AlgorithmParameters>(Arena*);
template<> ::algorithm::v2::AlgorithmParametersSetRequest* Arena::CreateMaybeMessage<::algorithm::v2::AlgorithmParametersSetRequest>(Arena*);
template<> ::algorithm::v2::AlgorithmStatus* Arena::CreateMaybeMessage<::algorithm::v2::AlgorithmStatus>(Arena*);
template<> ::algorithm::v2::DetectedObject* Arena::CreateMaybeMessage<::algorithm::v2::DetectedObject>(Arena*);
template<> ::algorithm::v2::FaceDetectionParameters* Arena::CreateMaybeMessage<::algorithm::v2::FaceDetectionParameters>(Arena*);
template<> ::algorithm::v2::FeatureCustom* Arena::CreateMaybeMessage<::algorithm::v2::FeatureCustom>(Arena*);
template<> ::algorithm::v2::FeatureIPVideoSource* Arena::CreateMaybeMessage<::algorithm::v2::FeatureIPVideoSource>(Arena*);
template<> ::algorithm::v2::LineCrossRegion* Arena::CreateMaybeMessage<::algorithm::v2::LineCrossRegion>(Arena*);
template<> ::algorithm::v2::LocationInformation* Arena::CreateMaybeMessage<::algorithm::v2::LocationInformation>(Arena*);
template<> ::algorithm::v2::PanChangeAlgorithmParameters* Arena::CreateMaybeMessage<::algorithm::v2::PanChangeAlgorithmParameters>(Arena*);
template<> ::algorithm::v2::Point* Arena::CreateMaybeMessage<::algorithm::v2::Point>(Arena*);
template<> ::algorithm::v2::PrivacyMaskingParameters* Arena::CreateMaybeMessage<::algorithm::v2::PrivacyMaskingParameters>(Arena*);
template<> ::algorithm::v2::Rectangle* Arena::CreateMaybeMessage<::algorithm::v2::Rectangle>(Arena*);
template<> ::algorithm::v2::ScreenFrame* Arena::CreateMaybeMessage<::algorithm::v2::ScreenFrame>(Arena*);
template<> ::algorithm::v2::ScreenshotInfo* Arena::CreateMaybeMessage<::algorithm::v2::ScreenshotInfo>(Arena*);
template<> ::algorithm::v2::SmartMotionAlgorithmParameters* Arena::CreateMaybeMessage<::algorithm::v2::SmartMotionAlgorithmParameters>(Arena*);
template<> ::algorithm::v2::SmartMotionRegion* Arena::CreateMaybeMessage<::algorithm::v2::SmartMotionRegion>(Arena*);
template<> ::algorithm::v2::SystemFeature* Arena::CreateMaybeMessage<::algorithm::v2::SystemFeature>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace algorithm {
namespace v2 {

enum DetectedObject_ObjectType {
  DetectedObject_ObjectType_HUMAN = 0,
  DetectedObject_ObjectType_VEHICLE = 1,
  DetectedObject_ObjectType_OTHERS = 2,
  DetectedObject_ObjectType_DetectedObject_ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DetectedObject_ObjectType_DetectedObject_ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DetectedObject_ObjectType_IsValid(int value);
const DetectedObject_ObjectType DetectedObject_ObjectType_ObjectType_MIN = DetectedObject_ObjectType_HUMAN;
const DetectedObject_ObjectType DetectedObject_ObjectType_ObjectType_MAX = DetectedObject_ObjectType_OTHERS;
const int DetectedObject_ObjectType_ObjectType_ARRAYSIZE = DetectedObject_ObjectType_ObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectedObject_ObjectType_descriptor();
inline const ::std::string& DetectedObject_ObjectType_Name(DetectedObject_ObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectedObject_ObjectType_descriptor(), value);
}
inline bool DetectedObject_ObjectType_Parse(
    const ::std::string& name, DetectedObject_ObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectedObject_ObjectType>(
    DetectedObject_ObjectType_descriptor(), name, value);
}
enum DetectedObject_EventType {
  DetectedObject_EventType_NONE = 0,
  DetectedObject_EventType_ROI_ENTER = 1,
  DetectedObject_EventType_LINE_CROSS = 2,
  DetectedObject_EventType_WANDERING = 3,
  DetectedObject_EventType_LEFT_OBJECT = 4,
  DetectedObject_EventType_STANDING = 5,
  DetectedObject_EventType_ROI_LEAVE = 6,
  DetectedObject_EventType_ROI_WAIT = 7,
  DetectedObject_EventType_STOLEN_OBJECT = 8,
  DetectedObject_EventType_DetectedObject_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DetectedObject_EventType_DetectedObject_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DetectedObject_EventType_IsValid(int value);
const DetectedObject_EventType DetectedObject_EventType_EventType_MIN = DetectedObject_EventType_NONE;
const DetectedObject_EventType DetectedObject_EventType_EventType_MAX = DetectedObject_EventType_STOLEN_OBJECT;
const int DetectedObject_EventType_EventType_ARRAYSIZE = DetectedObject_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectedObject_EventType_descriptor();
inline const ::std::string& DetectedObject_EventType_Name(DetectedObject_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectedObject_EventType_descriptor(), value);
}
inline bool DetectedObject_EventType_Parse(
    const ::std::string& name, DetectedObject_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectedObject_EventType>(
    DetectedObject_EventType_descriptor(), name, value);
}
enum DetectedObject_ObjectColor {
  DetectedObject_ObjectColor_DARK = 0,
  DetectedObject_ObjectColor_GRAY = 1,
  DetectedObject_ObjectColor_LIGHT = 2,
  DetectedObject_ObjectColor_RED = 3,
  DetectedObject_ObjectColor_YELLOW = 4,
  DetectedObject_ObjectColor_GREEN = 5,
  DetectedObject_ObjectColor_CYAN = 6,
  DetectedObject_ObjectColor_BLUE = 7,
  DetectedObject_ObjectColor_MAGENTA = 8,
  DetectedObject_ObjectColor_DetectedObject_ObjectColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DetectedObject_ObjectColor_DetectedObject_ObjectColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DetectedObject_ObjectColor_IsValid(int value);
const DetectedObject_ObjectColor DetectedObject_ObjectColor_ObjectColor_MIN = DetectedObject_ObjectColor_DARK;
const DetectedObject_ObjectColor DetectedObject_ObjectColor_ObjectColor_MAX = DetectedObject_ObjectColor_MAGENTA;
const int DetectedObject_ObjectColor_ObjectColor_ARRAYSIZE = DetectedObject_ObjectColor_ObjectColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectedObject_ObjectColor_descriptor();
inline const ::std::string& DetectedObject_ObjectColor_Name(DetectedObject_ObjectColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectedObject_ObjectColor_descriptor(), value);
}
inline bool DetectedObject_ObjectColor_Parse(
    const ::std::string& name, DetectedObject_ObjectColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectedObject_ObjectColor>(
    DetectedObject_ObjectColor_descriptor(), name, value);
}
enum FeatureIPVideoSource_Transport {
  FeatureIPVideoSource_Transport_UDP = 0,
  FeatureIPVideoSource_Transport_TCP = 1,
  FeatureIPVideoSource_Transport_FeatureIPVideoSource_Transport_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  FeatureIPVideoSource_Transport_FeatureIPVideoSource_Transport_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool FeatureIPVideoSource_Transport_IsValid(int value);
const FeatureIPVideoSource_Transport FeatureIPVideoSource_Transport_Transport_MIN = FeatureIPVideoSource_Transport_UDP;
const FeatureIPVideoSource_Transport FeatureIPVideoSource_Transport_Transport_MAX = FeatureIPVideoSource_Transport_TCP;
const int FeatureIPVideoSource_Transport_Transport_ARRAYSIZE = FeatureIPVideoSource_Transport_Transport_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeatureIPVideoSource_Transport_descriptor();
inline const ::std::string& FeatureIPVideoSource_Transport_Name(FeatureIPVideoSource_Transport value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeatureIPVideoSource_Transport_descriptor(), value);
}
inline bool FeatureIPVideoSource_Transport_Parse(
    const ::std::string& name, FeatureIPVideoSource_Transport* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeatureIPVideoSource_Transport>(
    FeatureIPVideoSource_Transport_descriptor(), name, value);
}
enum MotionDirection {
  RIGHT = 0,
  DOWN_RIGHT = 1,
  DOWN = 2,
  DOWN_LEFT = 3,
  LEFT = 4,
  UP_LEFT = 5,
  UP = 6,
  UP_RIGHT = 7,
  STOP = 8,
  MotionDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  MotionDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool MotionDirection_IsValid(int value);
const MotionDirection MotionDirection_MIN = RIGHT;
const MotionDirection MotionDirection_MAX = STOP;
const int MotionDirection_ARRAYSIZE = MotionDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotionDirection_descriptor();
inline const ::std::string& MotionDirection_Name(MotionDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotionDirection_descriptor(), value);
}
inline bool MotionDirection_Parse(
    const ::std::string& name, MotionDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotionDirection>(
    MotionDirection_descriptor(), name, value);
}
enum PreProcessing {
  NONE = 0,
  CONTRAST_ENHANCEMENT = 1,
  DEHAZING = 2,
  PreProcessing_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PreProcessing_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PreProcessing_IsValid(int value);
const PreProcessing PreProcessing_MIN = NONE;
const PreProcessing PreProcessing_MAX = DEHAZING;
const int PreProcessing_ARRAYSIZE = PreProcessing_MAX + 1;

const ::google::protobuf::EnumDescriptor* PreProcessing_descriptor();
inline const ::std::string& PreProcessing_Name(PreProcessing value) {
  return ::google::protobuf::internal::NameOfEnum(
    PreProcessing_descriptor(), value);
}
inline bool PreProcessing_Parse(
    const ::std::string& name, PreProcessing* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PreProcessing>(
    PreProcessing_descriptor(), name, value);
}
enum RunMode {
  AUTO_TRACK = 0,
  SEMI_AUTO_TRACK = 1,
  MANUEL_TRACK = 2,
  SMART_MOTION = 3,
  BYPASS = 4,
  RunMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RunMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RunMode_IsValid(int value);
const RunMode RunMode_MIN = AUTO_TRACK;
const RunMode RunMode_MAX = BYPASS;
const int RunMode_ARRAYSIZE = RunMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RunMode_descriptor();
inline const ::std::string& RunMode_Name(RunMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RunMode_descriptor(), value);
}
inline bool RunMode_Parse(
    const ::std::string& name, RunMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RunMode>(
    RunMode_descriptor(), name, value);
}
// ===================================================================

class AlgorithmHead final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.AlgorithmHead) */ {
 public:
  AlgorithmHead();
  virtual ~AlgorithmHead();

  AlgorithmHead(const AlgorithmHead& from);

  inline AlgorithmHead& operator=(const AlgorithmHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmHead(AlgorithmHead&& from) noexcept
    : AlgorithmHead() {
    *this = ::std::move(from);
  }

  inline AlgorithmHead& operator=(AlgorithmHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmHead& default_instance();

  enum HeadSelectionCase {
    kPtzHead = 1,
    kAlgorithmIndex = 2,
    kAlgorithmNode = 3,
    HEAD_SELECTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmHead* internal_default_instance() {
    return reinterpret_cast<const AlgorithmHead*>(
               &_AlgorithmHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AlgorithmHead* other);
  friend void swap(AlgorithmHead& a, AlgorithmHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmHead* New() const final {
    return CreateMaybeMessage<AlgorithmHead>(nullptr);
  }

  AlgorithmHead* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmHead>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmHead& from);
  void MergeFrom(const AlgorithmHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string friendly_name = 4;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 4;
  const ::std::string& friendly_name() const;
  void set_friendly_name(const ::std::string& value);
  #if LANG_CXX11
  void set_friendly_name(::std::string&& value);
  #endif
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  ::std::string* mutable_friendly_name();
  ::std::string* release_friendly_name();
  void set_allocated_friendly_name(::std::string* friendly_name);

  // int32 ptz_head = 1;
  private:
  bool has_ptz_head() const;
  public:
  void clear_ptz_head();
  static const int kPtzHeadFieldNumber = 1;
  ::google::protobuf::int32 ptz_head() const;
  void set_ptz_head(::google::protobuf::int32 value);

  // int32 algorithm_index = 2;
  private:
  bool has_algorithm_index() const;
  public:
  void clear_algorithm_index();
  static const int kAlgorithmIndexFieldNumber = 2;
  ::google::protobuf::int32 algorithm_index() const;
  void set_algorithm_index(::google::protobuf::int32 value);

  // string algorithm_node = 3;
  private:
  bool has_algorithm_node() const;
  public:
  void clear_algorithm_node();
  static const int kAlgorithmNodeFieldNumber = 3;
  const ::std::string& algorithm_node() const;
  void set_algorithm_node(const ::std::string& value);
  #if LANG_CXX11
  void set_algorithm_node(::std::string&& value);
  #endif
  void set_algorithm_node(const char* value);
  void set_algorithm_node(const char* value, size_t size);
  ::std::string* mutable_algorithm_node();
  ::std::string* release_algorithm_node();
  void set_allocated_algorithm_node(::std::string* algorithm_node);

  void clear_head_selection();
  HeadSelectionCase head_selection_case() const;
  // @@protoc_insertion_point(class_scope:algorithm.v2.AlgorithmHead)
 private:
  class HasBitSetters;
  void set_has_ptz_head();
  void set_has_algorithm_index();
  void set_has_algorithm_node();

  inline bool has_head_selection() const;
  inline void clear_has_head_selection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr friendly_name_;
  union HeadSelectionUnion {
    HeadSelectionUnion() {}
    ::google::protobuf::int32 ptz_head_;
    ::google::protobuf::int32 algorithm_index_;
    ::google::protobuf::internal::ArenaStringPtr algorithm_node_;
  } head_selection_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.AlgorithmStatus) */ {
 public:
  AlgorithmStatus();
  virtual ~AlgorithmStatus();

  AlgorithmStatus(const AlgorithmStatus& from);

  inline AlgorithmStatus& operator=(const AlgorithmStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmStatus(AlgorithmStatus&& from) noexcept
    : AlgorithmStatus() {
    *this = ::std::move(from);
  }

  inline AlgorithmStatus& operator=(AlgorithmStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmStatus* internal_default_instance() {
    return reinterpret_cast<const AlgorithmStatus*>(
               &_AlgorithmStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AlgorithmStatus* other);
  friend void swap(AlgorithmStatus& a, AlgorithmStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmStatus* New() const final {
    return CreateMaybeMessage<AlgorithmStatus>(nullptr);
  }

  AlgorithmStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmStatus& from);
  void MergeFrom(const AlgorithmStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_running = 1;
  void clear_is_running();
  static const int kIsRunningFieldNumber = 1;
  bool is_running() const;
  void set_is_running(bool value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.AlgorithmStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_running_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmInformation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.AlgorithmInformation) */ {
 public:
  AlgorithmInformation();
  virtual ~AlgorithmInformation();

  AlgorithmInformation(const AlgorithmInformation& from);

  inline AlgorithmInformation& operator=(const AlgorithmInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmInformation(AlgorithmInformation&& from) noexcept
    : AlgorithmInformation() {
    *this = ::std::move(from);
  }

  inline AlgorithmInformation& operator=(AlgorithmInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmInformation* internal_default_instance() {
    return reinterpret_cast<const AlgorithmInformation*>(
               &_AlgorithmInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AlgorithmInformation* other);
  friend void swap(AlgorithmInformation& a, AlgorithmInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmInformation* New() const final {
    return CreateMaybeMessage<AlgorithmInformation>(nullptr);
  }

  AlgorithmInformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmInformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmInformation& from);
  void MergeFrom(const AlgorithmInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .algorithm.v2.AlgorithmHead head_info = 1;
  bool has_head_info() const;
  void clear_head_info();
  static const int kHeadInfoFieldNumber = 1;
  const ::algorithm::v2::AlgorithmHead& head_info() const;
  ::algorithm::v2::AlgorithmHead* release_head_info();
  ::algorithm::v2::AlgorithmHead* mutable_head_info();
  void set_allocated_head_info(::algorithm::v2::AlgorithmHead* head_info);

  // .algorithm.v2.AlgorithmStatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::algorithm::v2::AlgorithmStatus& status() const;
  ::algorithm::v2::AlgorithmStatus* release_status();
  ::algorithm::v2::AlgorithmStatus* mutable_status();
  void set_allocated_status(::algorithm::v2::AlgorithmStatus* status);

  // @@protoc_insertion_point(class_scope:algorithm.v2.AlgorithmInformation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::algorithm::v2::AlgorithmHead* head_info_;
  ::algorithm::v2::AlgorithmStatus* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.AlgorithmListResponse) */ {
 public:
  AlgorithmListResponse();
  virtual ~AlgorithmListResponse();

  AlgorithmListResponse(const AlgorithmListResponse& from);

  inline AlgorithmListResponse& operator=(const AlgorithmListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmListResponse(AlgorithmListResponse&& from) noexcept
    : AlgorithmListResponse() {
    *this = ::std::move(from);
  }

  inline AlgorithmListResponse& operator=(AlgorithmListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmListResponse* internal_default_instance() {
    return reinterpret_cast<const AlgorithmListResponse*>(
               &_AlgorithmListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AlgorithmListResponse* other);
  friend void swap(AlgorithmListResponse& a, AlgorithmListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmListResponse* New() const final {
    return CreateMaybeMessage<AlgorithmListResponse>(nullptr);
  }

  AlgorithmListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmListResponse& from);
  void MergeFrom(const AlgorithmListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .algorithm.v2.AlgorithmInformation algorithms = 1;
  int algorithms_size() const;
  void clear_algorithms();
  static const int kAlgorithmsFieldNumber = 1;
  ::algorithm::v2::AlgorithmInformation* mutable_algorithms(int index);
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::AlgorithmInformation >*
      mutable_algorithms();
  const ::algorithm::v2::AlgorithmInformation& algorithms(int index) const;
  ::algorithm::v2::AlgorithmInformation* add_algorithms();
  const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::AlgorithmInformation >&
      algorithms() const;

  // @@protoc_insertion_point(class_scope:algorithm.v2.AlgorithmListResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::AlgorithmInformation > algorithms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class SmartMotionRegion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.SmartMotionRegion) */ {
 public:
  SmartMotionRegion();
  virtual ~SmartMotionRegion();

  SmartMotionRegion(const SmartMotionRegion& from);

  inline SmartMotionRegion& operator=(const SmartMotionRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmartMotionRegion(SmartMotionRegion&& from) noexcept
    : SmartMotionRegion() {
    *this = ::std::move(from);
  }

  inline SmartMotionRegion& operator=(SmartMotionRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SmartMotionRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartMotionRegion* internal_default_instance() {
    return reinterpret_cast<const SmartMotionRegion*>(
               &_SmartMotionRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SmartMotionRegion* other);
  friend void swap(SmartMotionRegion& a, SmartMotionRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmartMotionRegion* New() const final {
    return CreateMaybeMessage<SmartMotionRegion>(nullptr);
  }

  SmartMotionRegion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SmartMotionRegion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SmartMotionRegion& from);
  void MergeFrom(const SmartMotionRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartMotionRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .algorithm.v2.Point detection_region_point = 1;
  int detection_region_point_size() const;
  void clear_detection_region_point();
  static const int kDetectionRegionPointFieldNumber = 1;
  ::algorithm::v2::Point* mutable_detection_region_point(int index);
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Point >*
      mutable_detection_region_point();
  const ::algorithm::v2::Point& detection_region_point(int index) const;
  ::algorithm::v2::Point* add_detection_region_point();
  const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Point >&
      detection_region_point() const;

  // repeated .algorithm.v2.MotionDirection motion_direction = 5;
  int motion_direction_size() const;
  void clear_motion_direction();
  static const int kMotionDirectionFieldNumber = 5;
  ::algorithm::v2::MotionDirection motion_direction(int index) const;
  void set_motion_direction(int index, ::algorithm::v2::MotionDirection value);
  void add_motion_direction(::algorithm::v2::MotionDirection value);
  const ::google::protobuf::RepeatedField<int>& motion_direction() const;
  ::google::protobuf::RepeatedField<int>* mutable_motion_direction();

  // int32 wander_time_msecs = 2;
  void clear_wander_time_msecs();
  static const int kWanderTimeMsecsFieldNumber = 2;
  ::google::protobuf::int32 wander_time_msecs() const;
  void set_wander_time_msecs(::google::protobuf::int32 value);

  // int32 stand_time_msecs = 3;
  void clear_stand_time_msecs();
  static const int kStandTimeMsecsFieldNumber = 3;
  ::google::protobuf::int32 stand_time_msecs() const;
  void set_stand_time_msecs(::google::protobuf::int32 value);

  // bool active = 4;
  void clear_active();
  static const int kActiveFieldNumber = 4;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.SmartMotionRegion)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Point > detection_region_point_;
  ::google::protobuf::RepeatedField<int> motion_direction_;
  mutable std::atomic<int> _motion_direction_cached_byte_size_;
  ::google::protobuf::int32 wander_time_msecs_;
  ::google::protobuf::int32 stand_time_msecs_;
  bool active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class SmartMotionAlgorithmParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.SmartMotionAlgorithmParameters) */ {
 public:
  SmartMotionAlgorithmParameters();
  virtual ~SmartMotionAlgorithmParameters();

  SmartMotionAlgorithmParameters(const SmartMotionAlgorithmParameters& from);

  inline SmartMotionAlgorithmParameters& operator=(const SmartMotionAlgorithmParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmartMotionAlgorithmParameters(SmartMotionAlgorithmParameters&& from) noexcept
    : SmartMotionAlgorithmParameters() {
    *this = ::std::move(from);
  }

  inline SmartMotionAlgorithmParameters& operator=(SmartMotionAlgorithmParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SmartMotionAlgorithmParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartMotionAlgorithmParameters* internal_default_instance() {
    return reinterpret_cast<const SmartMotionAlgorithmParameters*>(
               &_SmartMotionAlgorithmParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SmartMotionAlgorithmParameters* other);
  friend void swap(SmartMotionAlgorithmParameters& a, SmartMotionAlgorithmParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmartMotionAlgorithmParameters* New() const final {
    return CreateMaybeMessage<SmartMotionAlgorithmParameters>(nullptr);
  }

  SmartMotionAlgorithmParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SmartMotionAlgorithmParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SmartMotionAlgorithmParameters& from);
  void MergeFrom(const SmartMotionAlgorithmParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartMotionAlgorithmParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .algorithm.v2.SmartMotionRegion regions = 1;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 1;
  ::algorithm::v2::SmartMotionRegion* mutable_regions(int index);
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::SmartMotionRegion >*
      mutable_regions();
  const ::algorithm::v2::SmartMotionRegion& regions(int index) const;
  ::algorithm::v2::SmartMotionRegion* add_regions();
  const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::SmartMotionRegion >&
      regions() const;

  // repeated .algorithm.v2.LineCrossRegion lines = 4;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 4;
  ::algorithm::v2::LineCrossRegion* mutable_lines(int index);
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LineCrossRegion >*
      mutable_lines();
  const ::algorithm::v2::LineCrossRegion& lines(int index) const;
  ::algorithm::v2::LineCrossRegion* add_lines();
  const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LineCrossRegion >&
      lines() const;

  // .algorithm.v2.Rectangle min_region = 2;
  bool has_min_region() const;
  void clear_min_region();
  static const int kMinRegionFieldNumber = 2;
  const ::algorithm::v2::Rectangle& min_region() const;
  ::algorithm::v2::Rectangle* release_min_region();
  ::algorithm::v2::Rectangle* mutable_min_region();
  void set_allocated_min_region(::algorithm::v2::Rectangle* min_region);

  // .algorithm.v2.Rectangle max_region = 3;
  bool has_max_region() const;
  void clear_max_region();
  static const int kMaxRegionFieldNumber = 3;
  const ::algorithm::v2::Rectangle& max_region() const;
  ::algorithm::v2::Rectangle* release_max_region();
  ::algorithm::v2::Rectangle* mutable_max_region();
  void set_allocated_max_region(::algorithm::v2::Rectangle* max_region);

  // .algorithm.v2.Rectangle tracking_object = 5;
  bool has_tracking_object() const;
  void clear_tracking_object();
  static const int kTrackingObjectFieldNumber = 5;
  const ::algorithm::v2::Rectangle& tracking_object() const;
  ::algorithm::v2::Rectangle* release_tracking_object();
  ::algorithm::v2::Rectangle* mutable_tracking_object();
  void set_allocated_tracking_object(::algorithm::v2::Rectangle* tracking_object);

  // @@protoc_insertion_point(class_scope:algorithm.v2.SmartMotionAlgorithmParameters)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::SmartMotionRegion > regions_;
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LineCrossRegion > lines_;
  ::algorithm::v2::Rectangle* min_region_;
  ::algorithm::v2::Rectangle* max_region_;
  ::algorithm::v2::Rectangle* tracking_object_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class LocationInformation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.LocationInformation) */ {
 public:
  LocationInformation();
  virtual ~LocationInformation();

  LocationInformation(const LocationInformation& from);

  inline LocationInformation& operator=(const LocationInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationInformation(LocationInformation&& from) noexcept
    : LocationInformation() {
    *this = ::std::move(from);
  }

  inline LocationInformation& operator=(LocationInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LocationInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationInformation* internal_default_instance() {
    return reinterpret_cast<const LocationInformation*>(
               &_LocationInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LocationInformation* other);
  friend void swap(LocationInformation& a, LocationInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationInformation* New() const final {
    return CreateMaybeMessage<LocationInformation>(nullptr);
  }

  LocationInformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocationInformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocationInformation& from);
  void MergeFrom(const LocationInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float pan = 1;
  void clear_pan();
  static const int kPanFieldNumber = 1;
  float pan() const;
  void set_pan(float value);

  // float tilt = 2;
  void clear_tilt();
  static const int kTiltFieldNumber = 2;
  float tilt() const;
  void set_tilt(float value);

  // float zoom = 3;
  void clear_zoom();
  static const int kZoomFieldNumber = 3;
  float zoom() const;
  void set_zoom(float value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.LocationInformation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float pan_;
  float tilt_;
  float zoom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class PanChangeAlgorithmParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.PanChangeAlgorithmParameters) */ {
 public:
  PanChangeAlgorithmParameters();
  virtual ~PanChangeAlgorithmParameters();

  PanChangeAlgorithmParameters(const PanChangeAlgorithmParameters& from);

  inline PanChangeAlgorithmParameters& operator=(const PanChangeAlgorithmParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PanChangeAlgorithmParameters(PanChangeAlgorithmParameters&& from) noexcept
    : PanChangeAlgorithmParameters() {
    *this = ::std::move(from);
  }

  inline PanChangeAlgorithmParameters& operator=(PanChangeAlgorithmParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PanChangeAlgorithmParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PanChangeAlgorithmParameters* internal_default_instance() {
    return reinterpret_cast<const PanChangeAlgorithmParameters*>(
               &_PanChangeAlgorithmParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PanChangeAlgorithmParameters* other);
  friend void swap(PanChangeAlgorithmParameters& a, PanChangeAlgorithmParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PanChangeAlgorithmParameters* New() const final {
    return CreateMaybeMessage<PanChangeAlgorithmParameters>(nullptr);
  }

  PanChangeAlgorithmParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PanChangeAlgorithmParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PanChangeAlgorithmParameters& from);
  void MergeFrom(const PanChangeAlgorithmParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PanChangeAlgorithmParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .algorithm.v2.LocationInformation locationInformation = 1;
  int locationinformation_size() const;
  void clear_locationinformation();
  static const int kLocationInformationFieldNumber = 1;
  ::algorithm::v2::LocationInformation* mutable_locationinformation(int index);
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LocationInformation >*
      mutable_locationinformation();
  const ::algorithm::v2::LocationInformation& locationinformation(int index) const;
  ::algorithm::v2::LocationInformation* add_locationinformation();
  const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LocationInformation >&
      locationinformation() const;

  // int64 intervalForCirculation = 2;
  void clear_intervalforcirculation();
  static const int kIntervalForCirculationFieldNumber = 2;
  ::google::protobuf::int64 intervalforcirculation() const;
  void set_intervalforcirculation(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.PanChangeAlgorithmParameters)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LocationInformation > locationinformation_;
  ::google::protobuf::int64 intervalforcirculation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class PrivacyMaskingParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.PrivacyMaskingParameters) */ {
 public:
  PrivacyMaskingParameters();
  virtual ~PrivacyMaskingParameters();

  PrivacyMaskingParameters(const PrivacyMaskingParameters& from);

  inline PrivacyMaskingParameters& operator=(const PrivacyMaskingParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMaskingParameters(PrivacyMaskingParameters&& from) noexcept
    : PrivacyMaskingParameters() {
    *this = ::std::move(from);
  }

  inline PrivacyMaskingParameters& operator=(PrivacyMaskingParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrivacyMaskingParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMaskingParameters* internal_default_instance() {
    return reinterpret_cast<const PrivacyMaskingParameters*>(
               &_PrivacyMaskingParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PrivacyMaskingParameters* other);
  friend void swap(PrivacyMaskingParameters& a, PrivacyMaskingParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMaskingParameters* New() const final {
    return CreateMaybeMessage<PrivacyMaskingParameters>(nullptr);
  }

  PrivacyMaskingParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMaskingParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMaskingParameters& from);
  void MergeFrom(const PrivacyMaskingParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMaskingParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:algorithm.v2.PrivacyMaskingParameters)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class FaceDetectionParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.FaceDetectionParameters) */ {
 public:
  FaceDetectionParameters();
  virtual ~FaceDetectionParameters();

  FaceDetectionParameters(const FaceDetectionParameters& from);

  inline FaceDetectionParameters& operator=(const FaceDetectionParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaceDetectionParameters(FaceDetectionParameters&& from) noexcept
    : FaceDetectionParameters() {
    *this = ::std::move(from);
  }

  inline FaceDetectionParameters& operator=(FaceDetectionParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FaceDetectionParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceDetectionParameters* internal_default_instance() {
    return reinterpret_cast<const FaceDetectionParameters*>(
               &_FaceDetectionParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FaceDetectionParameters* other);
  friend void swap(FaceDetectionParameters& a, FaceDetectionParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceDetectionParameters* New() const final {
    return CreateMaybeMessage<FaceDetectionParameters>(nullptr);
  }

  FaceDetectionParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FaceDetectionParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FaceDetectionParameters& from);
  void MergeFrom(const FaceDetectionParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceDetectionParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:algorithm.v2.FaceDetectionParameters)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.AlgorithmParameters) */ {
 public:
  AlgorithmParameters();
  virtual ~AlgorithmParameters();

  AlgorithmParameters(const AlgorithmParameters& from);

  inline AlgorithmParameters& operator=(const AlgorithmParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmParameters(AlgorithmParameters&& from) noexcept
    : AlgorithmParameters() {
    *this = ::std::move(from);
  }

  inline AlgorithmParameters& operator=(AlgorithmParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmParameters& default_instance();

  enum ParametersCase {
    kSmartParameters = 1,
    kPanChangeParameters = 3,
    kDetectionParameters = 6,
    PARAMETERS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmParameters* internal_default_instance() {
    return reinterpret_cast<const AlgorithmParameters*>(
               &_AlgorithmParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AlgorithmParameters* other);
  friend void swap(AlgorithmParameters& a, AlgorithmParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmParameters* New() const final {
    return CreateMaybeMessage<AlgorithmParameters>(nullptr);
  }

  AlgorithmParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmParameters& from);
  void MergeFrom(const AlgorithmParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .algorithm.v2.PreProcessing pre_processing = 7;
  void clear_pre_processing();
  static const int kPreProcessingFieldNumber = 7;
  ::algorithm::v2::PreProcessing pre_processing() const;
  void set_pre_processing(::algorithm::v2::PreProcessing value);

  // bool video_stabilization = 8;
  void clear_video_stabilization();
  static const int kVideoStabilizationFieldNumber = 8;
  bool video_stabilization() const;
  void set_video_stabilization(bool value);

  // bool tamper_detection = 9;
  void clear_tamper_detection();
  static const int kTamperDetectionFieldNumber = 9;
  bool tamper_detection() const;
  void set_tamper_detection(bool value);

  // bool privacy_masking = 10;
  void clear_privacy_masking();
  static const int kPrivacyMaskingFieldNumber = 10;
  bool privacy_masking() const;
  void set_privacy_masking(bool value);

  // .algorithm.v2.RunMode run_mode = 11;
  void clear_run_mode();
  static const int kRunModeFieldNumber = 11;
  ::algorithm::v2::RunMode run_mode() const;
  void set_run_mode(::algorithm::v2::RunMode value);

  // float pre_processing_degree = 12;
  void clear_pre_processing_degree();
  static const int kPreProcessingDegreeFieldNumber = 12;
  float pre_processing_degree() const;
  void set_pre_processing_degree(float value);

  // .algorithm.v2.SmartMotionAlgorithmParameters smart_parameters = 1;
  bool has_smart_parameters() const;
  void clear_smart_parameters();
  static const int kSmartParametersFieldNumber = 1;
  const ::algorithm::v2::SmartMotionAlgorithmParameters& smart_parameters() const;
  ::algorithm::v2::SmartMotionAlgorithmParameters* release_smart_parameters();
  ::algorithm::v2::SmartMotionAlgorithmParameters* mutable_smart_parameters();
  void set_allocated_smart_parameters(::algorithm::v2::SmartMotionAlgorithmParameters* smart_parameters);

  // .algorithm.v2.PanChangeAlgorithmParameters pan_change_parameters = 3;
  bool has_pan_change_parameters() const;
  void clear_pan_change_parameters();
  static const int kPanChangeParametersFieldNumber = 3;
  const ::algorithm::v2::PanChangeAlgorithmParameters& pan_change_parameters() const;
  ::algorithm::v2::PanChangeAlgorithmParameters* release_pan_change_parameters();
  ::algorithm::v2::PanChangeAlgorithmParameters* mutable_pan_change_parameters();
  void set_allocated_pan_change_parameters(::algorithm::v2::PanChangeAlgorithmParameters* pan_change_parameters);

  // .algorithm.v2.FaceDetectionParameters detection_parameters = 6;
  bool has_detection_parameters() const;
  void clear_detection_parameters();
  static const int kDetectionParametersFieldNumber = 6;
  const ::algorithm::v2::FaceDetectionParameters& detection_parameters() const;
  ::algorithm::v2::FaceDetectionParameters* release_detection_parameters();
  ::algorithm::v2::FaceDetectionParameters* mutable_detection_parameters();
  void set_allocated_detection_parameters(::algorithm::v2::FaceDetectionParameters* detection_parameters);

  void clear_parameters();
  ParametersCase parameters_case() const;
  // @@protoc_insertion_point(class_scope:algorithm.v2.AlgorithmParameters)
 private:
  class HasBitSetters;
  void set_has_smart_parameters();
  void set_has_pan_change_parameters();
  void set_has_detection_parameters();

  inline bool has_parameters() const;
  inline void clear_has_parameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int pre_processing_;
  bool video_stabilization_;
  bool tamper_detection_;
  bool privacy_masking_;
  int run_mode_;
  float pre_processing_degree_;
  union ParametersUnion {
    ParametersUnion() {}
    ::algorithm::v2::SmartMotionAlgorithmParameters* smart_parameters_;
    ::algorithm::v2::PanChangeAlgorithmParameters* pan_change_parameters_;
    ::algorithm::v2::FaceDetectionParameters* detection_parameters_;
  } parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmParametersSetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.AlgorithmParametersSetRequest) */ {
 public:
  AlgorithmParametersSetRequest();
  virtual ~AlgorithmParametersSetRequest();

  AlgorithmParametersSetRequest(const AlgorithmParametersSetRequest& from);

  inline AlgorithmParametersSetRequest& operator=(const AlgorithmParametersSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgorithmParametersSetRequest(AlgorithmParametersSetRequest&& from) noexcept
    : AlgorithmParametersSetRequest() {
    *this = ::std::move(from);
  }

  inline AlgorithmParametersSetRequest& operator=(AlgorithmParametersSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlgorithmParametersSetRequest& default_instance();

  enum ParametersCase {
    kPre = 2,
    kVideoStabilization = 3,
    kTamperDetection = 4,
    kPrivacyMasking = 5,
    kRunMode = 6,
    kPreProcessingDegree = 7,
    kSmartParameters = 8,
    kPanChangeParameters = 10,
    kDetectionParameters = 11,
    PARAMETERS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmParametersSetRequest* internal_default_instance() {
    return reinterpret_cast<const AlgorithmParametersSetRequest*>(
               &_AlgorithmParametersSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AlgorithmParametersSetRequest* other);
  friend void swap(AlgorithmParametersSetRequest& a, AlgorithmParametersSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmParametersSetRequest* New() const final {
    return CreateMaybeMessage<AlgorithmParametersSetRequest>(nullptr);
  }

  AlgorithmParametersSetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmParametersSetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlgorithmParametersSetRequest& from);
  void MergeFrom(const AlgorithmParametersSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmParametersSetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .algorithm.v2.AlgorithmHead algorithm = 1;
  bool has_algorithm() const;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 1;
  const ::algorithm::v2::AlgorithmHead& algorithm() const;
  ::algorithm::v2::AlgorithmHead* release_algorithm();
  ::algorithm::v2::AlgorithmHead* mutable_algorithm();
  void set_allocated_algorithm(::algorithm::v2::AlgorithmHead* algorithm);

  // .algorithm.v2.PreProcessing pre = 2;
  private:
  bool has_pre() const;
  public:
  void clear_pre();
  static const int kPreFieldNumber = 2;
  ::algorithm::v2::PreProcessing pre() const;
  void set_pre(::algorithm::v2::PreProcessing value);

  // bool video_stabilization = 3;
  private:
  bool has_video_stabilization() const;
  public:
  void clear_video_stabilization();
  static const int kVideoStabilizationFieldNumber = 3;
  bool video_stabilization() const;
  void set_video_stabilization(bool value);

  // bool tamper_detection = 4;
  private:
  bool has_tamper_detection() const;
  public:
  void clear_tamper_detection();
  static const int kTamperDetectionFieldNumber = 4;
  bool tamper_detection() const;
  void set_tamper_detection(bool value);

  // bool privacy_masking = 5;
  private:
  bool has_privacy_masking() const;
  public:
  void clear_privacy_masking();
  static const int kPrivacyMaskingFieldNumber = 5;
  bool privacy_masking() const;
  void set_privacy_masking(bool value);

  // .algorithm.v2.RunMode run_mode = 6;
  private:
  bool has_run_mode() const;
  public:
  void clear_run_mode();
  static const int kRunModeFieldNumber = 6;
  ::algorithm::v2::RunMode run_mode() const;
  void set_run_mode(::algorithm::v2::RunMode value);

  // float pre_processing_degree = 7;
  private:
  bool has_pre_processing_degree() const;
  public:
  void clear_pre_processing_degree();
  static const int kPreProcessingDegreeFieldNumber = 7;
  float pre_processing_degree() const;
  void set_pre_processing_degree(float value);

  // .algorithm.v2.SmartMotionAlgorithmParameters smart_parameters = 8;
  bool has_smart_parameters() const;
  void clear_smart_parameters();
  static const int kSmartParametersFieldNumber = 8;
  const ::algorithm::v2::SmartMotionAlgorithmParameters& smart_parameters() const;
  ::algorithm::v2::SmartMotionAlgorithmParameters* release_smart_parameters();
  ::algorithm::v2::SmartMotionAlgorithmParameters* mutable_smart_parameters();
  void set_allocated_smart_parameters(::algorithm::v2::SmartMotionAlgorithmParameters* smart_parameters);

  // .algorithm.v2.PanChangeAlgorithmParameters pan_change_parameters = 10;
  bool has_pan_change_parameters() const;
  void clear_pan_change_parameters();
  static const int kPanChangeParametersFieldNumber = 10;
  const ::algorithm::v2::PanChangeAlgorithmParameters& pan_change_parameters() const;
  ::algorithm::v2::PanChangeAlgorithmParameters* release_pan_change_parameters();
  ::algorithm::v2::PanChangeAlgorithmParameters* mutable_pan_change_parameters();
  void set_allocated_pan_change_parameters(::algorithm::v2::PanChangeAlgorithmParameters* pan_change_parameters);

  // .algorithm.v2.FaceDetectionParameters detection_parameters = 11;
  bool has_detection_parameters() const;
  void clear_detection_parameters();
  static const int kDetectionParametersFieldNumber = 11;
  const ::algorithm::v2::FaceDetectionParameters& detection_parameters() const;
  ::algorithm::v2::FaceDetectionParameters* release_detection_parameters();
  ::algorithm::v2::FaceDetectionParameters* mutable_detection_parameters();
  void set_allocated_detection_parameters(::algorithm::v2::FaceDetectionParameters* detection_parameters);

  void clear_parameters();
  ParametersCase parameters_case() const;
  // @@protoc_insertion_point(class_scope:algorithm.v2.AlgorithmParametersSetRequest)
 private:
  class HasBitSetters;
  void set_has_pre();
  void set_has_video_stabilization();
  void set_has_tamper_detection();
  void set_has_privacy_masking();
  void set_has_run_mode();
  void set_has_pre_processing_degree();
  void set_has_smart_parameters();
  void set_has_pan_change_parameters();
  void set_has_detection_parameters();

  inline bool has_parameters() const;
  inline void clear_has_parameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::algorithm::v2::AlgorithmHead* algorithm_;
  union ParametersUnion {
    ParametersUnion() {}
    int pre_;
    bool video_stabilization_;
    bool tamper_detection_;
    bool privacy_masking_;
    int run_mode_;
    float pre_processing_degree_;
    ::algorithm::v2::SmartMotionAlgorithmParameters* smart_parameters_;
    ::algorithm::v2::PanChangeAlgorithmParameters* pan_change_parameters_;
    ::algorithm::v2::FaceDetectionParameters* detection_parameters_;
  } parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.Point)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class LineCrossRegion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.LineCrossRegion) */ {
 public:
  LineCrossRegion();
  virtual ~LineCrossRegion();

  LineCrossRegion(const LineCrossRegion& from);

  inline LineCrossRegion& operator=(const LineCrossRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineCrossRegion(LineCrossRegion&& from) noexcept
    : LineCrossRegion() {
    *this = ::std::move(from);
  }

  inline LineCrossRegion& operator=(LineCrossRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LineCrossRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineCrossRegion* internal_default_instance() {
    return reinterpret_cast<const LineCrossRegion*>(
               &_LineCrossRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(LineCrossRegion* other);
  friend void swap(LineCrossRegion& a, LineCrossRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineCrossRegion* New() const final {
    return CreateMaybeMessage<LineCrossRegion>(nullptr);
  }

  LineCrossRegion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LineCrossRegion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LineCrossRegion& from);
  void MergeFrom(const LineCrossRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineCrossRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .algorithm.v2.Point pt1 = 1;
  bool has_pt1() const;
  void clear_pt1();
  static const int kPt1FieldNumber = 1;
  const ::algorithm::v2::Point& pt1() const;
  ::algorithm::v2::Point* release_pt1();
  ::algorithm::v2::Point* mutable_pt1();
  void set_allocated_pt1(::algorithm::v2::Point* pt1);

  // .algorithm.v2.Point pt2 = 2;
  bool has_pt2() const;
  void clear_pt2();
  static const int kPt2FieldNumber = 2;
  const ::algorithm::v2::Point& pt2() const;
  ::algorithm::v2::Point* release_pt2();
  ::algorithm::v2::Point* mutable_pt2();
  void set_allocated_pt2(::algorithm::v2::Point* pt2);

  // bool active = 3;
  void clear_active();
  static const int kActiveFieldNumber = 3;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.LineCrossRegion)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::algorithm::v2::Point* pt1_;
  ::algorithm::v2::Point* pt2_;
  bool active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class Rectangle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Rectangle* other);
  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(nullptr);
  }

  Rectangle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .algorithm.v2.Point top_left = 1;
  bool has_top_left() const;
  void clear_top_left();
  static const int kTopLeftFieldNumber = 1;
  const ::algorithm::v2::Point& top_left() const;
  ::algorithm::v2::Point* release_top_left();
  ::algorithm::v2::Point* mutable_top_left();
  void set_allocated_top_left(::algorithm::v2::Point* top_left);

  // .algorithm.v2.Point bottom_right = 2;
  bool has_bottom_right() const;
  void clear_bottom_right();
  static const int kBottomRightFieldNumber = 2;
  const ::algorithm::v2::Point& bottom_right() const;
  ::algorithm::v2::Point* release_bottom_right();
  ::algorithm::v2::Point* mutable_bottom_right();
  void set_allocated_bottom_right(::algorithm::v2::Point* bottom_right);

  // @@protoc_insertion_point(class_scope:algorithm.v2.Rectangle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::algorithm::v2::Point* top_left_;
  ::algorithm::v2::Point* bottom_right_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class DetectedObject final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.DetectedObject) */ {
 public:
  DetectedObject();
  virtual ~DetectedObject();

  DetectedObject(const DetectedObject& from);

  inline DetectedObject& operator=(const DetectedObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectedObject(DetectedObject&& from) noexcept
    : DetectedObject() {
    *this = ::std::move(from);
  }

  inline DetectedObject& operator=(DetectedObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DetectedObject& default_instance();

  enum ObjectIdCase {
    kObjectCounter = 4,
    kObjectGuid = 5,
    OBJECT_ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedObject* internal_default_instance() {
    return reinterpret_cast<const DetectedObject*>(
               &_DetectedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DetectedObject* other);
  friend void swap(DetectedObject& a, DetectedObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectedObject* New() const final {
    return CreateMaybeMessage<DetectedObject>(nullptr);
  }

  DetectedObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetectedObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetectedObject& from);
  void MergeFrom(const DetectedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DetectedObject_ObjectType ObjectType;
  static const ObjectType HUMAN =
    DetectedObject_ObjectType_HUMAN;
  static const ObjectType VEHICLE =
    DetectedObject_ObjectType_VEHICLE;
  static const ObjectType OTHERS =
    DetectedObject_ObjectType_OTHERS;
  static inline bool ObjectType_IsValid(int value) {
    return DetectedObject_ObjectType_IsValid(value);
  }
  static const ObjectType ObjectType_MIN =
    DetectedObject_ObjectType_ObjectType_MIN;
  static const ObjectType ObjectType_MAX =
    DetectedObject_ObjectType_ObjectType_MAX;
  static const int ObjectType_ARRAYSIZE =
    DetectedObject_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObjectType_descriptor() {
    return DetectedObject_ObjectType_descriptor();
  }
  static inline const ::std::string& ObjectType_Name(ObjectType value) {
    return DetectedObject_ObjectType_Name(value);
  }
  static inline bool ObjectType_Parse(const ::std::string& name,
      ObjectType* value) {
    return DetectedObject_ObjectType_Parse(name, value);
  }

  typedef DetectedObject_EventType EventType;
  static const EventType NONE =
    DetectedObject_EventType_NONE;
  static const EventType ROI_ENTER =
    DetectedObject_EventType_ROI_ENTER;
  static const EventType LINE_CROSS =
    DetectedObject_EventType_LINE_CROSS;
  static const EventType WANDERING =
    DetectedObject_EventType_WANDERING;
  static const EventType LEFT_OBJECT =
    DetectedObject_EventType_LEFT_OBJECT;
  static const EventType STANDING =
    DetectedObject_EventType_STANDING;
  static const EventType ROI_LEAVE =
    DetectedObject_EventType_ROI_LEAVE;
  static const EventType ROI_WAIT =
    DetectedObject_EventType_ROI_WAIT;
  static const EventType STOLEN_OBJECT =
    DetectedObject_EventType_STOLEN_OBJECT;
  static inline bool EventType_IsValid(int value) {
    return DetectedObject_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    DetectedObject_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    DetectedObject_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    DetectedObject_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return DetectedObject_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return DetectedObject_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return DetectedObject_EventType_Parse(name, value);
  }

  typedef DetectedObject_ObjectColor ObjectColor;
  static const ObjectColor DARK =
    DetectedObject_ObjectColor_DARK;
  static const ObjectColor GRAY =
    DetectedObject_ObjectColor_GRAY;
  static const ObjectColor LIGHT =
    DetectedObject_ObjectColor_LIGHT;
  static const ObjectColor RED =
    DetectedObject_ObjectColor_RED;
  static const ObjectColor YELLOW =
    DetectedObject_ObjectColor_YELLOW;
  static const ObjectColor GREEN =
    DetectedObject_ObjectColor_GREEN;
  static const ObjectColor CYAN =
    DetectedObject_ObjectColor_CYAN;
  static const ObjectColor BLUE =
    DetectedObject_ObjectColor_BLUE;
  static const ObjectColor MAGENTA =
    DetectedObject_ObjectColor_MAGENTA;
  static inline bool ObjectColor_IsValid(int value) {
    return DetectedObject_ObjectColor_IsValid(value);
  }
  static const ObjectColor ObjectColor_MIN =
    DetectedObject_ObjectColor_ObjectColor_MIN;
  static const ObjectColor ObjectColor_MAX =
    DetectedObject_ObjectColor_ObjectColor_MAX;
  static const int ObjectColor_ARRAYSIZE =
    DetectedObject_ObjectColor_ObjectColor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObjectColor_descriptor() {
    return DetectedObject_ObjectColor_descriptor();
  }
  static inline const ::std::string& ObjectColor_Name(ObjectColor value) {
    return DetectedObject_ObjectColor_Name(value);
  }
  static inline bool ObjectColor_Parse(const ::std::string& name,
      ObjectColor* value) {
    return DetectedObject_ObjectColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .algorithm.v2.Rectangle bounding_box = 1;
  bool has_bounding_box() const;
  void clear_bounding_box();
  static const int kBoundingBoxFieldNumber = 1;
  const ::algorithm::v2::Rectangle& bounding_box() const;
  ::algorithm::v2::Rectangle* release_bounding_box();
  ::algorithm::v2::Rectangle* mutable_bounding_box();
  void set_allocated_bounding_box(::algorithm::v2::Rectangle* bounding_box);

  // .algorithm.v2.DetectedObject.ObjectType object_type = 2;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  ::algorithm::v2::DetectedObject_ObjectType object_type() const;
  void set_object_type(::algorithm::v2::DetectedObject_ObjectType value);

  // .algorithm.v2.DetectedObject.EventType event = 3;
  void clear_event();
  static const int kEventFieldNumber = 3;
  ::algorithm::v2::DetectedObject_EventType event() const;
  void set_event(::algorithm::v2::DetectedObject_EventType value);

  // .algorithm.v2.DetectedObject.ObjectColor object_color = 6;
  void clear_object_color();
  static const int kObjectColorFieldNumber = 6;
  ::algorithm::v2::DetectedObject_ObjectColor object_color() const;
  void set_object_color(::algorithm::v2::DetectedObject_ObjectColor value);

  // .algorithm.v2.MotionDirection object_direction = 7;
  void clear_object_direction();
  static const int kObjectDirectionFieldNumber = 7;
  ::algorithm::v2::MotionDirection object_direction() const;
  void set_object_direction(::algorithm::v2::MotionDirection value);

  // int32 object_counter = 4;
  private:
  bool has_object_counter() const;
  public:
  void clear_object_counter();
  static const int kObjectCounterFieldNumber = 4;
  ::google::protobuf::int32 object_counter() const;
  void set_object_counter(::google::protobuf::int32 value);

  // string object_guid = 5;
  private:
  bool has_object_guid() const;
  public:
  void clear_object_guid();
  static const int kObjectGuidFieldNumber = 5;
  const ::std::string& object_guid() const;
  void set_object_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_object_guid(::std::string&& value);
  #endif
  void set_object_guid(const char* value);
  void set_object_guid(const char* value, size_t size);
  ::std::string* mutable_object_guid();
  ::std::string* release_object_guid();
  void set_allocated_object_guid(::std::string* object_guid);

  void clear_object_id();
  ObjectIdCase object_id_case() const;
  // @@protoc_insertion_point(class_scope:algorithm.v2.DetectedObject)
 private:
  class HasBitSetters;
  void set_has_object_counter();
  void set_has_object_guid();

  inline bool has_object_id() const;
  inline void clear_has_object_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::algorithm::v2::Rectangle* bounding_box_;
  int object_type_;
  int event_;
  int object_color_;
  int object_direction_;
  union ObjectIdUnion {
    ObjectIdUnion() {}
    ::google::protobuf::int32 object_counter_;
    ::google::protobuf::internal::ArenaStringPtr object_guid_;
  } object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class ScreenshotInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.ScreenshotInfo) */ {
 public:
  ScreenshotInfo();
  virtual ~ScreenshotInfo();

  ScreenshotInfo(const ScreenshotInfo& from);

  inline ScreenshotInfo& operator=(const ScreenshotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenshotInfo(ScreenshotInfo&& from) noexcept
    : ScreenshotInfo() {
    *this = ::std::move(from);
  }

  inline ScreenshotInfo& operator=(ScreenshotInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ScreenshotInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenshotInfo* internal_default_instance() {
    return reinterpret_cast<const ScreenshotInfo*>(
               &_ScreenshotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ScreenshotInfo* other);
  friend void swap(ScreenshotInfo& a, ScreenshotInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenshotInfo* New() const final {
    return CreateMaybeMessage<ScreenshotInfo>(nullptr);
  }

  ScreenshotInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenshotInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenshotInfo& from);
  void MergeFrom(const ScreenshotInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenshotInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 channelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::int32 channelid() const;
  void set_channelid(::google::protobuf::int32 value);

  // int32 quality = 2;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // float fps = 3;
  void clear_fps();
  static const int kFpsFieldNumber = 3;
  float fps() const;
  void set_fps(float value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.ScreenshotInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 channelid_;
  ::google::protobuf::int32 quality_;
  float fps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class ScreenFrame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.ScreenFrame) */ {
 public:
  ScreenFrame();
  virtual ~ScreenFrame();

  ScreenFrame(const ScreenFrame& from);

  inline ScreenFrame& operator=(const ScreenFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenFrame(ScreenFrame&& from) noexcept
    : ScreenFrame() {
    *this = ::std::move(from);
  }

  inline ScreenFrame& operator=(ScreenFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ScreenFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenFrame* internal_default_instance() {
    return reinterpret_cast<const ScreenFrame*>(
               &_ScreenFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ScreenFrame* other);
  friend void swap(ScreenFrame& a, ScreenFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenFrame* New() const final {
    return CreateMaybeMessage<ScreenFrame>(nullptr);
  }

  ScreenFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenFrame& from);
  void MergeFrom(const ScreenFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes frame = 1;
  void clear_frame();
  static const int kFrameFieldNumber = 1;
  const ::std::string& frame() const;
  void set_frame(const ::std::string& value);
  #if LANG_CXX11
  void set_frame(::std::string&& value);
  #endif
  void set_frame(const char* value);
  void set_frame(const void* value, size_t size);
  ::std::string* mutable_frame();
  ::std::string* release_frame();
  void set_allocated_frame(::std::string* frame);

  // string metadata = 4;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // int64 ts = 3;
  void clear_ts();
  static const int kTsFieldNumber = 3;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // int32 quality = 2;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.ScreenFrame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr frame_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::int64 ts_;
  ::google::protobuf::int32 quality_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class AlarmReqAdvancedParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.AlarmReqAdvancedParameters) */ {
 public:
  AlarmReqAdvancedParameters();
  virtual ~AlarmReqAdvancedParameters();

  AlarmReqAdvancedParameters(const AlarmReqAdvancedParameters& from);

  inline AlarmReqAdvancedParameters& operator=(const AlarmReqAdvancedParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlarmReqAdvancedParameters(AlarmReqAdvancedParameters&& from) noexcept
    : AlarmReqAdvancedParameters() {
    *this = ::std::move(from);
  }

  inline AlarmReqAdvancedParameters& operator=(AlarmReqAdvancedParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlarmReqAdvancedParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmReqAdvancedParameters* internal_default_instance() {
    return reinterpret_cast<const AlarmReqAdvancedParameters*>(
               &_AlarmReqAdvancedParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(AlarmReqAdvancedParameters* other);
  friend void swap(AlarmReqAdvancedParameters& a, AlarmReqAdvancedParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlarmReqAdvancedParameters* New() const final {
    return CreateMaybeMessage<AlarmReqAdvancedParameters>(nullptr);
  }

  AlarmReqAdvancedParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlarmReqAdvancedParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlarmReqAdvancedParameters& from);
  void MergeFrom(const AlarmReqAdvancedParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmReqAdvancedParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 suppressInterval = 2;
  void clear_suppressinterval();
  static const int kSuppressIntervalFieldNumber = 2;
  ::google::protobuf::int32 suppressinterval() const;
  void set_suppressinterval(::google::protobuf::int32 value);

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // bool smartSnapshot = 4;
  void clear_smartsnapshot();
  static const int kSmartSnapshotFieldNumber = 4;
  bool smartsnapshot() const;
  void set_smartsnapshot(bool value);

  // int32 alarmQueueLength = 3;
  void clear_alarmqueuelength();
  static const int kAlarmQueueLengthFieldNumber = 3;
  ::google::protobuf::int32 alarmqueuelength() const;
  void set_alarmqueuelength(::google::protobuf::int32 value);

  // int32 smartSnapshotInterval = 5;
  void clear_smartsnapshotinterval();
  static const int kSmartSnapshotIntervalFieldNumber = 5;
  ::google::protobuf::int32 smartsnapshotinterval() const;
  void set_smartsnapshotinterval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.AlarmReqAdvancedParameters)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 suppressinterval_;
  bool enabled_;
  bool smartsnapshot_;
  ::google::protobuf::int32 alarmqueuelength_;
  ::google::protobuf::int32 smartsnapshotinterval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class AlarmReqInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.AlarmReqInfo) */ {
 public:
  AlarmReqInfo();
  virtual ~AlarmReqInfo();

  AlarmReqInfo(const AlarmReqInfo& from);

  inline AlarmReqInfo& operator=(const AlarmReqInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlarmReqInfo(AlarmReqInfo&& from) noexcept
    : AlarmReqInfo() {
    *this = ::std::move(from);
  }

  inline AlarmReqInfo& operator=(AlarmReqInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlarmReqInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmReqInfo* internal_default_instance() {
    return reinterpret_cast<const AlarmReqInfo*>(
               &_AlarmReqInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(AlarmReqInfo* other);
  friend void swap(AlarmReqInfo& a, AlarmReqInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlarmReqInfo* New() const final {
    return CreateMaybeMessage<AlarmReqInfo>(nullptr);
  }

  AlarmReqInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlarmReqInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlarmReqInfo& from);
  void MergeFrom(const AlarmReqInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmReqInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filter = 1;
  void clear_filter();
  static const int kFilterFieldNumber = 1;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // .algorithm.v2.AlarmReqAdvancedParameters advancedParams = 4;
  bool has_advancedparams() const;
  void clear_advancedparams();
  static const int kAdvancedParamsFieldNumber = 4;
  const ::algorithm::v2::AlarmReqAdvancedParameters& advancedparams() const;
  ::algorithm::v2::AlarmReqAdvancedParameters* release_advancedparams();
  ::algorithm::v2::AlarmReqAdvancedParameters* mutable_advancedparams();
  void set_allocated_advancedparams(::algorithm::v2::AlarmReqAdvancedParameters* advancedparams);

  // int32 channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // int32 intervalMsecs = 3;
  void clear_intervalmsecs();
  static const int kIntervalMsecsFieldNumber = 3;
  ::google::protobuf::int32 intervalmsecs() const;
  void set_intervalmsecs(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.AlarmReqInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::algorithm::v2::AlarmReqAdvancedParameters* advancedparams_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 intervalmsecs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class Alarm final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.Alarm) */ {
 public:
  Alarm();
  virtual ~Alarm();

  Alarm(const Alarm& from);

  inline Alarm& operator=(const Alarm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Alarm(Alarm&& from) noexcept
    : Alarm() {
    *this = ::std::move(from);
  }

  inline Alarm& operator=(Alarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Alarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alarm* internal_default_instance() {
    return reinterpret_cast<const Alarm*>(
               &_Alarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Alarm* other);
  friend void swap(Alarm& a, Alarm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Alarm* New() const final {
    return CreateMaybeMessage<Alarm>(nullptr);
  }

  Alarm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Alarm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Alarm& from);
  void MergeFrom(const Alarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alarm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string key = 1;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key(int index) const;
  ::std::string* mutable_key(int index);
  void set_key(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_key(int index, ::std::string&& value);
  #endif
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  ::std::string* add_key();
  void add_key(const ::std::string& value);
  #if LANG_CXX11
  void add_key(::std::string&& value);
  #endif
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& key() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_key();

  // repeated string value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_value(int index, ::std::string&& value);
  #endif
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  #if LANG_CXX11
  void add_value(::std::string&& value);
  #endif
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_value();

  // repeated .algorithm.v2.DetectedObject detected_object = 4;
  int detected_object_size() const;
  void clear_detected_object();
  static const int kDetectedObjectFieldNumber = 4;
  ::algorithm::v2::DetectedObject* mutable_detected_object(int index);
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::DetectedObject >*
      mutable_detected_object();
  const ::algorithm::v2::DetectedObject& detected_object(int index) const;
  ::algorithm::v2::DetectedObject* add_detected_object();
  const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::DetectedObject >&
      detected_object() const;

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:algorithm.v2.Alarm)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> key_;
  ::google::protobuf::RepeatedPtrField<::std::string> value_;
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::DetectedObject > detected_object_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class Alarms final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.Alarms) */ {
 public:
  Alarms();
  virtual ~Alarms();

  Alarms(const Alarms& from);

  inline Alarms& operator=(const Alarms& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Alarms(Alarms&& from) noexcept
    : Alarms() {
    *this = ::std::move(from);
  }

  inline Alarms& operator=(Alarms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Alarms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alarms* internal_default_instance() {
    return reinterpret_cast<const Alarms*>(
               &_Alarms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Alarms* other);
  friend void swap(Alarms& a, Alarms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Alarms* New() const final {
    return CreateMaybeMessage<Alarms>(nullptr);
  }

  Alarms* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Alarms>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Alarms& from);
  void MergeFrom(const Alarms& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alarms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .algorithm.v2.Alarm alarms = 1;
  int alarms_size() const;
  void clear_alarms();
  static const int kAlarmsFieldNumber = 1;
  ::algorithm::v2::Alarm* mutable_alarms(int index);
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Alarm >*
      mutable_alarms();
  const ::algorithm::v2::Alarm& alarms(int index) const;
  ::algorithm::v2::Alarm* add_alarms();
  const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Alarm >&
      alarms() const;

  // int64 ts = 2;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.Alarms)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Alarm > alarms_;
  ::google::protobuf::int64 ts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class FeatureIPVideoSource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.FeatureIPVideoSource) */ {
 public:
  FeatureIPVideoSource();
  virtual ~FeatureIPVideoSource();

  FeatureIPVideoSource(const FeatureIPVideoSource& from);

  inline FeatureIPVideoSource& operator=(const FeatureIPVideoSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureIPVideoSource(FeatureIPVideoSource&& from) noexcept
    : FeatureIPVideoSource() {
    *this = ::std::move(from);
  }

  inline FeatureIPVideoSource& operator=(FeatureIPVideoSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FeatureIPVideoSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureIPVideoSource* internal_default_instance() {
    return reinterpret_cast<const FeatureIPVideoSource*>(
               &_FeatureIPVideoSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(FeatureIPVideoSource* other);
  friend void swap(FeatureIPVideoSource& a, FeatureIPVideoSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureIPVideoSource* New() const final {
    return CreateMaybeMessage<FeatureIPVideoSource>(nullptr);
  }

  FeatureIPVideoSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FeatureIPVideoSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FeatureIPVideoSource& from);
  void MergeFrom(const FeatureIPVideoSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureIPVideoSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FeatureIPVideoSource_Transport Transport;
  static const Transport UDP =
    FeatureIPVideoSource_Transport_UDP;
  static const Transport TCP =
    FeatureIPVideoSource_Transport_TCP;
  static inline bool Transport_IsValid(int value) {
    return FeatureIPVideoSource_Transport_IsValid(value);
  }
  static const Transport Transport_MIN =
    FeatureIPVideoSource_Transport_Transport_MIN;
  static const Transport Transport_MAX =
    FeatureIPVideoSource_Transport_Transport_MAX;
  static const int Transport_ARRAYSIZE =
    FeatureIPVideoSource_Transport_Transport_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Transport_descriptor() {
    return FeatureIPVideoSource_Transport_descriptor();
  }
  static inline const ::std::string& Transport_Name(Transport value) {
    return FeatureIPVideoSource_Transport_Name(value);
  }
  static inline bool Transport_Parse(const ::std::string& name,
      Transport* value) {
    return FeatureIPVideoSource_Transport_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // .algorithm.v2.FeatureIPVideoSource.Transport transport = 2;
  void clear_transport();
  static const int kTransportFieldNumber = 2;
  ::algorithm::v2::FeatureIPVideoSource_Transport transport() const;
  void set_transport(::algorithm::v2::FeatureIPVideoSource_Transport value);

  // int32 buffer_size = 3;
  void clear_buffer_size();
  static const int kBufferSizeFieldNumber = 3;
  ::google::protobuf::int32 buffer_size() const;
  void set_buffer_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.FeatureIPVideoSource)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  int transport_;
  ::google::protobuf::int32 buffer_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class FeatureCustom final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.FeatureCustom) */ {
 public:
  FeatureCustom();
  virtual ~FeatureCustom();

  FeatureCustom(const FeatureCustom& from);

  inline FeatureCustom& operator=(const FeatureCustom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureCustom(FeatureCustom&& from) noexcept
    : FeatureCustom() {
    *this = ::std::move(from);
  }

  inline FeatureCustom& operator=(FeatureCustom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FeatureCustom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureCustom* internal_default_instance() {
    return reinterpret_cast<const FeatureCustom*>(
               &_FeatureCustom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(FeatureCustom* other);
  friend void swap(FeatureCustom& a, FeatureCustom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureCustom* New() const final {
    return CreateMaybeMessage<FeatureCustom>(nullptr);
  }

  FeatureCustom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FeatureCustom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FeatureCustom& from);
  void MergeFrom(const FeatureCustom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureCustom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:algorithm.v2.FeatureCustom)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// -------------------------------------------------------------------

class SystemFeature final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algorithm.v2.SystemFeature) */ {
 public:
  SystemFeature();
  virtual ~SystemFeature();

  SystemFeature(const SystemFeature& from);

  inline SystemFeature& operator=(const SystemFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemFeature(SystemFeature&& from) noexcept
    : SystemFeature() {
    *this = ::std::move(from);
  }

  inline SystemFeature& operator=(SystemFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SystemFeature& default_instance();

  enum FeatureCase {
    kCustom = 1,
    kVideoSource = 2,
    FEATURE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemFeature* internal_default_instance() {
    return reinterpret_cast<const SystemFeature*>(
               &_SystemFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(SystemFeature* other);
  friend void swap(SystemFeature& a, SystemFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemFeature* New() const final {
    return CreateMaybeMessage<SystemFeature>(nullptr);
  }

  SystemFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemFeature& from);
  void MergeFrom(const SystemFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .algorithm.v2.FeatureCustom custom = 1;
  bool has_custom() const;
  void clear_custom();
  static const int kCustomFieldNumber = 1;
  const ::algorithm::v2::FeatureCustom& custom() const;
  ::algorithm::v2::FeatureCustom* release_custom();
  ::algorithm::v2::FeatureCustom* mutable_custom();
  void set_allocated_custom(::algorithm::v2::FeatureCustom* custom);

  // .algorithm.v2.FeatureIPVideoSource video_source = 2;
  bool has_video_source() const;
  void clear_video_source();
  static const int kVideoSourceFieldNumber = 2;
  const ::algorithm::v2::FeatureIPVideoSource& video_source() const;
  ::algorithm::v2::FeatureIPVideoSource* release_video_source();
  ::algorithm::v2::FeatureIPVideoSource* mutable_video_source();
  void set_allocated_video_source(::algorithm::v2::FeatureIPVideoSource* video_source);

  void clear_feature();
  FeatureCase feature_case() const;
  // @@protoc_insertion_point(class_scope:algorithm.v2.SystemFeature)
 private:
  class HasBitSetters;
  void set_has_custom();
  void set_has_video_source();

  inline bool has_feature() const;
  inline void clear_has_feature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union FeatureUnion {
    FeatureUnion() {}
    ::algorithm::v2::FeatureCustom* custom_;
    ::algorithm::v2::FeatureIPVideoSource* video_source_;
  } feature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_AlgorithmCommunicationV2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlgorithmHead

// int32 ptz_head = 1;
inline bool AlgorithmHead::has_ptz_head() const {
  return head_selection_case() == kPtzHead;
}
inline void AlgorithmHead::set_has_ptz_head() {
  _oneof_case_[0] = kPtzHead;
}
inline void AlgorithmHead::clear_ptz_head() {
  if (has_ptz_head()) {
    head_selection_.ptz_head_ = 0;
    clear_has_head_selection();
  }
}
inline ::google::protobuf::int32 AlgorithmHead::ptz_head() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmHead.ptz_head)
  if (has_ptz_head()) {
    return head_selection_.ptz_head_;
  }
  return 0;
}
inline void AlgorithmHead::set_ptz_head(::google::protobuf::int32 value) {
  if (!has_ptz_head()) {
    clear_head_selection();
    set_has_ptz_head();
  }
  head_selection_.ptz_head_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmHead.ptz_head)
}

// int32 algorithm_index = 2;
inline bool AlgorithmHead::has_algorithm_index() const {
  return head_selection_case() == kAlgorithmIndex;
}
inline void AlgorithmHead::set_has_algorithm_index() {
  _oneof_case_[0] = kAlgorithmIndex;
}
inline void AlgorithmHead::clear_algorithm_index() {
  if (has_algorithm_index()) {
    head_selection_.algorithm_index_ = 0;
    clear_has_head_selection();
  }
}
inline ::google::protobuf::int32 AlgorithmHead::algorithm_index() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmHead.algorithm_index)
  if (has_algorithm_index()) {
    return head_selection_.algorithm_index_;
  }
  return 0;
}
inline void AlgorithmHead::set_algorithm_index(::google::protobuf::int32 value) {
  if (!has_algorithm_index()) {
    clear_head_selection();
    set_has_algorithm_index();
  }
  head_selection_.algorithm_index_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmHead.algorithm_index)
}

// string algorithm_node = 3;
inline bool AlgorithmHead::has_algorithm_node() const {
  return head_selection_case() == kAlgorithmNode;
}
inline void AlgorithmHead::set_has_algorithm_node() {
  _oneof_case_[0] = kAlgorithmNode;
}
inline void AlgorithmHead::clear_algorithm_node() {
  if (has_algorithm_node()) {
    head_selection_.algorithm_node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_head_selection();
  }
}
inline const ::std::string& AlgorithmHead::algorithm_node() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmHead.algorithm_node)
  if (has_algorithm_node()) {
    return head_selection_.algorithm_node_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AlgorithmHead::set_algorithm_node(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmHead.algorithm_node)
  if (!has_algorithm_node()) {
    clear_head_selection();
    set_has_algorithm_node();
    head_selection_.algorithm_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  head_selection_.algorithm_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmHead.algorithm_node)
}
#if LANG_CXX11
inline void AlgorithmHead::set_algorithm_node(::std::string&& value) {
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmHead.algorithm_node)
  if (!has_algorithm_node()) {
    clear_head_selection();
    set_has_algorithm_node();
    head_selection_.algorithm_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  head_selection_.algorithm_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.AlgorithmHead.algorithm_node)
}
#endif
inline void AlgorithmHead::set_algorithm_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_algorithm_node()) {
    clear_head_selection();
    set_has_algorithm_node();
    head_selection_.algorithm_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  head_selection_.algorithm_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.AlgorithmHead.algorithm_node)
}
inline void AlgorithmHead::set_algorithm_node(const char* value, size_t size) {
  if (!has_algorithm_node()) {
    clear_head_selection();
    set_has_algorithm_node();
    head_selection_.algorithm_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  head_selection_.algorithm_node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.AlgorithmHead.algorithm_node)
}
inline ::std::string* AlgorithmHead::mutable_algorithm_node() {
  if (!has_algorithm_node()) {
    clear_head_selection();
    set_has_algorithm_node();
    head_selection_.algorithm_node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmHead.algorithm_node)
  return head_selection_.algorithm_node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmHead::release_algorithm_node() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmHead.algorithm_node)
  if (has_algorithm_node()) {
    clear_has_head_selection();
    return head_selection_.algorithm_node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AlgorithmHead::set_allocated_algorithm_node(::std::string* algorithm_node) {
  if (has_head_selection()) {
    clear_head_selection();
  }
  if (algorithm_node != nullptr) {
    set_has_algorithm_node();
    head_selection_.algorithm_node_.UnsafeSetDefault(algorithm_node);
  }
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.AlgorithmHead.algorithm_node)
}

// string friendly_name = 4;
inline void AlgorithmHead::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgorithmHead::friendly_name() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmHead.friendly_name)
  return friendly_name_.GetNoArena();
}
inline void AlgorithmHead::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmHead.friendly_name)
}
#if LANG_CXX11
inline void AlgorithmHead::set_friendly_name(::std::string&& value) {
  
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.AlgorithmHead.friendly_name)
}
#endif
inline void AlgorithmHead::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.AlgorithmHead.friendly_name)
}
inline void AlgorithmHead::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.AlgorithmHead.friendly_name)
}
inline ::std::string* AlgorithmHead::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmHead.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgorithmHead::release_friendly_name() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmHead.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgorithmHead::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != nullptr) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.AlgorithmHead.friendly_name)
}

inline bool AlgorithmHead::has_head_selection() const {
  return head_selection_case() != HEAD_SELECTION_NOT_SET;
}
inline void AlgorithmHead::clear_has_head_selection() {
  _oneof_case_[0] = HEAD_SELECTION_NOT_SET;
}
inline AlgorithmHead::HeadSelectionCase AlgorithmHead::head_selection_case() const {
  return AlgorithmHead::HeadSelectionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AlgorithmStatus

// bool is_running = 1;
inline void AlgorithmStatus::clear_is_running() {
  is_running_ = false;
}
inline bool AlgorithmStatus::is_running() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmStatus.is_running)
  return is_running_;
}
inline void AlgorithmStatus::set_is_running(bool value) {
  
  is_running_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmStatus.is_running)
}

// -------------------------------------------------------------------

// AlgorithmInformation

// .algorithm.v2.AlgorithmHead head_info = 1;
inline bool AlgorithmInformation::has_head_info() const {
  return this != internal_default_instance() && head_info_ != nullptr;
}
inline void AlgorithmInformation::clear_head_info() {
  if (GetArenaNoVirtual() == nullptr && head_info_ != nullptr) {
    delete head_info_;
  }
  head_info_ = nullptr;
}
inline const ::algorithm::v2::AlgorithmHead& AlgorithmInformation::head_info() const {
  const ::algorithm::v2::AlgorithmHead* p = head_info_;
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmInformation.head_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::AlgorithmHead*>(
      &::algorithm::v2::_AlgorithmHead_default_instance_);
}
inline ::algorithm::v2::AlgorithmHead* AlgorithmInformation::release_head_info() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmInformation.head_info)
  
  ::algorithm::v2::AlgorithmHead* temp = head_info_;
  head_info_ = nullptr;
  return temp;
}
inline ::algorithm::v2::AlgorithmHead* AlgorithmInformation::mutable_head_info() {
  
  if (head_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::AlgorithmHead>(GetArenaNoVirtual());
    head_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmInformation.head_info)
  return head_info_;
}
inline void AlgorithmInformation::set_allocated_head_info(::algorithm::v2::AlgorithmHead* head_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete head_info_;
  }
  if (head_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      head_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head_info, submessage_arena);
    }
    
  } else {
    
  }
  head_info_ = head_info;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.AlgorithmInformation.head_info)
}

// .algorithm.v2.AlgorithmStatus status = 2;
inline bool AlgorithmInformation::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void AlgorithmInformation::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::algorithm::v2::AlgorithmStatus& AlgorithmInformation::status() const {
  const ::algorithm::v2::AlgorithmStatus* p = status_;
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmInformation.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::AlgorithmStatus*>(
      &::algorithm::v2::_AlgorithmStatus_default_instance_);
}
inline ::algorithm::v2::AlgorithmStatus* AlgorithmInformation::release_status() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmInformation.status)
  
  ::algorithm::v2::AlgorithmStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::algorithm::v2::AlgorithmStatus* AlgorithmInformation::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::AlgorithmStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmInformation.status)
  return status_;
}
inline void AlgorithmInformation::set_allocated_status(::algorithm::v2::AlgorithmStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.AlgorithmInformation.status)
}

// -------------------------------------------------------------------

// AlgorithmListResponse

// repeated .algorithm.v2.AlgorithmInformation algorithms = 1;
inline int AlgorithmListResponse::algorithms_size() const {
  return algorithms_.size();
}
inline void AlgorithmListResponse::clear_algorithms() {
  algorithms_.Clear();
}
inline ::algorithm::v2::AlgorithmInformation* AlgorithmListResponse::mutable_algorithms(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmListResponse.algorithms)
  return algorithms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::algorithm::v2::AlgorithmInformation >*
AlgorithmListResponse::mutable_algorithms() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.AlgorithmListResponse.algorithms)
  return &algorithms_;
}
inline const ::algorithm::v2::AlgorithmInformation& AlgorithmListResponse::algorithms(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmListResponse.algorithms)
  return algorithms_.Get(index);
}
inline ::algorithm::v2::AlgorithmInformation* AlgorithmListResponse::add_algorithms() {
  // @@protoc_insertion_point(field_add:algorithm.v2.AlgorithmListResponse.algorithms)
  return algorithms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::AlgorithmInformation >&
AlgorithmListResponse::algorithms() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.AlgorithmListResponse.algorithms)
  return algorithms_;
}

// -------------------------------------------------------------------

// SmartMotionRegion

// repeated .algorithm.v2.Point detection_region_point = 1;
inline int SmartMotionRegion::detection_region_point_size() const {
  return detection_region_point_.size();
}
inline void SmartMotionRegion::clear_detection_region_point() {
  detection_region_point_.Clear();
}
inline ::algorithm::v2::Point* SmartMotionRegion::mutable_detection_region_point(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.SmartMotionRegion.detection_region_point)
  return detection_region_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Point >*
SmartMotionRegion::mutable_detection_region_point() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.SmartMotionRegion.detection_region_point)
  return &detection_region_point_;
}
inline const ::algorithm::v2::Point& SmartMotionRegion::detection_region_point(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionRegion.detection_region_point)
  return detection_region_point_.Get(index);
}
inline ::algorithm::v2::Point* SmartMotionRegion::add_detection_region_point() {
  // @@protoc_insertion_point(field_add:algorithm.v2.SmartMotionRegion.detection_region_point)
  return detection_region_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Point >&
SmartMotionRegion::detection_region_point() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.SmartMotionRegion.detection_region_point)
  return detection_region_point_;
}

// int32 wander_time_msecs = 2;
inline void SmartMotionRegion::clear_wander_time_msecs() {
  wander_time_msecs_ = 0;
}
inline ::google::protobuf::int32 SmartMotionRegion::wander_time_msecs() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionRegion.wander_time_msecs)
  return wander_time_msecs_;
}
inline void SmartMotionRegion::set_wander_time_msecs(::google::protobuf::int32 value) {
  
  wander_time_msecs_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.SmartMotionRegion.wander_time_msecs)
}

// int32 stand_time_msecs = 3;
inline void SmartMotionRegion::clear_stand_time_msecs() {
  stand_time_msecs_ = 0;
}
inline ::google::protobuf::int32 SmartMotionRegion::stand_time_msecs() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionRegion.stand_time_msecs)
  return stand_time_msecs_;
}
inline void SmartMotionRegion::set_stand_time_msecs(::google::protobuf::int32 value) {
  
  stand_time_msecs_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.SmartMotionRegion.stand_time_msecs)
}

// bool active = 4;
inline void SmartMotionRegion::clear_active() {
  active_ = false;
}
inline bool SmartMotionRegion::active() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionRegion.active)
  return active_;
}
inline void SmartMotionRegion::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.SmartMotionRegion.active)
}

// repeated .algorithm.v2.MotionDirection motion_direction = 5;
inline int SmartMotionRegion::motion_direction_size() const {
  return motion_direction_.size();
}
inline void SmartMotionRegion::clear_motion_direction() {
  motion_direction_.Clear();
}
inline ::algorithm::v2::MotionDirection SmartMotionRegion::motion_direction(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionRegion.motion_direction)
  return static_cast< ::algorithm::v2::MotionDirection >(motion_direction_.Get(index));
}
inline void SmartMotionRegion::set_motion_direction(int index, ::algorithm::v2::MotionDirection value) {
  motion_direction_.Set(index, value);
  // @@protoc_insertion_point(field_set:algorithm.v2.SmartMotionRegion.motion_direction)
}
inline void SmartMotionRegion::add_motion_direction(::algorithm::v2::MotionDirection value) {
  motion_direction_.Add(value);
  // @@protoc_insertion_point(field_add:algorithm.v2.SmartMotionRegion.motion_direction)
}
inline const ::google::protobuf::RepeatedField<int>&
SmartMotionRegion::motion_direction() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.SmartMotionRegion.motion_direction)
  return motion_direction_;
}
inline ::google::protobuf::RepeatedField<int>*
SmartMotionRegion::mutable_motion_direction() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.SmartMotionRegion.motion_direction)
  return &motion_direction_;
}

// -------------------------------------------------------------------

// SmartMotionAlgorithmParameters

// repeated .algorithm.v2.SmartMotionRegion regions = 1;
inline int SmartMotionAlgorithmParameters::regions_size() const {
  return regions_.size();
}
inline void SmartMotionAlgorithmParameters::clear_regions() {
  regions_.Clear();
}
inline ::algorithm::v2::SmartMotionRegion* SmartMotionAlgorithmParameters::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.SmartMotionAlgorithmParameters.regions)
  return regions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::algorithm::v2::SmartMotionRegion >*
SmartMotionAlgorithmParameters::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.SmartMotionAlgorithmParameters.regions)
  return &regions_;
}
inline const ::algorithm::v2::SmartMotionRegion& SmartMotionAlgorithmParameters::regions(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionAlgorithmParameters.regions)
  return regions_.Get(index);
}
inline ::algorithm::v2::SmartMotionRegion* SmartMotionAlgorithmParameters::add_regions() {
  // @@protoc_insertion_point(field_add:algorithm.v2.SmartMotionAlgorithmParameters.regions)
  return regions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::SmartMotionRegion >&
SmartMotionAlgorithmParameters::regions() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.SmartMotionAlgorithmParameters.regions)
  return regions_;
}

// .algorithm.v2.Rectangle min_region = 2;
inline bool SmartMotionAlgorithmParameters::has_min_region() const {
  return this != internal_default_instance() && min_region_ != nullptr;
}
inline void SmartMotionAlgorithmParameters::clear_min_region() {
  if (GetArenaNoVirtual() == nullptr && min_region_ != nullptr) {
    delete min_region_;
  }
  min_region_ = nullptr;
}
inline const ::algorithm::v2::Rectangle& SmartMotionAlgorithmParameters::min_region() const {
  const ::algorithm::v2::Rectangle* p = min_region_;
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionAlgorithmParameters.min_region)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::Rectangle*>(
      &::algorithm::v2::_Rectangle_default_instance_);
}
inline ::algorithm::v2::Rectangle* SmartMotionAlgorithmParameters::release_min_region() {
  // @@protoc_insertion_point(field_release:algorithm.v2.SmartMotionAlgorithmParameters.min_region)
  
  ::algorithm::v2::Rectangle* temp = min_region_;
  min_region_ = nullptr;
  return temp;
}
inline ::algorithm::v2::Rectangle* SmartMotionAlgorithmParameters::mutable_min_region() {
  
  if (min_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::Rectangle>(GetArenaNoVirtual());
    min_region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.SmartMotionAlgorithmParameters.min_region)
  return min_region_;
}
inline void SmartMotionAlgorithmParameters::set_allocated_min_region(::algorithm::v2::Rectangle* min_region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete min_region_;
  }
  if (min_region) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      min_region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_region, submessage_arena);
    }
    
  } else {
    
  }
  min_region_ = min_region;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.SmartMotionAlgorithmParameters.min_region)
}

// .algorithm.v2.Rectangle max_region = 3;
inline bool SmartMotionAlgorithmParameters::has_max_region() const {
  return this != internal_default_instance() && max_region_ != nullptr;
}
inline void SmartMotionAlgorithmParameters::clear_max_region() {
  if (GetArenaNoVirtual() == nullptr && max_region_ != nullptr) {
    delete max_region_;
  }
  max_region_ = nullptr;
}
inline const ::algorithm::v2::Rectangle& SmartMotionAlgorithmParameters::max_region() const {
  const ::algorithm::v2::Rectangle* p = max_region_;
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionAlgorithmParameters.max_region)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::Rectangle*>(
      &::algorithm::v2::_Rectangle_default_instance_);
}
inline ::algorithm::v2::Rectangle* SmartMotionAlgorithmParameters::release_max_region() {
  // @@protoc_insertion_point(field_release:algorithm.v2.SmartMotionAlgorithmParameters.max_region)
  
  ::algorithm::v2::Rectangle* temp = max_region_;
  max_region_ = nullptr;
  return temp;
}
inline ::algorithm::v2::Rectangle* SmartMotionAlgorithmParameters::mutable_max_region() {
  
  if (max_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::Rectangle>(GetArenaNoVirtual());
    max_region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.SmartMotionAlgorithmParameters.max_region)
  return max_region_;
}
inline void SmartMotionAlgorithmParameters::set_allocated_max_region(::algorithm::v2::Rectangle* max_region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete max_region_;
  }
  if (max_region) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_region, submessage_arena);
    }
    
  } else {
    
  }
  max_region_ = max_region;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.SmartMotionAlgorithmParameters.max_region)
}

// repeated .algorithm.v2.LineCrossRegion lines = 4;
inline int SmartMotionAlgorithmParameters::lines_size() const {
  return lines_.size();
}
inline void SmartMotionAlgorithmParameters::clear_lines() {
  lines_.Clear();
}
inline ::algorithm::v2::LineCrossRegion* SmartMotionAlgorithmParameters::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.SmartMotionAlgorithmParameters.lines)
  return lines_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LineCrossRegion >*
SmartMotionAlgorithmParameters::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.SmartMotionAlgorithmParameters.lines)
  return &lines_;
}
inline const ::algorithm::v2::LineCrossRegion& SmartMotionAlgorithmParameters::lines(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionAlgorithmParameters.lines)
  return lines_.Get(index);
}
inline ::algorithm::v2::LineCrossRegion* SmartMotionAlgorithmParameters::add_lines() {
  // @@protoc_insertion_point(field_add:algorithm.v2.SmartMotionAlgorithmParameters.lines)
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LineCrossRegion >&
SmartMotionAlgorithmParameters::lines() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.SmartMotionAlgorithmParameters.lines)
  return lines_;
}

// .algorithm.v2.Rectangle tracking_object = 5;
inline bool SmartMotionAlgorithmParameters::has_tracking_object() const {
  return this != internal_default_instance() && tracking_object_ != nullptr;
}
inline void SmartMotionAlgorithmParameters::clear_tracking_object() {
  if (GetArenaNoVirtual() == nullptr && tracking_object_ != nullptr) {
    delete tracking_object_;
  }
  tracking_object_ = nullptr;
}
inline const ::algorithm::v2::Rectangle& SmartMotionAlgorithmParameters::tracking_object() const {
  const ::algorithm::v2::Rectangle* p = tracking_object_;
  // @@protoc_insertion_point(field_get:algorithm.v2.SmartMotionAlgorithmParameters.tracking_object)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::Rectangle*>(
      &::algorithm::v2::_Rectangle_default_instance_);
}
inline ::algorithm::v2::Rectangle* SmartMotionAlgorithmParameters::release_tracking_object() {
  // @@protoc_insertion_point(field_release:algorithm.v2.SmartMotionAlgorithmParameters.tracking_object)
  
  ::algorithm::v2::Rectangle* temp = tracking_object_;
  tracking_object_ = nullptr;
  return temp;
}
inline ::algorithm::v2::Rectangle* SmartMotionAlgorithmParameters::mutable_tracking_object() {
  
  if (tracking_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::Rectangle>(GetArenaNoVirtual());
    tracking_object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.SmartMotionAlgorithmParameters.tracking_object)
  return tracking_object_;
}
inline void SmartMotionAlgorithmParameters::set_allocated_tracking_object(::algorithm::v2::Rectangle* tracking_object) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tracking_object_;
  }
  if (tracking_object) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracking_object = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tracking_object, submessage_arena);
    }
    
  } else {
    
  }
  tracking_object_ = tracking_object;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.SmartMotionAlgorithmParameters.tracking_object)
}

// -------------------------------------------------------------------

// LocationInformation

// float pan = 1;
inline void LocationInformation::clear_pan() {
  pan_ = 0;
}
inline float LocationInformation::pan() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.LocationInformation.pan)
  return pan_;
}
inline void LocationInformation::set_pan(float value) {
  
  pan_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.LocationInformation.pan)
}

// float tilt = 2;
inline void LocationInformation::clear_tilt() {
  tilt_ = 0;
}
inline float LocationInformation::tilt() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.LocationInformation.tilt)
  return tilt_;
}
inline void LocationInformation::set_tilt(float value) {
  
  tilt_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.LocationInformation.tilt)
}

// float zoom = 3;
inline void LocationInformation::clear_zoom() {
  zoom_ = 0;
}
inline float LocationInformation::zoom() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.LocationInformation.zoom)
  return zoom_;
}
inline void LocationInformation::set_zoom(float value) {
  
  zoom_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.LocationInformation.zoom)
}

// -------------------------------------------------------------------

// PanChangeAlgorithmParameters

// repeated .algorithm.v2.LocationInformation locationInformation = 1;
inline int PanChangeAlgorithmParameters::locationinformation_size() const {
  return locationinformation_.size();
}
inline void PanChangeAlgorithmParameters::clear_locationinformation() {
  locationinformation_.Clear();
}
inline ::algorithm::v2::LocationInformation* PanChangeAlgorithmParameters::mutable_locationinformation(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.PanChangeAlgorithmParameters.locationInformation)
  return locationinformation_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LocationInformation >*
PanChangeAlgorithmParameters::mutable_locationinformation() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.PanChangeAlgorithmParameters.locationInformation)
  return &locationinformation_;
}
inline const ::algorithm::v2::LocationInformation& PanChangeAlgorithmParameters::locationinformation(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.PanChangeAlgorithmParameters.locationInformation)
  return locationinformation_.Get(index);
}
inline ::algorithm::v2::LocationInformation* PanChangeAlgorithmParameters::add_locationinformation() {
  // @@protoc_insertion_point(field_add:algorithm.v2.PanChangeAlgorithmParameters.locationInformation)
  return locationinformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::LocationInformation >&
PanChangeAlgorithmParameters::locationinformation() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.PanChangeAlgorithmParameters.locationInformation)
  return locationinformation_;
}

// int64 intervalForCirculation = 2;
inline void PanChangeAlgorithmParameters::clear_intervalforcirculation() {
  intervalforcirculation_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PanChangeAlgorithmParameters::intervalforcirculation() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.PanChangeAlgorithmParameters.intervalForCirculation)
  return intervalforcirculation_;
}
inline void PanChangeAlgorithmParameters::set_intervalforcirculation(::google::protobuf::int64 value) {
  
  intervalforcirculation_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.PanChangeAlgorithmParameters.intervalForCirculation)
}

// -------------------------------------------------------------------

// PrivacyMaskingParameters

// -------------------------------------------------------------------

// FaceDetectionParameters

// -------------------------------------------------------------------

// AlgorithmParameters

// .algorithm.v2.SmartMotionAlgorithmParameters smart_parameters = 1;
inline bool AlgorithmParameters::has_smart_parameters() const {
  return parameters_case() == kSmartParameters;
}
inline void AlgorithmParameters::set_has_smart_parameters() {
  _oneof_case_[0] = kSmartParameters;
}
inline void AlgorithmParameters::clear_smart_parameters() {
  if (has_smart_parameters()) {
    delete parameters_.smart_parameters_;
    clear_has_parameters();
  }
}
inline ::algorithm::v2::SmartMotionAlgorithmParameters* AlgorithmParameters::release_smart_parameters() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmParameters.smart_parameters)
  if (has_smart_parameters()) {
    clear_has_parameters();
      ::algorithm::v2::SmartMotionAlgorithmParameters* temp = parameters_.smart_parameters_;
    parameters_.smart_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::algorithm::v2::SmartMotionAlgorithmParameters& AlgorithmParameters::smart_parameters() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.smart_parameters)
  return has_smart_parameters()
      ? *parameters_.smart_parameters_
      : *reinterpret_cast< ::algorithm::v2::SmartMotionAlgorithmParameters*>(&::algorithm::v2::_SmartMotionAlgorithmParameters_default_instance_);
}
inline ::algorithm::v2::SmartMotionAlgorithmParameters* AlgorithmParameters::mutable_smart_parameters() {
  if (!has_smart_parameters()) {
    clear_parameters();
    set_has_smart_parameters();
    parameters_.smart_parameters_ = CreateMaybeMessage< ::algorithm::v2::SmartMotionAlgorithmParameters >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmParameters.smart_parameters)
  return parameters_.smart_parameters_;
}

// .algorithm.v2.PanChangeAlgorithmParameters pan_change_parameters = 3;
inline bool AlgorithmParameters::has_pan_change_parameters() const {
  return parameters_case() == kPanChangeParameters;
}
inline void AlgorithmParameters::set_has_pan_change_parameters() {
  _oneof_case_[0] = kPanChangeParameters;
}
inline void AlgorithmParameters::clear_pan_change_parameters() {
  if (has_pan_change_parameters()) {
    delete parameters_.pan_change_parameters_;
    clear_has_parameters();
  }
}
inline ::algorithm::v2::PanChangeAlgorithmParameters* AlgorithmParameters::release_pan_change_parameters() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmParameters.pan_change_parameters)
  if (has_pan_change_parameters()) {
    clear_has_parameters();
      ::algorithm::v2::PanChangeAlgorithmParameters* temp = parameters_.pan_change_parameters_;
    parameters_.pan_change_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::algorithm::v2::PanChangeAlgorithmParameters& AlgorithmParameters::pan_change_parameters() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.pan_change_parameters)
  return has_pan_change_parameters()
      ? *parameters_.pan_change_parameters_
      : *reinterpret_cast< ::algorithm::v2::PanChangeAlgorithmParameters*>(&::algorithm::v2::_PanChangeAlgorithmParameters_default_instance_);
}
inline ::algorithm::v2::PanChangeAlgorithmParameters* AlgorithmParameters::mutable_pan_change_parameters() {
  if (!has_pan_change_parameters()) {
    clear_parameters();
    set_has_pan_change_parameters();
    parameters_.pan_change_parameters_ = CreateMaybeMessage< ::algorithm::v2::PanChangeAlgorithmParameters >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmParameters.pan_change_parameters)
  return parameters_.pan_change_parameters_;
}

// .algorithm.v2.FaceDetectionParameters detection_parameters = 6;
inline bool AlgorithmParameters::has_detection_parameters() const {
  return parameters_case() == kDetectionParameters;
}
inline void AlgorithmParameters::set_has_detection_parameters() {
  _oneof_case_[0] = kDetectionParameters;
}
inline void AlgorithmParameters::clear_detection_parameters() {
  if (has_detection_parameters()) {
    delete parameters_.detection_parameters_;
    clear_has_parameters();
  }
}
inline ::algorithm::v2::FaceDetectionParameters* AlgorithmParameters::release_detection_parameters() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmParameters.detection_parameters)
  if (has_detection_parameters()) {
    clear_has_parameters();
      ::algorithm::v2::FaceDetectionParameters* temp = parameters_.detection_parameters_;
    parameters_.detection_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::algorithm::v2::FaceDetectionParameters& AlgorithmParameters::detection_parameters() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.detection_parameters)
  return has_detection_parameters()
      ? *parameters_.detection_parameters_
      : *reinterpret_cast< ::algorithm::v2::FaceDetectionParameters*>(&::algorithm::v2::_FaceDetectionParameters_default_instance_);
}
inline ::algorithm::v2::FaceDetectionParameters* AlgorithmParameters::mutable_detection_parameters() {
  if (!has_detection_parameters()) {
    clear_parameters();
    set_has_detection_parameters();
    parameters_.detection_parameters_ = CreateMaybeMessage< ::algorithm::v2::FaceDetectionParameters >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmParameters.detection_parameters)
  return parameters_.detection_parameters_;
}

// .algorithm.v2.PreProcessing pre_processing = 7;
inline void AlgorithmParameters::clear_pre_processing() {
  pre_processing_ = 0;
}
inline ::algorithm::v2::PreProcessing AlgorithmParameters::pre_processing() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.pre_processing)
  return static_cast< ::algorithm::v2::PreProcessing >(pre_processing_);
}
inline void AlgorithmParameters::set_pre_processing(::algorithm::v2::PreProcessing value) {
  
  pre_processing_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParameters.pre_processing)
}

// bool video_stabilization = 8;
inline void AlgorithmParameters::clear_video_stabilization() {
  video_stabilization_ = false;
}
inline bool AlgorithmParameters::video_stabilization() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.video_stabilization)
  return video_stabilization_;
}
inline void AlgorithmParameters::set_video_stabilization(bool value) {
  
  video_stabilization_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParameters.video_stabilization)
}

// bool tamper_detection = 9;
inline void AlgorithmParameters::clear_tamper_detection() {
  tamper_detection_ = false;
}
inline bool AlgorithmParameters::tamper_detection() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.tamper_detection)
  return tamper_detection_;
}
inline void AlgorithmParameters::set_tamper_detection(bool value) {
  
  tamper_detection_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParameters.tamper_detection)
}

// bool privacy_masking = 10;
inline void AlgorithmParameters::clear_privacy_masking() {
  privacy_masking_ = false;
}
inline bool AlgorithmParameters::privacy_masking() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.privacy_masking)
  return privacy_masking_;
}
inline void AlgorithmParameters::set_privacy_masking(bool value) {
  
  privacy_masking_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParameters.privacy_masking)
}

// .algorithm.v2.RunMode run_mode = 11;
inline void AlgorithmParameters::clear_run_mode() {
  run_mode_ = 0;
}
inline ::algorithm::v2::RunMode AlgorithmParameters::run_mode() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.run_mode)
  return static_cast< ::algorithm::v2::RunMode >(run_mode_);
}
inline void AlgorithmParameters::set_run_mode(::algorithm::v2::RunMode value) {
  
  run_mode_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParameters.run_mode)
}

// float pre_processing_degree = 12;
inline void AlgorithmParameters::clear_pre_processing_degree() {
  pre_processing_degree_ = 0;
}
inline float AlgorithmParameters::pre_processing_degree() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParameters.pre_processing_degree)
  return pre_processing_degree_;
}
inline void AlgorithmParameters::set_pre_processing_degree(float value) {
  
  pre_processing_degree_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParameters.pre_processing_degree)
}

inline bool AlgorithmParameters::has_parameters() const {
  return parameters_case() != PARAMETERS_NOT_SET;
}
inline void AlgorithmParameters::clear_has_parameters() {
  _oneof_case_[0] = PARAMETERS_NOT_SET;
}
inline AlgorithmParameters::ParametersCase AlgorithmParameters::parameters_case() const {
  return AlgorithmParameters::ParametersCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AlgorithmParametersSetRequest

// .algorithm.v2.AlgorithmHead algorithm = 1;
inline bool AlgorithmParametersSetRequest::has_algorithm() const {
  return this != internal_default_instance() && algorithm_ != nullptr;
}
inline void AlgorithmParametersSetRequest::clear_algorithm() {
  if (GetArenaNoVirtual() == nullptr && algorithm_ != nullptr) {
    delete algorithm_;
  }
  algorithm_ = nullptr;
}
inline const ::algorithm::v2::AlgorithmHead& AlgorithmParametersSetRequest::algorithm() const {
  const ::algorithm::v2::AlgorithmHead* p = algorithm_;
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.algorithm)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::AlgorithmHead*>(
      &::algorithm::v2::_AlgorithmHead_default_instance_);
}
inline ::algorithm::v2::AlgorithmHead* AlgorithmParametersSetRequest::release_algorithm() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmParametersSetRequest.algorithm)
  
  ::algorithm::v2::AlgorithmHead* temp = algorithm_;
  algorithm_ = nullptr;
  return temp;
}
inline ::algorithm::v2::AlgorithmHead* AlgorithmParametersSetRequest::mutable_algorithm() {
  
  if (algorithm_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::AlgorithmHead>(GetArenaNoVirtual());
    algorithm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmParametersSetRequest.algorithm)
  return algorithm_;
}
inline void AlgorithmParametersSetRequest::set_allocated_algorithm(::algorithm::v2::AlgorithmHead* algorithm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete algorithm_;
  }
  if (algorithm) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      algorithm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, algorithm, submessage_arena);
    }
    
  } else {
    
  }
  algorithm_ = algorithm;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.AlgorithmParametersSetRequest.algorithm)
}

// .algorithm.v2.PreProcessing pre = 2;
inline bool AlgorithmParametersSetRequest::has_pre() const {
  return parameters_case() == kPre;
}
inline void AlgorithmParametersSetRequest::set_has_pre() {
  _oneof_case_[0] = kPre;
}
inline void AlgorithmParametersSetRequest::clear_pre() {
  if (has_pre()) {
    parameters_.pre_ = 0;
    clear_has_parameters();
  }
}
inline ::algorithm::v2::PreProcessing AlgorithmParametersSetRequest::pre() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.pre)
  if (has_pre()) {
    return static_cast< ::algorithm::v2::PreProcessing >(parameters_.pre_);
  }
  return static_cast< ::algorithm::v2::PreProcessing >(0);
}
inline void AlgorithmParametersSetRequest::set_pre(::algorithm::v2::PreProcessing value) {
  if (!has_pre()) {
    clear_parameters();
    set_has_pre();
  }
  parameters_.pre_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParametersSetRequest.pre)
}

// bool video_stabilization = 3;
inline bool AlgorithmParametersSetRequest::has_video_stabilization() const {
  return parameters_case() == kVideoStabilization;
}
inline void AlgorithmParametersSetRequest::set_has_video_stabilization() {
  _oneof_case_[0] = kVideoStabilization;
}
inline void AlgorithmParametersSetRequest::clear_video_stabilization() {
  if (has_video_stabilization()) {
    parameters_.video_stabilization_ = false;
    clear_has_parameters();
  }
}
inline bool AlgorithmParametersSetRequest::video_stabilization() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.video_stabilization)
  if (has_video_stabilization()) {
    return parameters_.video_stabilization_;
  }
  return false;
}
inline void AlgorithmParametersSetRequest::set_video_stabilization(bool value) {
  if (!has_video_stabilization()) {
    clear_parameters();
    set_has_video_stabilization();
  }
  parameters_.video_stabilization_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParametersSetRequest.video_stabilization)
}

// bool tamper_detection = 4;
inline bool AlgorithmParametersSetRequest::has_tamper_detection() const {
  return parameters_case() == kTamperDetection;
}
inline void AlgorithmParametersSetRequest::set_has_tamper_detection() {
  _oneof_case_[0] = kTamperDetection;
}
inline void AlgorithmParametersSetRequest::clear_tamper_detection() {
  if (has_tamper_detection()) {
    parameters_.tamper_detection_ = false;
    clear_has_parameters();
  }
}
inline bool AlgorithmParametersSetRequest::tamper_detection() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.tamper_detection)
  if (has_tamper_detection()) {
    return parameters_.tamper_detection_;
  }
  return false;
}
inline void AlgorithmParametersSetRequest::set_tamper_detection(bool value) {
  if (!has_tamper_detection()) {
    clear_parameters();
    set_has_tamper_detection();
  }
  parameters_.tamper_detection_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParametersSetRequest.tamper_detection)
}

// bool privacy_masking = 5;
inline bool AlgorithmParametersSetRequest::has_privacy_masking() const {
  return parameters_case() == kPrivacyMasking;
}
inline void AlgorithmParametersSetRequest::set_has_privacy_masking() {
  _oneof_case_[0] = kPrivacyMasking;
}
inline void AlgorithmParametersSetRequest::clear_privacy_masking() {
  if (has_privacy_masking()) {
    parameters_.privacy_masking_ = false;
    clear_has_parameters();
  }
}
inline bool AlgorithmParametersSetRequest::privacy_masking() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.privacy_masking)
  if (has_privacy_masking()) {
    return parameters_.privacy_masking_;
  }
  return false;
}
inline void AlgorithmParametersSetRequest::set_privacy_masking(bool value) {
  if (!has_privacy_masking()) {
    clear_parameters();
    set_has_privacy_masking();
  }
  parameters_.privacy_masking_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParametersSetRequest.privacy_masking)
}

// .algorithm.v2.RunMode run_mode = 6;
inline bool AlgorithmParametersSetRequest::has_run_mode() const {
  return parameters_case() == kRunMode;
}
inline void AlgorithmParametersSetRequest::set_has_run_mode() {
  _oneof_case_[0] = kRunMode;
}
inline void AlgorithmParametersSetRequest::clear_run_mode() {
  if (has_run_mode()) {
    parameters_.run_mode_ = 0;
    clear_has_parameters();
  }
}
inline ::algorithm::v2::RunMode AlgorithmParametersSetRequest::run_mode() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.run_mode)
  if (has_run_mode()) {
    return static_cast< ::algorithm::v2::RunMode >(parameters_.run_mode_);
  }
  return static_cast< ::algorithm::v2::RunMode >(0);
}
inline void AlgorithmParametersSetRequest::set_run_mode(::algorithm::v2::RunMode value) {
  if (!has_run_mode()) {
    clear_parameters();
    set_has_run_mode();
  }
  parameters_.run_mode_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParametersSetRequest.run_mode)
}

// float pre_processing_degree = 7;
inline bool AlgorithmParametersSetRequest::has_pre_processing_degree() const {
  return parameters_case() == kPreProcessingDegree;
}
inline void AlgorithmParametersSetRequest::set_has_pre_processing_degree() {
  _oneof_case_[0] = kPreProcessingDegree;
}
inline void AlgorithmParametersSetRequest::clear_pre_processing_degree() {
  if (has_pre_processing_degree()) {
    parameters_.pre_processing_degree_ = 0;
    clear_has_parameters();
  }
}
inline float AlgorithmParametersSetRequest::pre_processing_degree() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.pre_processing_degree)
  if (has_pre_processing_degree()) {
    return parameters_.pre_processing_degree_;
  }
  return 0;
}
inline void AlgorithmParametersSetRequest::set_pre_processing_degree(float value) {
  if (!has_pre_processing_degree()) {
    clear_parameters();
    set_has_pre_processing_degree();
  }
  parameters_.pre_processing_degree_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlgorithmParametersSetRequest.pre_processing_degree)
}

// .algorithm.v2.SmartMotionAlgorithmParameters smart_parameters = 8;
inline bool AlgorithmParametersSetRequest::has_smart_parameters() const {
  return parameters_case() == kSmartParameters;
}
inline void AlgorithmParametersSetRequest::set_has_smart_parameters() {
  _oneof_case_[0] = kSmartParameters;
}
inline void AlgorithmParametersSetRequest::clear_smart_parameters() {
  if (has_smart_parameters()) {
    delete parameters_.smart_parameters_;
    clear_has_parameters();
  }
}
inline ::algorithm::v2::SmartMotionAlgorithmParameters* AlgorithmParametersSetRequest::release_smart_parameters() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmParametersSetRequest.smart_parameters)
  if (has_smart_parameters()) {
    clear_has_parameters();
      ::algorithm::v2::SmartMotionAlgorithmParameters* temp = parameters_.smart_parameters_;
    parameters_.smart_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::algorithm::v2::SmartMotionAlgorithmParameters& AlgorithmParametersSetRequest::smart_parameters() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.smart_parameters)
  return has_smart_parameters()
      ? *parameters_.smart_parameters_
      : *reinterpret_cast< ::algorithm::v2::SmartMotionAlgorithmParameters*>(&::algorithm::v2::_SmartMotionAlgorithmParameters_default_instance_);
}
inline ::algorithm::v2::SmartMotionAlgorithmParameters* AlgorithmParametersSetRequest::mutable_smart_parameters() {
  if (!has_smart_parameters()) {
    clear_parameters();
    set_has_smart_parameters();
    parameters_.smart_parameters_ = CreateMaybeMessage< ::algorithm::v2::SmartMotionAlgorithmParameters >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmParametersSetRequest.smart_parameters)
  return parameters_.smart_parameters_;
}

// .algorithm.v2.PanChangeAlgorithmParameters pan_change_parameters = 10;
inline bool AlgorithmParametersSetRequest::has_pan_change_parameters() const {
  return parameters_case() == kPanChangeParameters;
}
inline void AlgorithmParametersSetRequest::set_has_pan_change_parameters() {
  _oneof_case_[0] = kPanChangeParameters;
}
inline void AlgorithmParametersSetRequest::clear_pan_change_parameters() {
  if (has_pan_change_parameters()) {
    delete parameters_.pan_change_parameters_;
    clear_has_parameters();
  }
}
inline ::algorithm::v2::PanChangeAlgorithmParameters* AlgorithmParametersSetRequest::release_pan_change_parameters() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmParametersSetRequest.pan_change_parameters)
  if (has_pan_change_parameters()) {
    clear_has_parameters();
      ::algorithm::v2::PanChangeAlgorithmParameters* temp = parameters_.pan_change_parameters_;
    parameters_.pan_change_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::algorithm::v2::PanChangeAlgorithmParameters& AlgorithmParametersSetRequest::pan_change_parameters() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.pan_change_parameters)
  return has_pan_change_parameters()
      ? *parameters_.pan_change_parameters_
      : *reinterpret_cast< ::algorithm::v2::PanChangeAlgorithmParameters*>(&::algorithm::v2::_PanChangeAlgorithmParameters_default_instance_);
}
inline ::algorithm::v2::PanChangeAlgorithmParameters* AlgorithmParametersSetRequest::mutable_pan_change_parameters() {
  if (!has_pan_change_parameters()) {
    clear_parameters();
    set_has_pan_change_parameters();
    parameters_.pan_change_parameters_ = CreateMaybeMessage< ::algorithm::v2::PanChangeAlgorithmParameters >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmParametersSetRequest.pan_change_parameters)
  return parameters_.pan_change_parameters_;
}

// .algorithm.v2.FaceDetectionParameters detection_parameters = 11;
inline bool AlgorithmParametersSetRequest::has_detection_parameters() const {
  return parameters_case() == kDetectionParameters;
}
inline void AlgorithmParametersSetRequest::set_has_detection_parameters() {
  _oneof_case_[0] = kDetectionParameters;
}
inline void AlgorithmParametersSetRequest::clear_detection_parameters() {
  if (has_detection_parameters()) {
    delete parameters_.detection_parameters_;
    clear_has_parameters();
  }
}
inline ::algorithm::v2::FaceDetectionParameters* AlgorithmParametersSetRequest::release_detection_parameters() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlgorithmParametersSetRequest.detection_parameters)
  if (has_detection_parameters()) {
    clear_has_parameters();
      ::algorithm::v2::FaceDetectionParameters* temp = parameters_.detection_parameters_;
    parameters_.detection_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::algorithm::v2::FaceDetectionParameters& AlgorithmParametersSetRequest::detection_parameters() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlgorithmParametersSetRequest.detection_parameters)
  return has_detection_parameters()
      ? *parameters_.detection_parameters_
      : *reinterpret_cast< ::algorithm::v2::FaceDetectionParameters*>(&::algorithm::v2::_FaceDetectionParameters_default_instance_);
}
inline ::algorithm::v2::FaceDetectionParameters* AlgorithmParametersSetRequest::mutable_detection_parameters() {
  if (!has_detection_parameters()) {
    clear_parameters();
    set_has_detection_parameters();
    parameters_.detection_parameters_ = CreateMaybeMessage< ::algorithm::v2::FaceDetectionParameters >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlgorithmParametersSetRequest.detection_parameters)
  return parameters_.detection_parameters_;
}

inline bool AlgorithmParametersSetRequest::has_parameters() const {
  return parameters_case() != PARAMETERS_NOT_SET;
}
inline void AlgorithmParametersSetRequest::clear_has_parameters() {
  _oneof_case_[0] = PARAMETERS_NOT_SET;
}
inline AlgorithmParametersSetRequest::ParametersCase AlgorithmParametersSetRequest::parameters_case() const {
  return AlgorithmParametersSetRequest::ParametersCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Point

// float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.Point.x)
}

// float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.Point.y)
}

// -------------------------------------------------------------------

// LineCrossRegion

// .algorithm.v2.Point pt1 = 1;
inline bool LineCrossRegion::has_pt1() const {
  return this != internal_default_instance() && pt1_ != nullptr;
}
inline void LineCrossRegion::clear_pt1() {
  if (GetArenaNoVirtual() == nullptr && pt1_ != nullptr) {
    delete pt1_;
  }
  pt1_ = nullptr;
}
inline const ::algorithm::v2::Point& LineCrossRegion::pt1() const {
  const ::algorithm::v2::Point* p = pt1_;
  // @@protoc_insertion_point(field_get:algorithm.v2.LineCrossRegion.pt1)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::Point*>(
      &::algorithm::v2::_Point_default_instance_);
}
inline ::algorithm::v2::Point* LineCrossRegion::release_pt1() {
  // @@protoc_insertion_point(field_release:algorithm.v2.LineCrossRegion.pt1)
  
  ::algorithm::v2::Point* temp = pt1_;
  pt1_ = nullptr;
  return temp;
}
inline ::algorithm::v2::Point* LineCrossRegion::mutable_pt1() {
  
  if (pt1_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::Point>(GetArenaNoVirtual());
    pt1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.LineCrossRegion.pt1)
  return pt1_;
}
inline void LineCrossRegion::set_allocated_pt1(::algorithm::v2::Point* pt1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pt1_;
  }
  if (pt1) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pt1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt1, submessage_arena);
    }
    
  } else {
    
  }
  pt1_ = pt1;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.LineCrossRegion.pt1)
}

// .algorithm.v2.Point pt2 = 2;
inline bool LineCrossRegion::has_pt2() const {
  return this != internal_default_instance() && pt2_ != nullptr;
}
inline void LineCrossRegion::clear_pt2() {
  if (GetArenaNoVirtual() == nullptr && pt2_ != nullptr) {
    delete pt2_;
  }
  pt2_ = nullptr;
}
inline const ::algorithm::v2::Point& LineCrossRegion::pt2() const {
  const ::algorithm::v2::Point* p = pt2_;
  // @@protoc_insertion_point(field_get:algorithm.v2.LineCrossRegion.pt2)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::Point*>(
      &::algorithm::v2::_Point_default_instance_);
}
inline ::algorithm::v2::Point* LineCrossRegion::release_pt2() {
  // @@protoc_insertion_point(field_release:algorithm.v2.LineCrossRegion.pt2)
  
  ::algorithm::v2::Point* temp = pt2_;
  pt2_ = nullptr;
  return temp;
}
inline ::algorithm::v2::Point* LineCrossRegion::mutable_pt2() {
  
  if (pt2_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::Point>(GetArenaNoVirtual());
    pt2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.LineCrossRegion.pt2)
  return pt2_;
}
inline void LineCrossRegion::set_allocated_pt2(::algorithm::v2::Point* pt2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pt2_;
  }
  if (pt2) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pt2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt2, submessage_arena);
    }
    
  } else {
    
  }
  pt2_ = pt2;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.LineCrossRegion.pt2)
}

// bool active = 3;
inline void LineCrossRegion::clear_active() {
  active_ = false;
}
inline bool LineCrossRegion::active() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.LineCrossRegion.active)
  return active_;
}
inline void LineCrossRegion::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.LineCrossRegion.active)
}

// -------------------------------------------------------------------

// Rectangle

// .algorithm.v2.Point top_left = 1;
inline bool Rectangle::has_top_left() const {
  return this != internal_default_instance() && top_left_ != nullptr;
}
inline void Rectangle::clear_top_left() {
  if (GetArenaNoVirtual() == nullptr && top_left_ != nullptr) {
    delete top_left_;
  }
  top_left_ = nullptr;
}
inline const ::algorithm::v2::Point& Rectangle::top_left() const {
  const ::algorithm::v2::Point* p = top_left_;
  // @@protoc_insertion_point(field_get:algorithm.v2.Rectangle.top_left)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::Point*>(
      &::algorithm::v2::_Point_default_instance_);
}
inline ::algorithm::v2::Point* Rectangle::release_top_left() {
  // @@protoc_insertion_point(field_release:algorithm.v2.Rectangle.top_left)
  
  ::algorithm::v2::Point* temp = top_left_;
  top_left_ = nullptr;
  return temp;
}
inline ::algorithm::v2::Point* Rectangle::mutable_top_left() {
  
  if (top_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::Point>(GetArenaNoVirtual());
    top_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.Rectangle.top_left)
  return top_left_;
}
inline void Rectangle::set_allocated_top_left(::algorithm::v2::Point* top_left) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete top_left_;
  }
  if (top_left) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      top_left = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, top_left, submessage_arena);
    }
    
  } else {
    
  }
  top_left_ = top_left;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.Rectangle.top_left)
}

// .algorithm.v2.Point bottom_right = 2;
inline bool Rectangle::has_bottom_right() const {
  return this != internal_default_instance() && bottom_right_ != nullptr;
}
inline void Rectangle::clear_bottom_right() {
  if (GetArenaNoVirtual() == nullptr && bottom_right_ != nullptr) {
    delete bottom_right_;
  }
  bottom_right_ = nullptr;
}
inline const ::algorithm::v2::Point& Rectangle::bottom_right() const {
  const ::algorithm::v2::Point* p = bottom_right_;
  // @@protoc_insertion_point(field_get:algorithm.v2.Rectangle.bottom_right)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::Point*>(
      &::algorithm::v2::_Point_default_instance_);
}
inline ::algorithm::v2::Point* Rectangle::release_bottom_right() {
  // @@protoc_insertion_point(field_release:algorithm.v2.Rectangle.bottom_right)
  
  ::algorithm::v2::Point* temp = bottom_right_;
  bottom_right_ = nullptr;
  return temp;
}
inline ::algorithm::v2::Point* Rectangle::mutable_bottom_right() {
  
  if (bottom_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::Point>(GetArenaNoVirtual());
    bottom_right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.Rectangle.bottom_right)
  return bottom_right_;
}
inline void Rectangle::set_allocated_bottom_right(::algorithm::v2::Point* bottom_right) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bottom_right_;
  }
  if (bottom_right) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bottom_right = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bottom_right, submessage_arena);
    }
    
  } else {
    
  }
  bottom_right_ = bottom_right;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.Rectangle.bottom_right)
}

// -------------------------------------------------------------------

// DetectedObject

// .algorithm.v2.Rectangle bounding_box = 1;
inline bool DetectedObject::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != nullptr;
}
inline void DetectedObject::clear_bounding_box() {
  if (GetArenaNoVirtual() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
}
inline const ::algorithm::v2::Rectangle& DetectedObject::bounding_box() const {
  const ::algorithm::v2::Rectangle* p = bounding_box_;
  // @@protoc_insertion_point(field_get:algorithm.v2.DetectedObject.bounding_box)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::Rectangle*>(
      &::algorithm::v2::_Rectangle_default_instance_);
}
inline ::algorithm::v2::Rectangle* DetectedObject::release_bounding_box() {
  // @@protoc_insertion_point(field_release:algorithm.v2.DetectedObject.bounding_box)
  
  ::algorithm::v2::Rectangle* temp = bounding_box_;
  bounding_box_ = nullptr;
  return temp;
}
inline ::algorithm::v2::Rectangle* DetectedObject::mutable_bounding_box() {
  
  if (bounding_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::Rectangle>(GetArenaNoVirtual());
    bounding_box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.DetectedObject.bounding_box)
  return bounding_box_;
}
inline void DetectedObject::set_allocated_bounding_box(::algorithm::v2::Rectangle* bounding_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bounding_box_;
  }
  if (bounding_box) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounding_box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.DetectedObject.bounding_box)
}

// .algorithm.v2.DetectedObject.ObjectType object_type = 2;
inline void DetectedObject::clear_object_type() {
  object_type_ = 0;
}
inline ::algorithm::v2::DetectedObject_ObjectType DetectedObject::object_type() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.DetectedObject.object_type)
  return static_cast< ::algorithm::v2::DetectedObject_ObjectType >(object_type_);
}
inline void DetectedObject::set_object_type(::algorithm::v2::DetectedObject_ObjectType value) {
  
  object_type_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.DetectedObject.object_type)
}

// .algorithm.v2.DetectedObject.EventType event = 3;
inline void DetectedObject::clear_event() {
  event_ = 0;
}
inline ::algorithm::v2::DetectedObject_EventType DetectedObject::event() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.DetectedObject.event)
  return static_cast< ::algorithm::v2::DetectedObject_EventType >(event_);
}
inline void DetectedObject::set_event(::algorithm::v2::DetectedObject_EventType value) {
  
  event_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.DetectedObject.event)
}

// int32 object_counter = 4;
inline bool DetectedObject::has_object_counter() const {
  return object_id_case() == kObjectCounter;
}
inline void DetectedObject::set_has_object_counter() {
  _oneof_case_[0] = kObjectCounter;
}
inline void DetectedObject::clear_object_counter() {
  if (has_object_counter()) {
    object_id_.object_counter_ = 0;
    clear_has_object_id();
  }
}
inline ::google::protobuf::int32 DetectedObject::object_counter() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.DetectedObject.object_counter)
  if (has_object_counter()) {
    return object_id_.object_counter_;
  }
  return 0;
}
inline void DetectedObject::set_object_counter(::google::protobuf::int32 value) {
  if (!has_object_counter()) {
    clear_object_id();
    set_has_object_counter();
  }
  object_id_.object_counter_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.DetectedObject.object_counter)
}

// string object_guid = 5;
inline bool DetectedObject::has_object_guid() const {
  return object_id_case() == kObjectGuid;
}
inline void DetectedObject::set_has_object_guid() {
  _oneof_case_[0] = kObjectGuid;
}
inline void DetectedObject::clear_object_guid() {
  if (has_object_guid()) {
    object_id_.object_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_object_id();
  }
}
inline const ::std::string& DetectedObject::object_guid() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.DetectedObject.object_guid)
  if (has_object_guid()) {
    return object_id_.object_guid_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DetectedObject::set_object_guid(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:algorithm.v2.DetectedObject.object_guid)
  if (!has_object_guid()) {
    clear_object_id();
    set_has_object_guid();
    object_id_.object_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  object_id_.object_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.DetectedObject.object_guid)
}
#if LANG_CXX11
inline void DetectedObject::set_object_guid(::std::string&& value) {
  // @@protoc_insertion_point(field_set:algorithm.v2.DetectedObject.object_guid)
  if (!has_object_guid()) {
    clear_object_id();
    set_has_object_guid();
    object_id_.object_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  object_id_.object_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.DetectedObject.object_guid)
}
#endif
inline void DetectedObject::set_object_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_object_guid()) {
    clear_object_id();
    set_has_object_guid();
    object_id_.object_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  object_id_.object_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.DetectedObject.object_guid)
}
inline void DetectedObject::set_object_guid(const char* value, size_t size) {
  if (!has_object_guid()) {
    clear_object_id();
    set_has_object_guid();
    object_id_.object_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  object_id_.object_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.DetectedObject.object_guid)
}
inline ::std::string* DetectedObject::mutable_object_guid() {
  if (!has_object_guid()) {
    clear_object_id();
    set_has_object_guid();
    object_id_.object_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.DetectedObject.object_guid)
  return object_id_.object_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectedObject::release_object_guid() {
  // @@protoc_insertion_point(field_release:algorithm.v2.DetectedObject.object_guid)
  if (has_object_guid()) {
    clear_has_object_id();
    return object_id_.object_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void DetectedObject::set_allocated_object_guid(::std::string* object_guid) {
  if (has_object_id()) {
    clear_object_id();
  }
  if (object_guid != nullptr) {
    set_has_object_guid();
    object_id_.object_guid_.UnsafeSetDefault(object_guid);
  }
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.DetectedObject.object_guid)
}

// .algorithm.v2.DetectedObject.ObjectColor object_color = 6;
inline void DetectedObject::clear_object_color() {
  object_color_ = 0;
}
inline ::algorithm::v2::DetectedObject_ObjectColor DetectedObject::object_color() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.DetectedObject.object_color)
  return static_cast< ::algorithm::v2::DetectedObject_ObjectColor >(object_color_);
}
inline void DetectedObject::set_object_color(::algorithm::v2::DetectedObject_ObjectColor value) {
  
  object_color_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.DetectedObject.object_color)
}

// .algorithm.v2.MotionDirection object_direction = 7;
inline void DetectedObject::clear_object_direction() {
  object_direction_ = 0;
}
inline ::algorithm::v2::MotionDirection DetectedObject::object_direction() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.DetectedObject.object_direction)
  return static_cast< ::algorithm::v2::MotionDirection >(object_direction_);
}
inline void DetectedObject::set_object_direction(::algorithm::v2::MotionDirection value) {
  
  object_direction_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.DetectedObject.object_direction)
}

inline bool DetectedObject::has_object_id() const {
  return object_id_case() != OBJECT_ID_NOT_SET;
}
inline void DetectedObject::clear_has_object_id() {
  _oneof_case_[0] = OBJECT_ID_NOT_SET;
}
inline DetectedObject::ObjectIdCase DetectedObject::object_id_case() const {
  return DetectedObject::ObjectIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScreenshotInfo

// int32 channelId = 1;
inline void ScreenshotInfo::clear_channelid() {
  channelid_ = 0;
}
inline ::google::protobuf::int32 ScreenshotInfo::channelid() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.ScreenshotInfo.channelId)
  return channelid_;
}
inline void ScreenshotInfo::set_channelid(::google::protobuf::int32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.ScreenshotInfo.channelId)
}

// int32 quality = 2;
inline void ScreenshotInfo::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 ScreenshotInfo::quality() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.ScreenshotInfo.quality)
  return quality_;
}
inline void ScreenshotInfo::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.ScreenshotInfo.quality)
}

// float fps = 3;
inline void ScreenshotInfo::clear_fps() {
  fps_ = 0;
}
inline float ScreenshotInfo::fps() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.ScreenshotInfo.fps)
  return fps_;
}
inline void ScreenshotInfo::set_fps(float value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.ScreenshotInfo.fps)
}

// -------------------------------------------------------------------

// ScreenFrame

// bytes frame = 1;
inline void ScreenFrame::clear_frame() {
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenFrame::frame() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.ScreenFrame.frame)
  return frame_.GetNoArena();
}
inline void ScreenFrame::set_frame(const ::std::string& value) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.ScreenFrame.frame)
}
#if LANG_CXX11
inline void ScreenFrame::set_frame(::std::string&& value) {
  
  frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.ScreenFrame.frame)
}
#endif
inline void ScreenFrame::set_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.ScreenFrame.frame)
}
inline void ScreenFrame::set_frame(const void* value, size_t size) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.ScreenFrame.frame)
}
inline ::std::string* ScreenFrame::mutable_frame() {
  
  // @@protoc_insertion_point(field_mutable:algorithm.v2.ScreenFrame.frame)
  return frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenFrame::release_frame() {
  // @@protoc_insertion_point(field_release:algorithm.v2.ScreenFrame.frame)
  
  return frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenFrame::set_allocated_frame(::std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.ScreenFrame.frame)
}

// int32 quality = 2;
inline void ScreenFrame::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 ScreenFrame::quality() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.ScreenFrame.quality)
  return quality_;
}
inline void ScreenFrame::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.ScreenFrame.quality)
}

// int64 ts = 3;
inline void ScreenFrame::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ScreenFrame::ts() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.ScreenFrame.ts)
  return ts_;
}
inline void ScreenFrame::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.ScreenFrame.ts)
}

// string metadata = 4;
inline void ScreenFrame::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenFrame::metadata() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.ScreenFrame.metadata)
  return metadata_.GetNoArena();
}
inline void ScreenFrame::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.ScreenFrame.metadata)
}
#if LANG_CXX11
inline void ScreenFrame::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.ScreenFrame.metadata)
}
#endif
inline void ScreenFrame::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.ScreenFrame.metadata)
}
inline void ScreenFrame::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.ScreenFrame.metadata)
}
inline ::std::string* ScreenFrame::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:algorithm.v2.ScreenFrame.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenFrame::release_metadata() {
  // @@protoc_insertion_point(field_release:algorithm.v2.ScreenFrame.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenFrame::set_allocated_metadata(::std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.ScreenFrame.metadata)
}

// -------------------------------------------------------------------

// AlarmReqAdvancedParameters

// bool enabled = 1;
inline void AlarmReqAdvancedParameters::clear_enabled() {
  enabled_ = false;
}
inline bool AlarmReqAdvancedParameters::enabled() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqAdvancedParameters.enabled)
  return enabled_;
}
inline void AlarmReqAdvancedParameters::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlarmReqAdvancedParameters.enabled)
}

// int32 suppressInterval = 2;
inline void AlarmReqAdvancedParameters::clear_suppressinterval() {
  suppressinterval_ = 0;
}
inline ::google::protobuf::int32 AlarmReqAdvancedParameters::suppressinterval() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqAdvancedParameters.suppressInterval)
  return suppressinterval_;
}
inline void AlarmReqAdvancedParameters::set_suppressinterval(::google::protobuf::int32 value) {
  
  suppressinterval_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlarmReqAdvancedParameters.suppressInterval)
}

// int32 alarmQueueLength = 3;
inline void AlarmReqAdvancedParameters::clear_alarmqueuelength() {
  alarmqueuelength_ = 0;
}
inline ::google::protobuf::int32 AlarmReqAdvancedParameters::alarmqueuelength() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqAdvancedParameters.alarmQueueLength)
  return alarmqueuelength_;
}
inline void AlarmReqAdvancedParameters::set_alarmqueuelength(::google::protobuf::int32 value) {
  
  alarmqueuelength_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlarmReqAdvancedParameters.alarmQueueLength)
}

// bool smartSnapshot = 4;
inline void AlarmReqAdvancedParameters::clear_smartsnapshot() {
  smartsnapshot_ = false;
}
inline bool AlarmReqAdvancedParameters::smartsnapshot() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqAdvancedParameters.smartSnapshot)
  return smartsnapshot_;
}
inline void AlarmReqAdvancedParameters::set_smartsnapshot(bool value) {
  
  smartsnapshot_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlarmReqAdvancedParameters.smartSnapshot)
}

// int32 smartSnapshotInterval = 5;
inline void AlarmReqAdvancedParameters::clear_smartsnapshotinterval() {
  smartsnapshotinterval_ = 0;
}
inline ::google::protobuf::int32 AlarmReqAdvancedParameters::smartsnapshotinterval() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqAdvancedParameters.smartSnapshotInterval)
  return smartsnapshotinterval_;
}
inline void AlarmReqAdvancedParameters::set_smartsnapshotinterval(::google::protobuf::int32 value) {
  
  smartsnapshotinterval_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlarmReqAdvancedParameters.smartSnapshotInterval)
}

// -------------------------------------------------------------------

// AlarmReqInfo

// string filter = 1;
inline void AlarmReqInfo::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmReqInfo::filter() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqInfo.filter)
  return filter_.GetNoArena();
}
inline void AlarmReqInfo::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.AlarmReqInfo.filter)
}
#if LANG_CXX11
inline void AlarmReqInfo::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.AlarmReqInfo.filter)
}
#endif
inline void AlarmReqInfo::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.AlarmReqInfo.filter)
}
inline void AlarmReqInfo::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.AlarmReqInfo.filter)
}
inline ::std::string* AlarmReqInfo::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlarmReqInfo.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmReqInfo::release_filter() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlarmReqInfo.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmReqInfo::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.AlarmReqInfo.filter)
}

// int32 channel = 2;
inline void AlarmReqInfo::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 AlarmReqInfo::channel() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqInfo.channel)
  return channel_;
}
inline void AlarmReqInfo::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlarmReqInfo.channel)
}

// int32 intervalMsecs = 3;
inline void AlarmReqInfo::clear_intervalmsecs() {
  intervalmsecs_ = 0;
}
inline ::google::protobuf::int32 AlarmReqInfo::intervalmsecs() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqInfo.intervalMsecs)
  return intervalmsecs_;
}
inline void AlarmReqInfo::set_intervalmsecs(::google::protobuf::int32 value) {
  
  intervalmsecs_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.AlarmReqInfo.intervalMsecs)
}

// .algorithm.v2.AlarmReqAdvancedParameters advancedParams = 4;
inline bool AlarmReqInfo::has_advancedparams() const {
  return this != internal_default_instance() && advancedparams_ != nullptr;
}
inline void AlarmReqInfo::clear_advancedparams() {
  if (GetArenaNoVirtual() == nullptr && advancedparams_ != nullptr) {
    delete advancedparams_;
  }
  advancedparams_ = nullptr;
}
inline const ::algorithm::v2::AlarmReqAdvancedParameters& AlarmReqInfo::advancedparams() const {
  const ::algorithm::v2::AlarmReqAdvancedParameters* p = advancedparams_;
  // @@protoc_insertion_point(field_get:algorithm.v2.AlarmReqInfo.advancedParams)
  return p != nullptr ? *p : *reinterpret_cast<const ::algorithm::v2::AlarmReqAdvancedParameters*>(
      &::algorithm::v2::_AlarmReqAdvancedParameters_default_instance_);
}
inline ::algorithm::v2::AlarmReqAdvancedParameters* AlarmReqInfo::release_advancedparams() {
  // @@protoc_insertion_point(field_release:algorithm.v2.AlarmReqInfo.advancedParams)
  
  ::algorithm::v2::AlarmReqAdvancedParameters* temp = advancedparams_;
  advancedparams_ = nullptr;
  return temp;
}
inline ::algorithm::v2::AlarmReqAdvancedParameters* AlarmReqInfo::mutable_advancedparams() {
  
  if (advancedparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::algorithm::v2::AlarmReqAdvancedParameters>(GetArenaNoVirtual());
    advancedparams_ = p;
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.AlarmReqInfo.advancedParams)
  return advancedparams_;
}
inline void AlarmReqInfo::set_allocated_advancedparams(::algorithm::v2::AlarmReqAdvancedParameters* advancedparams) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete advancedparams_;
  }
  if (advancedparams) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      advancedparams = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, advancedparams, submessage_arena);
    }
    
  } else {
    
  }
  advancedparams_ = advancedparams;
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.AlarmReqInfo.advancedParams)
}

// -------------------------------------------------------------------

// Alarm

// repeated string key = 1;
inline int Alarm::key_size() const {
  return key_.size();
}
inline void Alarm::clear_key() {
  key_.Clear();
}
inline const ::std::string& Alarm::key(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.Alarm.key)
  return key_.Get(index);
}
inline ::std::string* Alarm::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.Alarm.key)
  return key_.Mutable(index);
}
inline void Alarm::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:algorithm.v2.Alarm.key)
  key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Alarm::set_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:algorithm.v2.Alarm.key)
  key_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Alarm::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:algorithm.v2.Alarm.key)
}
inline void Alarm::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.Alarm.key)
}
inline ::std::string* Alarm::add_key() {
  // @@protoc_insertion_point(field_add_mutable:algorithm.v2.Alarm.key)
  return key_.Add();
}
inline void Alarm::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:algorithm.v2.Alarm.key)
}
#if LANG_CXX11
inline void Alarm::add_key(::std::string&& value) {
  key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:algorithm.v2.Alarm.key)
}
#endif
inline void Alarm::add_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:algorithm.v2.Alarm.key)
}
inline void Alarm::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:algorithm.v2.Alarm.key)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Alarm::key() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.Alarm.key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Alarm::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.Alarm.key)
  return &key_;
}

// repeated string value = 2;
inline int Alarm::value_size() const {
  return value_.size();
}
inline void Alarm::clear_value() {
  value_.Clear();
}
inline const ::std::string& Alarm::value(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.Alarm.value)
  return value_.Get(index);
}
inline ::std::string* Alarm::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.Alarm.value)
  return value_.Mutable(index);
}
inline void Alarm::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:algorithm.v2.Alarm.value)
  value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Alarm::set_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:algorithm.v2.Alarm.value)
  value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Alarm::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:algorithm.v2.Alarm.value)
}
inline void Alarm::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.Alarm.value)
}
inline ::std::string* Alarm::add_value() {
  // @@protoc_insertion_point(field_add_mutable:algorithm.v2.Alarm.value)
  return value_.Add();
}
inline void Alarm::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:algorithm.v2.Alarm.value)
}
#if LANG_CXX11
inline void Alarm::add_value(::std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:algorithm.v2.Alarm.value)
}
#endif
inline void Alarm::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:algorithm.v2.Alarm.value)
}
inline void Alarm::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:algorithm.v2.Alarm.value)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Alarm::value() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.Alarm.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Alarm::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.Alarm.value)
  return &value_;
}

// string type = 3;
inline void Alarm::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alarm::type() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.Alarm.type)
  return type_.GetNoArena();
}
inline void Alarm::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.Alarm.type)
}
#if LANG_CXX11
inline void Alarm::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.Alarm.type)
}
#endif
inline void Alarm::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.Alarm.type)
}
inline void Alarm::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.Alarm.type)
}
inline ::std::string* Alarm::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:algorithm.v2.Alarm.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alarm::release_type() {
  // @@protoc_insertion_point(field_release:algorithm.v2.Alarm.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alarm::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.Alarm.type)
}

// repeated .algorithm.v2.DetectedObject detected_object = 4;
inline int Alarm::detected_object_size() const {
  return detected_object_.size();
}
inline void Alarm::clear_detected_object() {
  detected_object_.Clear();
}
inline ::algorithm::v2::DetectedObject* Alarm::mutable_detected_object(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.Alarm.detected_object)
  return detected_object_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::algorithm::v2::DetectedObject >*
Alarm::mutable_detected_object() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.Alarm.detected_object)
  return &detected_object_;
}
inline const ::algorithm::v2::DetectedObject& Alarm::detected_object(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.Alarm.detected_object)
  return detected_object_.Get(index);
}
inline ::algorithm::v2::DetectedObject* Alarm::add_detected_object() {
  // @@protoc_insertion_point(field_add:algorithm.v2.Alarm.detected_object)
  return detected_object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::DetectedObject >&
Alarm::detected_object() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.Alarm.detected_object)
  return detected_object_;
}

// -------------------------------------------------------------------

// Alarms

// repeated .algorithm.v2.Alarm alarms = 1;
inline int Alarms::alarms_size() const {
  return alarms_.size();
}
inline void Alarms::clear_alarms() {
  alarms_.Clear();
}
inline ::algorithm::v2::Alarm* Alarms::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:algorithm.v2.Alarms.alarms)
  return alarms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Alarm >*
Alarms::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:algorithm.v2.Alarms.alarms)
  return &alarms_;
}
inline const ::algorithm::v2::Alarm& Alarms::alarms(int index) const {
  // @@protoc_insertion_point(field_get:algorithm.v2.Alarms.alarms)
  return alarms_.Get(index);
}
inline ::algorithm::v2::Alarm* Alarms::add_alarms() {
  // @@protoc_insertion_point(field_add:algorithm.v2.Alarms.alarms)
  return alarms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::algorithm::v2::Alarm >&
Alarms::alarms() const {
  // @@protoc_insertion_point(field_list:algorithm.v2.Alarms.alarms)
  return alarms_;
}

// int64 ts = 2;
inline void Alarms::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Alarms::ts() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.Alarms.ts)
  return ts_;
}
inline void Alarms::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.Alarms.ts)
}

// -------------------------------------------------------------------

// FeatureIPVideoSource

// string url = 1;
inline void FeatureIPVideoSource::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureIPVideoSource::url() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.FeatureIPVideoSource.url)
  return url_.GetNoArena();
}
inline void FeatureIPVideoSource::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.FeatureIPVideoSource.url)
}
#if LANG_CXX11
inline void FeatureIPVideoSource::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.FeatureIPVideoSource.url)
}
#endif
inline void FeatureIPVideoSource::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.FeatureIPVideoSource.url)
}
inline void FeatureIPVideoSource::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.FeatureIPVideoSource.url)
}
inline ::std::string* FeatureIPVideoSource::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:algorithm.v2.FeatureIPVideoSource.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureIPVideoSource::release_url() {
  // @@protoc_insertion_point(field_release:algorithm.v2.FeatureIPVideoSource.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureIPVideoSource::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.FeatureIPVideoSource.url)
}

// .algorithm.v2.FeatureIPVideoSource.Transport transport = 2;
inline void FeatureIPVideoSource::clear_transport() {
  transport_ = 0;
}
inline ::algorithm::v2::FeatureIPVideoSource_Transport FeatureIPVideoSource::transport() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.FeatureIPVideoSource.transport)
  return static_cast< ::algorithm::v2::FeatureIPVideoSource_Transport >(transport_);
}
inline void FeatureIPVideoSource::set_transport(::algorithm::v2::FeatureIPVideoSource_Transport value) {
  
  transport_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.FeatureIPVideoSource.transport)
}

// int32 buffer_size = 3;
inline void FeatureIPVideoSource::clear_buffer_size() {
  buffer_size_ = 0;
}
inline ::google::protobuf::int32 FeatureIPVideoSource::buffer_size() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.FeatureIPVideoSource.buffer_size)
  return buffer_size_;
}
inline void FeatureIPVideoSource::set_buffer_size(::google::protobuf::int32 value) {
  
  buffer_size_ = value;
  // @@protoc_insertion_point(field_set:algorithm.v2.FeatureIPVideoSource.buffer_size)
}

// -------------------------------------------------------------------

// FeatureCustom

// string key = 1;
inline void FeatureCustom::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureCustom::key() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.FeatureCustom.key)
  return key_.GetNoArena();
}
inline void FeatureCustom::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.FeatureCustom.key)
}
#if LANG_CXX11
inline void FeatureCustom::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.FeatureCustom.key)
}
#endif
inline void FeatureCustom::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.FeatureCustom.key)
}
inline void FeatureCustom::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.FeatureCustom.key)
}
inline ::std::string* FeatureCustom::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:algorithm.v2.FeatureCustom.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureCustom::release_key() {
  // @@protoc_insertion_point(field_release:algorithm.v2.FeatureCustom.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureCustom::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.FeatureCustom.key)
}

// string value = 2;
inline void FeatureCustom::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureCustom::value() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.FeatureCustom.value)
  return value_.GetNoArena();
}
inline void FeatureCustom::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:algorithm.v2.FeatureCustom.value)
}
#if LANG_CXX11
inline void FeatureCustom::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:algorithm.v2.FeatureCustom.value)
}
#endif
inline void FeatureCustom::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:algorithm.v2.FeatureCustom.value)
}
inline void FeatureCustom::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:algorithm.v2.FeatureCustom.value)
}
inline ::std::string* FeatureCustom::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:algorithm.v2.FeatureCustom.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureCustom::release_value() {
  // @@protoc_insertion_point(field_release:algorithm.v2.FeatureCustom.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureCustom::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:algorithm.v2.FeatureCustom.value)
}

// -------------------------------------------------------------------

// SystemFeature

// .algorithm.v2.FeatureCustom custom = 1;
inline bool SystemFeature::has_custom() const {
  return feature_case() == kCustom;
}
inline void SystemFeature::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void SystemFeature::clear_custom() {
  if (has_custom()) {
    delete feature_.custom_;
    clear_has_feature();
  }
}
inline ::algorithm::v2::FeatureCustom* SystemFeature::release_custom() {
  // @@protoc_insertion_point(field_release:algorithm.v2.SystemFeature.custom)
  if (has_custom()) {
    clear_has_feature();
      ::algorithm::v2::FeatureCustom* temp = feature_.custom_;
    feature_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::algorithm::v2::FeatureCustom& SystemFeature::custom() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SystemFeature.custom)
  return has_custom()
      ? *feature_.custom_
      : *reinterpret_cast< ::algorithm::v2::FeatureCustom*>(&::algorithm::v2::_FeatureCustom_default_instance_);
}
inline ::algorithm::v2::FeatureCustom* SystemFeature::mutable_custom() {
  if (!has_custom()) {
    clear_feature();
    set_has_custom();
    feature_.custom_ = CreateMaybeMessage< ::algorithm::v2::FeatureCustom >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.SystemFeature.custom)
  return feature_.custom_;
}

// .algorithm.v2.FeatureIPVideoSource video_source = 2;
inline bool SystemFeature::has_video_source() const {
  return feature_case() == kVideoSource;
}
inline void SystemFeature::set_has_video_source() {
  _oneof_case_[0] = kVideoSource;
}
inline void SystemFeature::clear_video_source() {
  if (has_video_source()) {
    delete feature_.video_source_;
    clear_has_feature();
  }
}
inline ::algorithm::v2::FeatureIPVideoSource* SystemFeature::release_video_source() {
  // @@protoc_insertion_point(field_release:algorithm.v2.SystemFeature.video_source)
  if (has_video_source()) {
    clear_has_feature();
      ::algorithm::v2::FeatureIPVideoSource* temp = feature_.video_source_;
    feature_.video_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::algorithm::v2::FeatureIPVideoSource& SystemFeature::video_source() const {
  // @@protoc_insertion_point(field_get:algorithm.v2.SystemFeature.video_source)
  return has_video_source()
      ? *feature_.video_source_
      : *reinterpret_cast< ::algorithm::v2::FeatureIPVideoSource*>(&::algorithm::v2::_FeatureIPVideoSource_default_instance_);
}
inline ::algorithm::v2::FeatureIPVideoSource* SystemFeature::mutable_video_source() {
  if (!has_video_source()) {
    clear_feature();
    set_has_video_source();
    feature_.video_source_ = CreateMaybeMessage< ::algorithm::v2::FeatureIPVideoSource >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:algorithm.v2.SystemFeature.video_source)
  return feature_.video_source_;
}

inline bool SystemFeature::has_feature() const {
  return feature_case() != FEATURE_NOT_SET;
}
inline void SystemFeature::clear_has_feature() {
  _oneof_case_[0] = FEATURE_NOT_SET;
}
inline SystemFeature::FeatureCase SystemFeature::feature_case() const {
  return SystemFeature::FeatureCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace algorithm

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::algorithm::v2::DetectedObject_ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::algorithm::v2::DetectedObject_ObjectType>() {
  return ::algorithm::v2::DetectedObject_ObjectType_descriptor();
}
template <> struct is_proto_enum< ::algorithm::v2::DetectedObject_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::algorithm::v2::DetectedObject_EventType>() {
  return ::algorithm::v2::DetectedObject_EventType_descriptor();
}
template <> struct is_proto_enum< ::algorithm::v2::DetectedObject_ObjectColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::algorithm::v2::DetectedObject_ObjectColor>() {
  return ::algorithm::v2::DetectedObject_ObjectColor_descriptor();
}
template <> struct is_proto_enum< ::algorithm::v2::FeatureIPVideoSource_Transport> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::algorithm::v2::FeatureIPVideoSource_Transport>() {
  return ::algorithm::v2::FeatureIPVideoSource_Transport_descriptor();
}
template <> struct is_proto_enum< ::algorithm::v2::MotionDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::algorithm::v2::MotionDirection>() {
  return ::algorithm::v2::MotionDirection_descriptor();
}
template <> struct is_proto_enum< ::algorithm::v2::PreProcessing> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::algorithm::v2::PreProcessing>() {
  return ::algorithm::v2::PreProcessing_descriptor();
}
template <> struct is_proto_enum< ::algorithm::v2::RunMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::algorithm::v2::RunMode>() {
  return ::algorithm::v2::RunMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_AlgorithmCommunicationV2_2eproto
