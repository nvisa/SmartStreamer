// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: KardelenAPI.proto

#include "KardelenAPI.pb.h"
#include "KardelenAPI.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kaapi {

static const char* CameraService_method_names[] = {
  "/kaapi.CameraService/GetPosition",
  "/kaapi.CameraService/MoveAbsolute",
  "/kaapi.CameraService/MoveRelative",
  "/kaapi.CameraService/GetCameraStatus",
  "/kaapi.CameraService/UpdateCameraStatus",
  "/kaapi.CameraService/SetCamera",
  "/kaapi.CameraService/GetNumericParameter",
  "/kaapi.CameraService/GetEnumParameter",
  "/kaapi.CameraService/SetNumericParameter",
  "/kaapi.CameraService/SetEnumParameter",
  "/kaapi.CameraService/SetEnumCommand",
  "/kaapi.CameraService/GetVersion",
  "/kaapi.CameraService/ScreenClick",
  "/kaapi.CameraService/CommunicationChannel",
  "/kaapi.CameraService/SetMotionROI",
  "/kaapi.CameraService/SetTrackWindow",
  "/kaapi.CameraService/SetCalibration",
  "/kaapi.CameraService/SetAselChangeLocations",
};

std::unique_ptr< CameraService::Stub> CameraService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CameraService::Stub> stub(new CameraService::Stub(channel));
  return stub;
}

CameraService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetPosition_(CameraService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveAbsolute_(CameraService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveRelative_(CameraService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCameraStatus_(CameraService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCameraStatus_(CameraService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCamera_(CameraService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNumericParameter_(CameraService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEnumParameter_(CameraService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNumericParameter_(CameraService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEnumParameter_(CameraService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEnumCommand_(CameraService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(CameraService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScreenClick_(CameraService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CommunicationChannel_(CameraService_method_names[13], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SetMotionROI_(CameraService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTrackWindow_(CameraService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCalibration_(CameraService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAselChangeLocations_(CameraService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CameraService::Stub::GetPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::kaapi::PosInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

void CameraService::Stub::experimental_async::GetPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::kaapi::PosInfo* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::PosInfo>* CameraService::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::PosInfo>::Create(channel_.get(), cq, rpcmethod_GetPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::PosInfo>* CameraService::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::PosInfo>::Create(channel_.get(), cq, rpcmethod_GetPosition_, context, request, false);
}

::grpc::Status CameraService::Stub::MoveAbsolute(::grpc::ClientContext* context, const ::kaapi::AbsoluteMoveParameters& request, ::kaapi::AbsoluteMoveResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveAbsolute_, context, request, response);
}

void CameraService::Stub::experimental_async::MoveAbsolute(::grpc::ClientContext* context, const ::kaapi::AbsoluteMoveParameters* request, ::kaapi::AbsoluteMoveResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveAbsolute_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::AbsoluteMoveResult>* CameraService::Stub::AsyncMoveAbsoluteRaw(::grpc::ClientContext* context, const ::kaapi::AbsoluteMoveParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::AbsoluteMoveResult>::Create(channel_.get(), cq, rpcmethod_MoveAbsolute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::AbsoluteMoveResult>* CameraService::Stub::PrepareAsyncMoveAbsoluteRaw(::grpc::ClientContext* context, const ::kaapi::AbsoluteMoveParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::AbsoluteMoveResult>::Create(channel_.get(), cq, rpcmethod_MoveAbsolute_, context, request, false);
}

::grpc::Status CameraService::Stub::MoveRelative(::grpc::ClientContext* context, const ::kaapi::RelativeMoveParameters& request, ::kaapi::RelativeMoveResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveRelative_, context, request, response);
}

void CameraService::Stub::experimental_async::MoveRelative(::grpc::ClientContext* context, const ::kaapi::RelativeMoveParameters* request, ::kaapi::RelativeMoveResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveRelative_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::RelativeMoveResult>* CameraService::Stub::AsyncMoveRelativeRaw(::grpc::ClientContext* context, const ::kaapi::RelativeMoveParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::RelativeMoveResult>::Create(channel_.get(), cq, rpcmethod_MoveRelative_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::RelativeMoveResult>* CameraService::Stub::PrepareAsyncMoveRelativeRaw(::grpc::ClientContext* context, const ::kaapi::RelativeMoveParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::RelativeMoveResult>::Create(channel_.get(), cq, rpcmethod_MoveRelative_, context, request, false);
}

::grpc::Status CameraService::Stub::GetCameraStatus(::grpc::ClientContext* context, const ::kaapi::GetCameraStatusParameters& request, ::kaapi::CameraStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCameraStatus_, context, request, response);
}

void CameraService::Stub::experimental_async::GetCameraStatus(::grpc::ClientContext* context, const ::kaapi::GetCameraStatusParameters* request, ::kaapi::CameraStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCameraStatus_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::CameraStatus>* CameraService::Stub::AsyncGetCameraStatusRaw(::grpc::ClientContext* context, const ::kaapi::GetCameraStatusParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::CameraStatus>::Create(channel_.get(), cq, rpcmethod_GetCameraStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::CameraStatus>* CameraService::Stub::PrepareAsyncGetCameraStatusRaw(::grpc::ClientContext* context, const ::kaapi::GetCameraStatusParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::CameraStatus>::Create(channel_.get(), cq, rpcmethod_GetCameraStatus_, context, request, false);
}

::grpc::Status CameraService::Stub::UpdateCameraStatus(::grpc::ClientContext* context, const ::kaapi::UpdateCameraStatusParameters& request, ::kaapi::CameraStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateCameraStatus_, context, request, response);
}

void CameraService::Stub::experimental_async::UpdateCameraStatus(::grpc::ClientContext* context, const ::kaapi::UpdateCameraStatusParameters* request, ::kaapi::CameraStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateCameraStatus_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::CameraStatus>* CameraService::Stub::AsyncUpdateCameraStatusRaw(::grpc::ClientContext* context, const ::kaapi::UpdateCameraStatusParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::CameraStatus>::Create(channel_.get(), cq, rpcmethod_UpdateCameraStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::CameraStatus>* CameraService::Stub::PrepareAsyncUpdateCameraStatusRaw(::grpc::ClientContext* context, const ::kaapi::UpdateCameraStatusParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::CameraStatus>::Create(channel_.get(), cq, rpcmethod_UpdateCameraStatus_, context, request, false);
}

::grpc::Status CameraService::Stub::SetCamera(::grpc::ClientContext* context, const ::kaapi::SetCameraRequest& request, ::kaapi::SetCameraResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCamera_, context, request, response);
}

void CameraService::Stub::experimental_async::SetCamera(::grpc::ClientContext* context, const ::kaapi::SetCameraRequest* request, ::kaapi::SetCameraResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCamera_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::SetCameraResponse>* CameraService::Stub::AsyncSetCameraRaw(::grpc::ClientContext* context, const ::kaapi::SetCameraRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::SetCameraResponse>::Create(channel_.get(), cq, rpcmethod_SetCamera_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::SetCameraResponse>* CameraService::Stub::PrepareAsyncSetCameraRaw(::grpc::ClientContext* context, const ::kaapi::SetCameraRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::SetCameraResponse>::Create(channel_.get(), cq, rpcmethod_SetCamera_, context, request, false);
}

::grpc::Status CameraService::Stub::GetNumericParameter(::grpc::ClientContext* context, const ::kaapi::GetNumericParameterRequest& request, ::kaapi::GetNumericParameterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNumericParameter_, context, request, response);
}

void CameraService::Stub::experimental_async::GetNumericParameter(::grpc::ClientContext* context, const ::kaapi::GetNumericParameterRequest* request, ::kaapi::GetNumericParameterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNumericParameter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::GetNumericParameterResponse>* CameraService::Stub::AsyncGetNumericParameterRaw(::grpc::ClientContext* context, const ::kaapi::GetNumericParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::GetNumericParameterResponse>::Create(channel_.get(), cq, rpcmethod_GetNumericParameter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::GetNumericParameterResponse>* CameraService::Stub::PrepareAsyncGetNumericParameterRaw(::grpc::ClientContext* context, const ::kaapi::GetNumericParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::GetNumericParameterResponse>::Create(channel_.get(), cq, rpcmethod_GetNumericParameter_, context, request, false);
}

::grpc::Status CameraService::Stub::GetEnumParameter(::grpc::ClientContext* context, const ::kaapi::GetEnumParameterRequest& request, ::kaapi::GetEnumParameterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEnumParameter_, context, request, response);
}

void CameraService::Stub::experimental_async::GetEnumParameter(::grpc::ClientContext* context, const ::kaapi::GetEnumParameterRequest* request, ::kaapi::GetEnumParameterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEnumParameter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::GetEnumParameterResponse>* CameraService::Stub::AsyncGetEnumParameterRaw(::grpc::ClientContext* context, const ::kaapi::GetEnumParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::GetEnumParameterResponse>::Create(channel_.get(), cq, rpcmethod_GetEnumParameter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::GetEnumParameterResponse>* CameraService::Stub::PrepareAsyncGetEnumParameterRaw(::grpc::ClientContext* context, const ::kaapi::GetEnumParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::GetEnumParameterResponse>::Create(channel_.get(), cq, rpcmethod_GetEnumParameter_, context, request, false);
}

::grpc::Status CameraService::Stub::SetNumericParameter(::grpc::ClientContext* context, const ::kaapi::SetNumericParameterRequest& request, ::kaapi::SetNumericParameterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNumericParameter_, context, request, response);
}

void CameraService::Stub::experimental_async::SetNumericParameter(::grpc::ClientContext* context, const ::kaapi::SetNumericParameterRequest* request, ::kaapi::SetNumericParameterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNumericParameter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::SetNumericParameterResponse>* CameraService::Stub::AsyncSetNumericParameterRaw(::grpc::ClientContext* context, const ::kaapi::SetNumericParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::SetNumericParameterResponse>::Create(channel_.get(), cq, rpcmethod_SetNumericParameter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::SetNumericParameterResponse>* CameraService::Stub::PrepareAsyncSetNumericParameterRaw(::grpc::ClientContext* context, const ::kaapi::SetNumericParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::SetNumericParameterResponse>::Create(channel_.get(), cq, rpcmethod_SetNumericParameter_, context, request, false);
}

::grpc::Status CameraService::Stub::SetEnumParameter(::grpc::ClientContext* context, const ::kaapi::SetEnumParameterRequest& request, ::kaapi::SetEnumParameterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEnumParameter_, context, request, response);
}

void CameraService::Stub::experimental_async::SetEnumParameter(::grpc::ClientContext* context, const ::kaapi::SetEnumParameterRequest* request, ::kaapi::SetEnumParameterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEnumParameter_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::SetEnumParameterResponse>* CameraService::Stub::AsyncSetEnumParameterRaw(::grpc::ClientContext* context, const ::kaapi::SetEnumParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::SetEnumParameterResponse>::Create(channel_.get(), cq, rpcmethod_SetEnumParameter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::SetEnumParameterResponse>* CameraService::Stub::PrepareAsyncSetEnumParameterRaw(::grpc::ClientContext* context, const ::kaapi::SetEnumParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::SetEnumParameterResponse>::Create(channel_.get(), cq, rpcmethod_SetEnumParameter_, context, request, false);
}

::grpc::Status CameraService::Stub::SetEnumCommand(::grpc::ClientContext* context, const ::kaapi::SetEnumCommandRequest& request, ::kaapi::SetEnumCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEnumCommand_, context, request, response);
}

void CameraService::Stub::experimental_async::SetEnumCommand(::grpc::ClientContext* context, const ::kaapi::SetEnumCommandRequest* request, ::kaapi::SetEnumCommandResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEnumCommand_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::SetEnumCommandResponse>* CameraService::Stub::AsyncSetEnumCommandRaw(::grpc::ClientContext* context, const ::kaapi::SetEnumCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::SetEnumCommandResponse>::Create(channel_.get(), cq, rpcmethod_SetEnumCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::SetEnumCommandResponse>* CameraService::Stub::PrepareAsyncSetEnumCommandRaw(::grpc::ClientContext* context, const ::kaapi::SetEnumCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::SetEnumCommandResponse>::Create(channel_.get(), cq, rpcmethod_SetEnumCommand_, context, request, false);
}

::grpc::Status CameraService::Stub::GetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::kaapi::ApiVersion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void CameraService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::kaapi::ApiVersion* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kaapi::ApiVersion>* CameraService::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::ApiVersion>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kaapi::ApiVersion>* CameraService::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kaapi::ApiVersion>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, false);
}

::grpc::Status CameraService::Stub::ScreenClick(::grpc::ClientContext* context, const ::kaapi::ClickParameter& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ScreenClick_, context, request, response);
}

void CameraService::Stub::experimental_async::ScreenClick(::grpc::ClientContext* context, const ::kaapi::ClickParameter* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ScreenClick_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::AsyncScreenClickRaw(::grpc::ClientContext* context, const ::kaapi::ClickParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ScreenClick_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::PrepareAsyncScreenClickRaw(::grpc::ClientContext* context, const ::kaapi::ClickParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ScreenClick_, context, request, false);
}

::grpc::ClientReaderWriter< ::kaapi::CommWrite, ::kaapi::CommRead>* CameraService::Stub::CommunicationChannelRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::kaapi::CommWrite, ::kaapi::CommRead>::Create(channel_.get(), rpcmethod_CommunicationChannel_, context);
}

void CameraService::Stub::experimental_async::CommunicationChannel(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::kaapi::CommWrite,::kaapi::CommRead>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::kaapi::CommWrite,::kaapi::CommRead>::Create(stub_->channel_.get(), stub_->rpcmethod_CommunicationChannel_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::kaapi::CommWrite, ::kaapi::CommRead>* CameraService::Stub::AsyncCommunicationChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::kaapi::CommWrite, ::kaapi::CommRead>::Create(channel_.get(), cq, rpcmethod_CommunicationChannel_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::kaapi::CommWrite, ::kaapi::CommRead>* CameraService::Stub::PrepareAsyncCommunicationChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::kaapi::CommWrite, ::kaapi::CommRead>::Create(channel_.get(), cq, rpcmethod_CommunicationChannel_, context, false, nullptr);
}

::grpc::Status CameraService::Stub::SetMotionROI(::grpc::ClientContext* context, const ::kaapi::MotionROIRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMotionROI_, context, request, response);
}

void CameraService::Stub::experimental_async::SetMotionROI(::grpc::ClientContext* context, const ::kaapi::MotionROIRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMotionROI_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::AsyncSetMotionROIRaw(::grpc::ClientContext* context, const ::kaapi::MotionROIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetMotionROI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::PrepareAsyncSetMotionROIRaw(::grpc::ClientContext* context, const ::kaapi::MotionROIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetMotionROI_, context, request, false);
}

::grpc::Status CameraService::Stub::SetTrackWindow(::grpc::ClientContext* context, const ::kaapi::Rectangle& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTrackWindow_, context, request, response);
}

void CameraService::Stub::experimental_async::SetTrackWindow(::grpc::ClientContext* context, const ::kaapi::Rectangle* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTrackWindow_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::AsyncSetTrackWindowRaw(::grpc::ClientContext* context, const ::kaapi::Rectangle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetTrackWindow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::PrepareAsyncSetTrackWindowRaw(::grpc::ClientContext* context, const ::kaapi::Rectangle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetTrackWindow_, context, request, false);
}

::grpc::Status CameraService::Stub::SetCalibration(::grpc::ClientContext* context, const ::kaapi::CalibrationRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCalibration_, context, request, response);
}

void CameraService::Stub::experimental_async::SetCalibration(::grpc::ClientContext* context, const ::kaapi::CalibrationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCalibration_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::AsyncSetCalibrationRaw(::grpc::ClientContext* context, const ::kaapi::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetCalibration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::PrepareAsyncSetCalibrationRaw(::grpc::ClientContext* context, const ::kaapi::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetCalibration_, context, request, false);
}

::grpc::Status CameraService::Stub::SetAselChangeLocations(::grpc::ClientContext* context, const ::kaapi::ListOfLocationInformation& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAselChangeLocations_, context, request, response);
}

void CameraService::Stub::experimental_async::SetAselChangeLocations(::grpc::ClientContext* context, const ::kaapi::ListOfLocationInformation* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAselChangeLocations_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::AsyncSetAselChangeLocationsRaw(::grpc::ClientContext* context, const ::kaapi::ListOfLocationInformation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetAselChangeLocations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraService::Stub::PrepareAsyncSetAselChangeLocationsRaw(::grpc::ClientContext* context, const ::kaapi::ListOfLocationInformation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetAselChangeLocations_, context, request, false);
}

CameraService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::google::protobuf::Empty, ::kaapi::PosInfo>(
          std::mem_fn(&CameraService::Service::GetPosition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::AbsoluteMoveParameters, ::kaapi::AbsoluteMoveResult>(
          std::mem_fn(&CameraService::Service::MoveAbsolute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::RelativeMoveParameters, ::kaapi::RelativeMoveResult>(
          std::mem_fn(&CameraService::Service::MoveRelative), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::GetCameraStatusParameters, ::kaapi::CameraStatus>(
          std::mem_fn(&CameraService::Service::GetCameraStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::UpdateCameraStatusParameters, ::kaapi::CameraStatus>(
          std::mem_fn(&CameraService::Service::UpdateCameraStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::SetCameraRequest, ::kaapi::SetCameraResponse>(
          std::mem_fn(&CameraService::Service::SetCamera), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::GetNumericParameterRequest, ::kaapi::GetNumericParameterResponse>(
          std::mem_fn(&CameraService::Service::GetNumericParameter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::GetEnumParameterRequest, ::kaapi::GetEnumParameterResponse>(
          std::mem_fn(&CameraService::Service::GetEnumParameter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::SetNumericParameterRequest, ::kaapi::SetNumericParameterResponse>(
          std::mem_fn(&CameraService::Service::SetNumericParameter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::SetEnumParameterRequest, ::kaapi::SetEnumParameterResponse>(
          std::mem_fn(&CameraService::Service::SetEnumParameter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::SetEnumCommandRequest, ::kaapi::SetEnumCommandResponse>(
          std::mem_fn(&CameraService::Service::SetEnumCommand), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::google::protobuf::Empty, ::kaapi::ApiVersion>(
          std::mem_fn(&CameraService::Service::GetVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::ClickParameter, ::google::protobuf::Empty>(
          std::mem_fn(&CameraService::Service::ScreenClick), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[13],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< CameraService::Service, ::kaapi::CommWrite, ::kaapi::CommRead>(
          std::mem_fn(&CameraService::Service::CommunicationChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::MotionROIRequest, ::google::protobuf::Empty>(
          std::mem_fn(&CameraService::Service::SetMotionROI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::Rectangle, ::google::protobuf::Empty>(
          std::mem_fn(&CameraService::Service::SetTrackWindow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::CalibrationRequest, ::google::protobuf::Empty>(
          std::mem_fn(&CameraService::Service::SetCalibration), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::kaapi::ListOfLocationInformation, ::google::protobuf::Empty>(
          std::mem_fn(&CameraService::Service::SetAselChangeLocations), this)));
}

CameraService::Service::~Service() {
}

::grpc::Status CameraService::Service::GetPosition(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::kaapi::PosInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::MoveAbsolute(::grpc::ServerContext* context, const ::kaapi::AbsoluteMoveParameters* request, ::kaapi::AbsoluteMoveResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::MoveRelative(::grpc::ServerContext* context, const ::kaapi::RelativeMoveParameters* request, ::kaapi::RelativeMoveResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::GetCameraStatus(::grpc::ServerContext* context, const ::kaapi::GetCameraStatusParameters* request, ::kaapi::CameraStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::UpdateCameraStatus(::grpc::ServerContext* context, const ::kaapi::UpdateCameraStatusParameters* request, ::kaapi::CameraStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::SetCamera(::grpc::ServerContext* context, const ::kaapi::SetCameraRequest* request, ::kaapi::SetCameraResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::GetNumericParameter(::grpc::ServerContext* context, const ::kaapi::GetNumericParameterRequest* request, ::kaapi::GetNumericParameterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::GetEnumParameter(::grpc::ServerContext* context, const ::kaapi::GetEnumParameterRequest* request, ::kaapi::GetEnumParameterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::SetNumericParameter(::grpc::ServerContext* context, const ::kaapi::SetNumericParameterRequest* request, ::kaapi::SetNumericParameterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::SetEnumParameter(::grpc::ServerContext* context, const ::kaapi::SetEnumParameterRequest* request, ::kaapi::SetEnumParameterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::SetEnumCommand(::grpc::ServerContext* context, const ::kaapi::SetEnumCommandRequest* request, ::kaapi::SetEnumCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::GetVersion(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::kaapi::ApiVersion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::ScreenClick(::grpc::ServerContext* context, const ::kaapi::ClickParameter* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::CommunicationChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::kaapi::CommRead, ::kaapi::CommWrite>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::SetMotionROI(::grpc::ServerContext* context, const ::kaapi::MotionROIRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::SetTrackWindow(::grpc::ServerContext* context, const ::kaapi::Rectangle* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::SetCalibration(::grpc::ServerContext* context, const ::kaapi::CalibrationRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::SetAselChangeLocations(::grpc::ServerContext* context, const ::kaapi::ListOfLocationInformation* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kaapi

