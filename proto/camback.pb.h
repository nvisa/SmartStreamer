// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camback.proto

#ifndef PROTOBUF_camback_2eproto__INCLUDED
#define PROTOBUF_camback_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_camback_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPtzCmdParImpl();
void InitDefaultsPtzCmdPar();
void InitDefaultsPtzCommandResultImpl();
void InitDefaultsPtzCommandResult();
void InitDefaultsPTZInfoQImpl();
void InitDefaultsPTZInfoQ();
void InitDefaultsPTZPosInfoImpl();
void InitDefaultsPTZPosInfo();
void InitDefaultsPanTiltPosImpl();
void InitDefaultsPanTiltPos();
void InitDefaultsPTZCmdInfoImpl();
void InitDefaultsPTZCmdInfo();
void InitDefaultsPanCmdInfoImpl();
void InitDefaultsPanCmdInfo();
void InitDefaultsTiltCmdInfoImpl();
void InitDefaultsTiltCmdInfo();
inline void InitDefaults() {
  InitDefaultsPtzCmdPar();
  InitDefaultsPtzCommandResult();
  InitDefaultsPTZInfoQ();
  InitDefaultsPTZPosInfo();
  InitDefaultsPanTiltPos();
  InitDefaultsPTZCmdInfo();
  InitDefaultsPanCmdInfo();
  InitDefaultsTiltCmdInfo();
}
}  // namespace protobuf_camback_2eproto
namespace camback {
class PTZCmdInfo;
class PTZCmdInfoDefaultTypeInternal;
extern PTZCmdInfoDefaultTypeInternal _PTZCmdInfo_default_instance_;
class PTZInfoQ;
class PTZInfoQDefaultTypeInternal;
extern PTZInfoQDefaultTypeInternal _PTZInfoQ_default_instance_;
class PTZPosInfo;
class PTZPosInfoDefaultTypeInternal;
extern PTZPosInfoDefaultTypeInternal _PTZPosInfo_default_instance_;
class PanCmdInfo;
class PanCmdInfoDefaultTypeInternal;
extern PanCmdInfoDefaultTypeInternal _PanCmdInfo_default_instance_;
class PanTiltPos;
class PanTiltPosDefaultTypeInternal;
extern PanTiltPosDefaultTypeInternal _PanTiltPos_default_instance_;
class PtzCmdPar;
class PtzCmdParDefaultTypeInternal;
extern PtzCmdParDefaultTypeInternal _PtzCmdPar_default_instance_;
class PtzCommandResult;
class PtzCommandResultDefaultTypeInternal;
extern PtzCommandResultDefaultTypeInternal _PtzCommandResult_default_instance_;
class TiltCmdInfo;
class TiltCmdInfoDefaultTypeInternal;
extern TiltCmdInfoDefaultTypeInternal _TiltCmdInfo_default_instance_;
}  // namespace camback
namespace camback {

// ===================================================================

class PtzCmdPar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camback.PtzCmdPar) */ {
 public:
  PtzCmdPar();
  virtual ~PtzCmdPar();

  PtzCmdPar(const PtzCmdPar& from);

  inline PtzCmdPar& operator=(const PtzCmdPar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PtzCmdPar(PtzCmdPar&& from) noexcept
    : PtzCmdPar() {
    *this = ::std::move(from);
  }

  inline PtzCmdPar& operator=(PtzCmdPar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PtzCmdPar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzCmdPar* internal_default_instance() {
    return reinterpret_cast<const PtzCmdPar*>(
               &_PtzCmdPar_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PtzCmdPar* other);
  friend void swap(PtzCmdPar& a, PtzCmdPar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PtzCmdPar* New() const PROTOBUF_FINAL { return New(NULL); }

  PtzCmdPar* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PtzCmdPar& from);
  void MergeFrom(const PtzCmdPar& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PtzCmdPar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 pan_speed = 1;
  void clear_pan_speed();
  static const int kPanSpeedFieldNumber = 1;
  ::google::protobuf::int32 pan_speed() const;
  void set_pan_speed(::google::protobuf::int32 value);

  // int32 tilt_speed = 2;
  void clear_tilt_speed();
  static const int kTiltSpeedFieldNumber = 2;
  ::google::protobuf::int32 tilt_speed() const;
  void set_tilt_speed(::google::protobuf::int32 value);

  // int32 zoom_speed = 3;
  void clear_zoom_speed();
  static const int kZoomSpeedFieldNumber = 3;
  ::google::protobuf::int32 zoom_speed() const;
  void set_zoom_speed(::google::protobuf::int32 value);

  // float pan_abs = 4;
  void clear_pan_abs();
  static const int kPanAbsFieldNumber = 4;
  float pan_abs() const;
  void set_pan_abs(float value);

  // float tilt_abs = 5;
  void clear_tilt_abs();
  static const int kTiltAbsFieldNumber = 5;
  float tilt_abs() const;
  void set_tilt_abs(float value);

  // @@protoc_insertion_point(class_scope:camback.PtzCmdPar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 pan_speed_;
  ::google::protobuf::int32 tilt_speed_;
  ::google::protobuf::int32 zoom_speed_;
  float pan_abs_;
  float tilt_abs_;
  mutable int _cached_size_;
  friend struct ::protobuf_camback_2eproto::TableStruct;
  friend void ::protobuf_camback_2eproto::InitDefaultsPtzCmdParImpl();
};
// -------------------------------------------------------------------

class PtzCommandResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camback.PtzCommandResult) */ {
 public:
  PtzCommandResult();
  virtual ~PtzCommandResult();

  PtzCommandResult(const PtzCommandResult& from);

  inline PtzCommandResult& operator=(const PtzCommandResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PtzCommandResult(PtzCommandResult&& from) noexcept
    : PtzCommandResult() {
    *this = ::std::move(from);
  }

  inline PtzCommandResult& operator=(PtzCommandResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PtzCommandResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzCommandResult* internal_default_instance() {
    return reinterpret_cast<const PtzCommandResult*>(
               &_PtzCommandResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PtzCommandResult* other);
  friend void swap(PtzCommandResult& a, PtzCommandResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PtzCommandResult* New() const PROTOBUF_FINAL { return New(NULL); }

  PtzCommandResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PtzCommandResult& from);
  void MergeFrom(const PtzCommandResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PtzCommandResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:camback.PtzCommandResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 err_;
  mutable int _cached_size_;
  friend struct ::protobuf_camback_2eproto::TableStruct;
  friend void ::protobuf_camback_2eproto::InitDefaultsPtzCommandResultImpl();
};
// -------------------------------------------------------------------

class PTZInfoQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camback.PTZInfoQ) */ {
 public:
  PTZInfoQ();
  virtual ~PTZInfoQ();

  PTZInfoQ(const PTZInfoQ& from);

  inline PTZInfoQ& operator=(const PTZInfoQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PTZInfoQ(PTZInfoQ&& from) noexcept
    : PTZInfoQ() {
    *this = ::std::move(from);
  }

  inline PTZInfoQ& operator=(PTZInfoQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PTZInfoQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PTZInfoQ* internal_default_instance() {
    return reinterpret_cast<const PTZInfoQ*>(
               &_PTZInfoQ_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PTZInfoQ* other);
  friend void swap(PTZInfoQ& a, PTZInfoQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PTZInfoQ* New() const PROTOBUF_FINAL { return New(NULL); }

  PTZInfoQ* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PTZInfoQ& from);
  void MergeFrom(const PTZInfoQ& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PTZInfoQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 dummy = 1;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  ::google::protobuf::int32 dummy() const;
  void set_dummy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:camback.PTZInfoQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 dummy_;
  mutable int _cached_size_;
  friend struct ::protobuf_camback_2eproto::TableStruct;
  friend void ::protobuf_camback_2eproto::InitDefaultsPTZInfoQImpl();
};
// -------------------------------------------------------------------

class PTZPosInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camback.PTZPosInfo) */ {
 public:
  PTZPosInfo();
  virtual ~PTZPosInfo();

  PTZPosInfo(const PTZPosInfo& from);

  inline PTZPosInfo& operator=(const PTZPosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PTZPosInfo(PTZPosInfo&& from) noexcept
    : PTZPosInfo() {
    *this = ::std::move(from);
  }

  inline PTZPosInfo& operator=(PTZPosInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PTZPosInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PTZPosInfo* internal_default_instance() {
    return reinterpret_cast<const PTZPosInfo*>(
               &_PTZPosInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PTZPosInfo* other);
  friend void swap(PTZPosInfo& a, PTZPosInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PTZPosInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PTZPosInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PTZPosInfo& from);
  void MergeFrom(const PTZPosInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PTZPosInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 pan_pos = 1;
  void clear_pan_pos();
  static const int kPanPosFieldNumber = 1;
  ::google::protobuf::int32 pan_pos() const;
  void set_pan_pos(::google::protobuf::int32 value);

  // int32 tilt_pos = 2;
  void clear_tilt_pos();
  static const int kTiltPosFieldNumber = 2;
  ::google::protobuf::int32 tilt_pos() const;
  void set_tilt_pos(::google::protobuf::int32 value);

  // int32 zoom_pos = 3;
  void clear_zoom_pos();
  static const int kZoomPosFieldNumber = 3;
  ::google::protobuf::int32 zoom_pos() const;
  void set_zoom_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:camback.PTZPosInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 pan_pos_;
  ::google::protobuf::int32 tilt_pos_;
  ::google::protobuf::int32 zoom_pos_;
  mutable int _cached_size_;
  friend struct ::protobuf_camback_2eproto::TableStruct;
  friend void ::protobuf_camback_2eproto::InitDefaultsPTZPosInfoImpl();
};
// -------------------------------------------------------------------

class PanTiltPos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camback.PanTiltPos) */ {
 public:
  PanTiltPos();
  virtual ~PanTiltPos();

  PanTiltPos(const PanTiltPos& from);

  inline PanTiltPos& operator=(const PanTiltPos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PanTiltPos(PanTiltPos&& from) noexcept
    : PanTiltPos() {
    *this = ::std::move(from);
  }

  inline PanTiltPos& operator=(PanTiltPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PanTiltPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PanTiltPos* internal_default_instance() {
    return reinterpret_cast<const PanTiltPos*>(
               &_PanTiltPos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PanTiltPos* other);
  friend void swap(PanTiltPos& a, PanTiltPos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PanTiltPos* New() const PROTOBUF_FINAL { return New(NULL); }

  PanTiltPos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PanTiltPos& from);
  void MergeFrom(const PanTiltPos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PanTiltPos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float pan_pos = 1;
  void clear_pan_pos();
  static const int kPanPosFieldNumber = 1;
  float pan_pos() const;
  void set_pan_pos(float value);

  // float tilt_pos = 2;
  void clear_tilt_pos();
  static const int kTiltPosFieldNumber = 2;
  float tilt_pos() const;
  void set_tilt_pos(float value);

  // @@protoc_insertion_point(class_scope:camback.PanTiltPos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float pan_pos_;
  float tilt_pos_;
  mutable int _cached_size_;
  friend struct ::protobuf_camback_2eproto::TableStruct;
  friend void ::protobuf_camback_2eproto::InitDefaultsPanTiltPosImpl();
};
// -------------------------------------------------------------------

class PTZCmdInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camback.PTZCmdInfo) */ {
 public:
  PTZCmdInfo();
  virtual ~PTZCmdInfo();

  PTZCmdInfo(const PTZCmdInfo& from);

  inline PTZCmdInfo& operator=(const PTZCmdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PTZCmdInfo(PTZCmdInfo&& from) noexcept
    : PTZCmdInfo() {
    *this = ::std::move(from);
  }

  inline PTZCmdInfo& operator=(PTZCmdInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PTZCmdInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PTZCmdInfo* internal_default_instance() {
    return reinterpret_cast<const PTZCmdInfo*>(
               &_PTZCmdInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PTZCmdInfo* other);
  friend void swap(PTZCmdInfo& a, PTZCmdInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PTZCmdInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PTZCmdInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PTZCmdInfo& from);
  void MergeFrom(const PTZCmdInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PTZCmdInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pan_cmd = 1;
  void clear_pan_cmd();
  static const int kPanCmdFieldNumber = 1;
  const ::std::string& pan_cmd() const;
  void set_pan_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_pan_cmd(::std::string&& value);
  #endif
  void set_pan_cmd(const char* value);
  void set_pan_cmd(const char* value, size_t size);
  ::std::string* mutable_pan_cmd();
  ::std::string* release_pan_cmd();
  void set_allocated_pan_cmd(::std::string* pan_cmd);

  // string tilt_cmd = 2;
  void clear_tilt_cmd();
  static const int kTiltCmdFieldNumber = 2;
  const ::std::string& tilt_cmd() const;
  void set_tilt_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_tilt_cmd(::std::string&& value);
  #endif
  void set_tilt_cmd(const char* value);
  void set_tilt_cmd(const char* value, size_t size);
  ::std::string* mutable_tilt_cmd();
  ::std::string* release_tilt_cmd();
  void set_allocated_tilt_cmd(::std::string* tilt_cmd);

  // string zoom_cmd = 3;
  void clear_zoom_cmd();
  static const int kZoomCmdFieldNumber = 3;
  const ::std::string& zoom_cmd() const;
  void set_zoom_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_zoom_cmd(::std::string&& value);
  #endif
  void set_zoom_cmd(const char* value);
  void set_zoom_cmd(const char* value, size_t size);
  ::std::string* mutable_zoom_cmd();
  ::std::string* release_zoom_cmd();
  void set_allocated_zoom_cmd(::std::string* zoom_cmd);

  // @@protoc_insertion_point(class_scope:camback.PTZCmdInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pan_cmd_;
  ::google::protobuf::internal::ArenaStringPtr tilt_cmd_;
  ::google::protobuf::internal::ArenaStringPtr zoom_cmd_;
  mutable int _cached_size_;
  friend struct ::protobuf_camback_2eproto::TableStruct;
  friend void ::protobuf_camback_2eproto::InitDefaultsPTZCmdInfoImpl();
};
// -------------------------------------------------------------------

class PanCmdInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camback.PanCmdInfo) */ {
 public:
  PanCmdInfo();
  virtual ~PanCmdInfo();

  PanCmdInfo(const PanCmdInfo& from);

  inline PanCmdInfo& operator=(const PanCmdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PanCmdInfo(PanCmdInfo&& from) noexcept
    : PanCmdInfo() {
    *this = ::std::move(from);
  }

  inline PanCmdInfo& operator=(PanCmdInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PanCmdInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PanCmdInfo* internal_default_instance() {
    return reinterpret_cast<const PanCmdInfo*>(
               &_PanCmdInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PanCmdInfo* other);
  friend void swap(PanCmdInfo& a, PanCmdInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PanCmdInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PanCmdInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PanCmdInfo& from);
  void MergeFrom(const PanCmdInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PanCmdInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pan_cmd = 1;
  void clear_pan_cmd();
  static const int kPanCmdFieldNumber = 1;
  const ::std::string& pan_cmd() const;
  void set_pan_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_pan_cmd(::std::string&& value);
  #endif
  void set_pan_cmd(const char* value);
  void set_pan_cmd(const char* value, size_t size);
  ::std::string* mutable_pan_cmd();
  ::std::string* release_pan_cmd();
  void set_allocated_pan_cmd(::std::string* pan_cmd);

  // @@protoc_insertion_point(class_scope:camback.PanCmdInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pan_cmd_;
  mutable int _cached_size_;
  friend struct ::protobuf_camback_2eproto::TableStruct;
  friend void ::protobuf_camback_2eproto::InitDefaultsPanCmdInfoImpl();
};
// -------------------------------------------------------------------

class TiltCmdInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camback.TiltCmdInfo) */ {
 public:
  TiltCmdInfo();
  virtual ~TiltCmdInfo();

  TiltCmdInfo(const TiltCmdInfo& from);

  inline TiltCmdInfo& operator=(const TiltCmdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TiltCmdInfo(TiltCmdInfo&& from) noexcept
    : TiltCmdInfo() {
    *this = ::std::move(from);
  }

  inline TiltCmdInfo& operator=(TiltCmdInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TiltCmdInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TiltCmdInfo* internal_default_instance() {
    return reinterpret_cast<const TiltCmdInfo*>(
               &_TiltCmdInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TiltCmdInfo* other);
  friend void swap(TiltCmdInfo& a, TiltCmdInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TiltCmdInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TiltCmdInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TiltCmdInfo& from);
  void MergeFrom(const TiltCmdInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TiltCmdInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tilt_cmd = 1;
  void clear_tilt_cmd();
  static const int kTiltCmdFieldNumber = 1;
  const ::std::string& tilt_cmd() const;
  void set_tilt_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_tilt_cmd(::std::string&& value);
  #endif
  void set_tilt_cmd(const char* value);
  void set_tilt_cmd(const char* value, size_t size);
  ::std::string* mutable_tilt_cmd();
  ::std::string* release_tilt_cmd();
  void set_allocated_tilt_cmd(::std::string* tilt_cmd);

  // @@protoc_insertion_point(class_scope:camback.TiltCmdInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tilt_cmd_;
  mutable int _cached_size_;
  friend struct ::protobuf_camback_2eproto::TableStruct;
  friend void ::protobuf_camback_2eproto::InitDefaultsTiltCmdInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PtzCmdPar

// int32 pan_speed = 1;
inline void PtzCmdPar::clear_pan_speed() {
  pan_speed_ = 0;
}
inline ::google::protobuf::int32 PtzCmdPar::pan_speed() const {
  // @@protoc_insertion_point(field_get:camback.PtzCmdPar.pan_speed)
  return pan_speed_;
}
inline void PtzCmdPar::set_pan_speed(::google::protobuf::int32 value) {
  
  pan_speed_ = value;
  // @@protoc_insertion_point(field_set:camback.PtzCmdPar.pan_speed)
}

// int32 tilt_speed = 2;
inline void PtzCmdPar::clear_tilt_speed() {
  tilt_speed_ = 0;
}
inline ::google::protobuf::int32 PtzCmdPar::tilt_speed() const {
  // @@protoc_insertion_point(field_get:camback.PtzCmdPar.tilt_speed)
  return tilt_speed_;
}
inline void PtzCmdPar::set_tilt_speed(::google::protobuf::int32 value) {
  
  tilt_speed_ = value;
  // @@protoc_insertion_point(field_set:camback.PtzCmdPar.tilt_speed)
}

// int32 zoom_speed = 3;
inline void PtzCmdPar::clear_zoom_speed() {
  zoom_speed_ = 0;
}
inline ::google::protobuf::int32 PtzCmdPar::zoom_speed() const {
  // @@protoc_insertion_point(field_get:camback.PtzCmdPar.zoom_speed)
  return zoom_speed_;
}
inline void PtzCmdPar::set_zoom_speed(::google::protobuf::int32 value) {
  
  zoom_speed_ = value;
  // @@protoc_insertion_point(field_set:camback.PtzCmdPar.zoom_speed)
}

// float pan_abs = 4;
inline void PtzCmdPar::clear_pan_abs() {
  pan_abs_ = 0;
}
inline float PtzCmdPar::pan_abs() const {
  // @@protoc_insertion_point(field_get:camback.PtzCmdPar.pan_abs)
  return pan_abs_;
}
inline void PtzCmdPar::set_pan_abs(float value) {
  
  pan_abs_ = value;
  // @@protoc_insertion_point(field_set:camback.PtzCmdPar.pan_abs)
}

// float tilt_abs = 5;
inline void PtzCmdPar::clear_tilt_abs() {
  tilt_abs_ = 0;
}
inline float PtzCmdPar::tilt_abs() const {
  // @@protoc_insertion_point(field_get:camback.PtzCmdPar.tilt_abs)
  return tilt_abs_;
}
inline void PtzCmdPar::set_tilt_abs(float value) {
  
  tilt_abs_ = value;
  // @@protoc_insertion_point(field_set:camback.PtzCmdPar.tilt_abs)
}

// -------------------------------------------------------------------

// PtzCommandResult

// int32 err = 1;
inline void PtzCommandResult::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 PtzCommandResult::err() const {
  // @@protoc_insertion_point(field_get:camback.PtzCommandResult.err)
  return err_;
}
inline void PtzCommandResult::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:camback.PtzCommandResult.err)
}

// -------------------------------------------------------------------

// PTZInfoQ

// int32 dummy = 1;
inline void PTZInfoQ::clear_dummy() {
  dummy_ = 0;
}
inline ::google::protobuf::int32 PTZInfoQ::dummy() const {
  // @@protoc_insertion_point(field_get:camback.PTZInfoQ.dummy)
  return dummy_;
}
inline void PTZInfoQ::set_dummy(::google::protobuf::int32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:camback.PTZInfoQ.dummy)
}

// -------------------------------------------------------------------

// PTZPosInfo

// int32 pan_pos = 1;
inline void PTZPosInfo::clear_pan_pos() {
  pan_pos_ = 0;
}
inline ::google::protobuf::int32 PTZPosInfo::pan_pos() const {
  // @@protoc_insertion_point(field_get:camback.PTZPosInfo.pan_pos)
  return pan_pos_;
}
inline void PTZPosInfo::set_pan_pos(::google::protobuf::int32 value) {
  
  pan_pos_ = value;
  // @@protoc_insertion_point(field_set:camback.PTZPosInfo.pan_pos)
}

// int32 tilt_pos = 2;
inline void PTZPosInfo::clear_tilt_pos() {
  tilt_pos_ = 0;
}
inline ::google::protobuf::int32 PTZPosInfo::tilt_pos() const {
  // @@protoc_insertion_point(field_get:camback.PTZPosInfo.tilt_pos)
  return tilt_pos_;
}
inline void PTZPosInfo::set_tilt_pos(::google::protobuf::int32 value) {
  
  tilt_pos_ = value;
  // @@protoc_insertion_point(field_set:camback.PTZPosInfo.tilt_pos)
}

// int32 zoom_pos = 3;
inline void PTZPosInfo::clear_zoom_pos() {
  zoom_pos_ = 0;
}
inline ::google::protobuf::int32 PTZPosInfo::zoom_pos() const {
  // @@protoc_insertion_point(field_get:camback.PTZPosInfo.zoom_pos)
  return zoom_pos_;
}
inline void PTZPosInfo::set_zoom_pos(::google::protobuf::int32 value) {
  
  zoom_pos_ = value;
  // @@protoc_insertion_point(field_set:camback.PTZPosInfo.zoom_pos)
}

// -------------------------------------------------------------------

// PanTiltPos

// float pan_pos = 1;
inline void PanTiltPos::clear_pan_pos() {
  pan_pos_ = 0;
}
inline float PanTiltPos::pan_pos() const {
  // @@protoc_insertion_point(field_get:camback.PanTiltPos.pan_pos)
  return pan_pos_;
}
inline void PanTiltPos::set_pan_pos(float value) {
  
  pan_pos_ = value;
  // @@protoc_insertion_point(field_set:camback.PanTiltPos.pan_pos)
}

// float tilt_pos = 2;
inline void PanTiltPos::clear_tilt_pos() {
  tilt_pos_ = 0;
}
inline float PanTiltPos::tilt_pos() const {
  // @@protoc_insertion_point(field_get:camback.PanTiltPos.tilt_pos)
  return tilt_pos_;
}
inline void PanTiltPos::set_tilt_pos(float value) {
  
  tilt_pos_ = value;
  // @@protoc_insertion_point(field_set:camback.PanTiltPos.tilt_pos)
}

// -------------------------------------------------------------------

// PTZCmdInfo

// string pan_cmd = 1;
inline void PTZCmdInfo::clear_pan_cmd() {
  pan_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PTZCmdInfo::pan_cmd() const {
  // @@protoc_insertion_point(field_get:camback.PTZCmdInfo.pan_cmd)
  return pan_cmd_.GetNoArena();
}
inline void PTZCmdInfo::set_pan_cmd(const ::std::string& value) {
  
  pan_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camback.PTZCmdInfo.pan_cmd)
}
#if LANG_CXX11
inline void PTZCmdInfo::set_pan_cmd(::std::string&& value) {
  
  pan_cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camback.PTZCmdInfo.pan_cmd)
}
#endif
inline void PTZCmdInfo::set_pan_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pan_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camback.PTZCmdInfo.pan_cmd)
}
inline void PTZCmdInfo::set_pan_cmd(const char* value, size_t size) {
  
  pan_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camback.PTZCmdInfo.pan_cmd)
}
inline ::std::string* PTZCmdInfo::mutable_pan_cmd() {
  
  // @@protoc_insertion_point(field_mutable:camback.PTZCmdInfo.pan_cmd)
  return pan_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PTZCmdInfo::release_pan_cmd() {
  // @@protoc_insertion_point(field_release:camback.PTZCmdInfo.pan_cmd)
  
  return pan_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PTZCmdInfo::set_allocated_pan_cmd(::std::string* pan_cmd) {
  if (pan_cmd != NULL) {
    
  } else {
    
  }
  pan_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pan_cmd);
  // @@protoc_insertion_point(field_set_allocated:camback.PTZCmdInfo.pan_cmd)
}

// string tilt_cmd = 2;
inline void PTZCmdInfo::clear_tilt_cmd() {
  tilt_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PTZCmdInfo::tilt_cmd() const {
  // @@protoc_insertion_point(field_get:camback.PTZCmdInfo.tilt_cmd)
  return tilt_cmd_.GetNoArena();
}
inline void PTZCmdInfo::set_tilt_cmd(const ::std::string& value) {
  
  tilt_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camback.PTZCmdInfo.tilt_cmd)
}
#if LANG_CXX11
inline void PTZCmdInfo::set_tilt_cmd(::std::string&& value) {
  
  tilt_cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camback.PTZCmdInfo.tilt_cmd)
}
#endif
inline void PTZCmdInfo::set_tilt_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tilt_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camback.PTZCmdInfo.tilt_cmd)
}
inline void PTZCmdInfo::set_tilt_cmd(const char* value, size_t size) {
  
  tilt_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camback.PTZCmdInfo.tilt_cmd)
}
inline ::std::string* PTZCmdInfo::mutable_tilt_cmd() {
  
  // @@protoc_insertion_point(field_mutable:camback.PTZCmdInfo.tilt_cmd)
  return tilt_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PTZCmdInfo::release_tilt_cmd() {
  // @@protoc_insertion_point(field_release:camback.PTZCmdInfo.tilt_cmd)
  
  return tilt_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PTZCmdInfo::set_allocated_tilt_cmd(::std::string* tilt_cmd) {
  if (tilt_cmd != NULL) {
    
  } else {
    
  }
  tilt_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tilt_cmd);
  // @@protoc_insertion_point(field_set_allocated:camback.PTZCmdInfo.tilt_cmd)
}

// string zoom_cmd = 3;
inline void PTZCmdInfo::clear_zoom_cmd() {
  zoom_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PTZCmdInfo::zoom_cmd() const {
  // @@protoc_insertion_point(field_get:camback.PTZCmdInfo.zoom_cmd)
  return zoom_cmd_.GetNoArena();
}
inline void PTZCmdInfo::set_zoom_cmd(const ::std::string& value) {
  
  zoom_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camback.PTZCmdInfo.zoom_cmd)
}
#if LANG_CXX11
inline void PTZCmdInfo::set_zoom_cmd(::std::string&& value) {
  
  zoom_cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camback.PTZCmdInfo.zoom_cmd)
}
#endif
inline void PTZCmdInfo::set_zoom_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zoom_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camback.PTZCmdInfo.zoom_cmd)
}
inline void PTZCmdInfo::set_zoom_cmd(const char* value, size_t size) {
  
  zoom_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camback.PTZCmdInfo.zoom_cmd)
}
inline ::std::string* PTZCmdInfo::mutable_zoom_cmd() {
  
  // @@protoc_insertion_point(field_mutable:camback.PTZCmdInfo.zoom_cmd)
  return zoom_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PTZCmdInfo::release_zoom_cmd() {
  // @@protoc_insertion_point(field_release:camback.PTZCmdInfo.zoom_cmd)
  
  return zoom_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PTZCmdInfo::set_allocated_zoom_cmd(::std::string* zoom_cmd) {
  if (zoom_cmd != NULL) {
    
  } else {
    
  }
  zoom_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zoom_cmd);
  // @@protoc_insertion_point(field_set_allocated:camback.PTZCmdInfo.zoom_cmd)
}

// -------------------------------------------------------------------

// PanCmdInfo

// string pan_cmd = 1;
inline void PanCmdInfo::clear_pan_cmd() {
  pan_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PanCmdInfo::pan_cmd() const {
  // @@protoc_insertion_point(field_get:camback.PanCmdInfo.pan_cmd)
  return pan_cmd_.GetNoArena();
}
inline void PanCmdInfo::set_pan_cmd(const ::std::string& value) {
  
  pan_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camback.PanCmdInfo.pan_cmd)
}
#if LANG_CXX11
inline void PanCmdInfo::set_pan_cmd(::std::string&& value) {
  
  pan_cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camback.PanCmdInfo.pan_cmd)
}
#endif
inline void PanCmdInfo::set_pan_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pan_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camback.PanCmdInfo.pan_cmd)
}
inline void PanCmdInfo::set_pan_cmd(const char* value, size_t size) {
  
  pan_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camback.PanCmdInfo.pan_cmd)
}
inline ::std::string* PanCmdInfo::mutable_pan_cmd() {
  
  // @@protoc_insertion_point(field_mutable:camback.PanCmdInfo.pan_cmd)
  return pan_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PanCmdInfo::release_pan_cmd() {
  // @@protoc_insertion_point(field_release:camback.PanCmdInfo.pan_cmd)
  
  return pan_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PanCmdInfo::set_allocated_pan_cmd(::std::string* pan_cmd) {
  if (pan_cmd != NULL) {
    
  } else {
    
  }
  pan_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pan_cmd);
  // @@protoc_insertion_point(field_set_allocated:camback.PanCmdInfo.pan_cmd)
}

// -------------------------------------------------------------------

// TiltCmdInfo

// string tilt_cmd = 1;
inline void TiltCmdInfo::clear_tilt_cmd() {
  tilt_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TiltCmdInfo::tilt_cmd() const {
  // @@protoc_insertion_point(field_get:camback.TiltCmdInfo.tilt_cmd)
  return tilt_cmd_.GetNoArena();
}
inline void TiltCmdInfo::set_tilt_cmd(const ::std::string& value) {
  
  tilt_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camback.TiltCmdInfo.tilt_cmd)
}
#if LANG_CXX11
inline void TiltCmdInfo::set_tilt_cmd(::std::string&& value) {
  
  tilt_cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camback.TiltCmdInfo.tilt_cmd)
}
#endif
inline void TiltCmdInfo::set_tilt_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tilt_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camback.TiltCmdInfo.tilt_cmd)
}
inline void TiltCmdInfo::set_tilt_cmd(const char* value, size_t size) {
  
  tilt_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camback.TiltCmdInfo.tilt_cmd)
}
inline ::std::string* TiltCmdInfo::mutable_tilt_cmd() {
  
  // @@protoc_insertion_point(field_mutable:camback.TiltCmdInfo.tilt_cmd)
  return tilt_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TiltCmdInfo::release_tilt_cmd() {
  // @@protoc_insertion_point(field_release:camback.TiltCmdInfo.tilt_cmd)
  
  return tilt_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TiltCmdInfo::set_allocated_tilt_cmd(::std::string* tilt_cmd) {
  if (tilt_cmd != NULL) {
    
  } else {
    
  }
  tilt_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tilt_cmd);
  // @@protoc_insertion_point(field_set_allocated:camback.TiltCmdInfo.tilt_cmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace camback

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camback_2eproto__INCLUDED
