// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camback.proto

#include "camback.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace camback {
class PtzCmdParDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PtzCmdPar>
      _instance;
} _PtzCmdPar_default_instance_;
class PtzCommandResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PtzCommandResult>
      _instance;
} _PtzCommandResult_default_instance_;
class PTZInfoQDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PTZInfoQ>
      _instance;
} _PTZInfoQ_default_instance_;
class PTZPosInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PTZPosInfo>
      _instance;
} _PTZPosInfo_default_instance_;
class PanTiltPosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PanTiltPos>
      _instance;
} _PanTiltPos_default_instance_;
class PTZCmdInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PTZCmdInfo>
      _instance;
} _PTZCmdInfo_default_instance_;
class PanCmdInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PanCmdInfo>
      _instance;
} _PanCmdInfo_default_instance_;
class TiltCmdInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TiltCmdInfo>
      _instance;
} _TiltCmdInfo_default_instance_;
}  // namespace camback
namespace protobuf_camback_2eproto {
void InitDefaultsPtzCmdParImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::camback::_PtzCmdPar_default_instance_;
    new (ptr) ::camback::PtzCmdPar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camback::PtzCmdPar::InitAsDefaultInstance();
}

void InitDefaultsPtzCmdPar() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPtzCmdParImpl);
}

void InitDefaultsPtzCommandResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::camback::_PtzCommandResult_default_instance_;
    new (ptr) ::camback::PtzCommandResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camback::PtzCommandResult::InitAsDefaultInstance();
}

void InitDefaultsPtzCommandResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPtzCommandResultImpl);
}

void InitDefaultsPTZInfoQImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::camback::_PTZInfoQ_default_instance_;
    new (ptr) ::camback::PTZInfoQ();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camback::PTZInfoQ::InitAsDefaultInstance();
}

void InitDefaultsPTZInfoQ() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPTZInfoQImpl);
}

void InitDefaultsPTZPosInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::camback::_PTZPosInfo_default_instance_;
    new (ptr) ::camback::PTZPosInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camback::PTZPosInfo::InitAsDefaultInstance();
}

void InitDefaultsPTZPosInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPTZPosInfoImpl);
}

void InitDefaultsPanTiltPosImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::camback::_PanTiltPos_default_instance_;
    new (ptr) ::camback::PanTiltPos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camback::PanTiltPos::InitAsDefaultInstance();
}

void InitDefaultsPanTiltPos() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPanTiltPosImpl);
}

void InitDefaultsPTZCmdInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::camback::_PTZCmdInfo_default_instance_;
    new (ptr) ::camback::PTZCmdInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camback::PTZCmdInfo::InitAsDefaultInstance();
}

void InitDefaultsPTZCmdInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPTZCmdInfoImpl);
}

void InitDefaultsPanCmdInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::camback::_PanCmdInfo_default_instance_;
    new (ptr) ::camback::PanCmdInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camback::PanCmdInfo::InitAsDefaultInstance();
}

void InitDefaultsPanCmdInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPanCmdInfoImpl);
}

void InitDefaultsTiltCmdInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::camback::_TiltCmdInfo_default_instance_;
    new (ptr) ::camback::TiltCmdInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camback::TiltCmdInfo::InitAsDefaultInstance();
}

void InitDefaultsTiltCmdInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTiltCmdInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PtzCmdPar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PtzCmdPar, pan_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PtzCmdPar, tilt_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PtzCmdPar, zoom_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PtzCmdPar, pan_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PtzCmdPar, tilt_abs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PtzCommandResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PtzCommandResult, err_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZInfoQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZInfoQ, dummy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZPosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZPosInfo, pan_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZPosInfo, tilt_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZPosInfo, zoom_pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PanTiltPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PanTiltPos, pan_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PanTiltPos, tilt_pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZCmdInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZCmdInfo, pan_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZCmdInfo, tilt_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PTZCmdInfo, zoom_cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PanCmdInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::PanCmdInfo, pan_cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::TiltCmdInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camback::TiltCmdInfo, tilt_cmd_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::camback::PtzCmdPar)},
  { 10, -1, sizeof(::camback::PtzCommandResult)},
  { 16, -1, sizeof(::camback::PTZInfoQ)},
  { 22, -1, sizeof(::camback::PTZPosInfo)},
  { 30, -1, sizeof(::camback::PanTiltPos)},
  { 37, -1, sizeof(::camback::PTZCmdInfo)},
  { 45, -1, sizeof(::camback::PanCmdInfo)},
  { 51, -1, sizeof(::camback::TiltCmdInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::camback::_PtzCmdPar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camback::_PtzCommandResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camback::_PTZInfoQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camback::_PTZPosInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camback::_PanTiltPos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camback::_PTZCmdInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camback::_PanCmdInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camback::_TiltCmdInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "camback.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rcamback.proto\022\007camback\"i\n\tPtzCmdPar\022\021\n"
      "\tpan_speed\030\001 \001(\005\022\022\n\ntilt_speed\030\002 \001(\005\022\022\n\n"
      "zoom_speed\030\003 \001(\005\022\017\n\007pan_abs\030\004 \001(\002\022\020\n\010til"
      "t_abs\030\005 \001(\002\"\037\n\020PtzCommandResult\022\013\n\003err\030\001"
      " \001(\005\"\031\n\010PTZInfoQ\022\r\n\005dummy\030\001 \001(\005\"A\n\nPTZPo"
      "sInfo\022\017\n\007pan_pos\030\001 \001(\005\022\020\n\010tilt_pos\030\002 \001(\005"
      "\022\020\n\010zoom_pos\030\003 \001(\005\"/\n\nPanTiltPos\022\017\n\007pan_"
      "pos\030\001 \001(\002\022\020\n\010tilt_pos\030\002 \001(\002\"A\n\nPTZCmdInf"
      "o\022\017\n\007pan_cmd\030\001 \001(\t\022\020\n\010tilt_cmd\030\002 \001(\t\022\020\n\010"
      "zoom_cmd\030\003 \001(\t\"\035\n\nPanCmdInfo\022\017\n\007pan_cmd\030"
      "\001 \001(\t\"\037\n\013TiltCmdInfo\022\020\n\010tilt_cmd\030\001 \001(\t2\252"
      "\006\n\nPTZService\0229\n\rGetPTZPosInfo\022\021.camback"
      ".PTZInfoQ\032\023.camback.PTZPosInfo\"\000\022:\n\007PanL"
      "eft\022\022.camback.PtzCmdPar\032\031.camback.PtzCom"
      "mandResult\"\000\022;\n\010PanRight\022\022.camback.PtzCm"
      "dPar\032\031.camback.PtzCommandResult\"\000\0229\n\006Til"
      "tUp\022\022.camback.PtzCmdPar\032\031.camback.PtzCom"
      "mandResult\"\000\022;\n\010TiltDown\022\022.camback.PtzCm"
      "dPar\032\031.camback.PtzCommandResult\"\000\022:\n\007Pan"
      "Stop\022\022.camback.PtzCmdPar\032\031.camback.PtzCo"
      "mmandResult\"\000\022=\n\nPanTiltAbs\022\022.camback.Pt"
      "zCmdPar\032\031.camback.PtzCommandResult\"\000\0229\n\006"
      "ZoomIn\022\022.camback.PtzCmdPar\032\031.camback.Ptz"
      "CommandResult\"\000\022:\n\007ZoomOut\022\022.camback.Ptz"
      "CmdPar\032\031.camback.PtzCommandResult\"\000\022;\n\010Z"
      "oomStop\022\022.camback.PtzCmdPar\032\031.camback.Pt"
      "zCommandResult\"\000\022=\n\tPanAbsCmd\022\023.camback."
      "PanCmdInfo\032\031.camback.PtzCommandResult\"\000\022"
      "\?\n\nTiltAbsCmd\022\024.camback.TiltCmdInfo\032\031.ca"
      "mback.PtzCommandResult\"\000\022A\n\rSetPanTiltPo"
      "s\022\023.camback.PanTiltPos\032\031.camback.PtzComm"
      "andResult\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camback.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_camback_2eproto
namespace camback {

// ===================================================================

void PtzCmdPar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PtzCmdPar::kPanSpeedFieldNumber;
const int PtzCmdPar::kTiltSpeedFieldNumber;
const int PtzCmdPar::kZoomSpeedFieldNumber;
const int PtzCmdPar::kPanAbsFieldNumber;
const int PtzCmdPar::kTiltAbsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PtzCmdPar::PtzCmdPar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_camback_2eproto::InitDefaultsPtzCmdPar();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camback.PtzCmdPar)
}
PtzCmdPar::PtzCmdPar(const PtzCmdPar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pan_speed_, &from.pan_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&tilt_abs_) -
    reinterpret_cast<char*>(&pan_speed_)) + sizeof(tilt_abs_));
  // @@protoc_insertion_point(copy_constructor:camback.PtzCmdPar)
}

void PtzCmdPar::SharedCtor() {
  ::memset(&pan_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilt_abs_) -
      reinterpret_cast<char*>(&pan_speed_)) + sizeof(tilt_abs_));
  _cached_size_ = 0;
}

PtzCmdPar::~PtzCmdPar() {
  // @@protoc_insertion_point(destructor:camback.PtzCmdPar)
  SharedDtor();
}

void PtzCmdPar::SharedDtor() {
}

void PtzCmdPar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PtzCmdPar::descriptor() {
  ::protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PtzCmdPar& PtzCmdPar::default_instance() {
  ::protobuf_camback_2eproto::InitDefaultsPtzCmdPar();
  return *internal_default_instance();
}

PtzCmdPar* PtzCmdPar::New(::google::protobuf::Arena* arena) const {
  PtzCmdPar* n = new PtzCmdPar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PtzCmdPar::Clear() {
// @@protoc_insertion_point(message_clear_start:camback.PtzCmdPar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pan_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilt_abs_) -
      reinterpret_cast<char*>(&pan_speed_)) + sizeof(tilt_abs_));
  _internal_metadata_.Clear();
}

bool PtzCmdPar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camback.PtzCmdPar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pan_speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pan_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tilt_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tilt_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 zoom_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoom_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pan_abs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pan_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tilt_abs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tilt_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camback.PtzCmdPar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camback.PtzCmdPar)
  return false;
#undef DO_
}

void PtzCmdPar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camback.PtzCmdPar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pan_speed = 1;
  if (this->pan_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pan_speed(), output);
  }

  // int32 tilt_speed = 2;
  if (this->tilt_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tilt_speed(), output);
  }

  // int32 zoom_speed = 3;
  if (this->zoom_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zoom_speed(), output);
  }

  // float pan_abs = 4;
  if (this->pan_abs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pan_abs(), output);
  }

  // float tilt_abs = 5;
  if (this->tilt_abs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->tilt_abs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camback.PtzCmdPar)
}

::google::protobuf::uint8* PtzCmdPar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camback.PtzCmdPar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pan_speed = 1;
  if (this->pan_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pan_speed(), target);
  }

  // int32 tilt_speed = 2;
  if (this->tilt_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tilt_speed(), target);
  }

  // int32 zoom_speed = 3;
  if (this->zoom_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zoom_speed(), target);
  }

  // float pan_abs = 4;
  if (this->pan_abs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pan_abs(), target);
  }

  // float tilt_abs = 5;
  if (this->tilt_abs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->tilt_abs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camback.PtzCmdPar)
  return target;
}

size_t PtzCmdPar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camback.PtzCmdPar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 pan_speed = 1;
  if (this->pan_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pan_speed());
  }

  // int32 tilt_speed = 2;
  if (this->tilt_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tilt_speed());
  }

  // int32 zoom_speed = 3;
  if (this->zoom_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zoom_speed());
  }

  // float pan_abs = 4;
  if (this->pan_abs() != 0) {
    total_size += 1 + 4;
  }

  // float tilt_abs = 5;
  if (this->tilt_abs() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PtzCmdPar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camback.PtzCmdPar)
  GOOGLE_DCHECK_NE(&from, this);
  const PtzCmdPar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PtzCmdPar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camback.PtzCmdPar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camback.PtzCmdPar)
    MergeFrom(*source);
  }
}

void PtzCmdPar::MergeFrom(const PtzCmdPar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camback.PtzCmdPar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pan_speed() != 0) {
    set_pan_speed(from.pan_speed());
  }
  if (from.tilt_speed() != 0) {
    set_tilt_speed(from.tilt_speed());
  }
  if (from.zoom_speed() != 0) {
    set_zoom_speed(from.zoom_speed());
  }
  if (from.pan_abs() != 0) {
    set_pan_abs(from.pan_abs());
  }
  if (from.tilt_abs() != 0) {
    set_tilt_abs(from.tilt_abs());
  }
}

void PtzCmdPar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camback.PtzCmdPar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtzCmdPar::CopyFrom(const PtzCmdPar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camback.PtzCmdPar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzCmdPar::IsInitialized() const {
  return true;
}

void PtzCmdPar::Swap(PtzCmdPar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PtzCmdPar::InternalSwap(PtzCmdPar* other) {
  using std::swap;
  swap(pan_speed_, other->pan_speed_);
  swap(tilt_speed_, other->tilt_speed_);
  swap(zoom_speed_, other->zoom_speed_);
  swap(pan_abs_, other->pan_abs_);
  swap(tilt_abs_, other->tilt_abs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PtzCmdPar::GetMetadata() const {
  protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PtzCommandResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PtzCommandResult::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PtzCommandResult::PtzCommandResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_camback_2eproto::InitDefaultsPtzCommandResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camback.PtzCommandResult)
}
PtzCommandResult::PtzCommandResult(const PtzCommandResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:camback.PtzCommandResult)
}

void PtzCommandResult::SharedCtor() {
  err_ = 0;
  _cached_size_ = 0;
}

PtzCommandResult::~PtzCommandResult() {
  // @@protoc_insertion_point(destructor:camback.PtzCommandResult)
  SharedDtor();
}

void PtzCommandResult::SharedDtor() {
}

void PtzCommandResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PtzCommandResult::descriptor() {
  ::protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PtzCommandResult& PtzCommandResult::default_instance() {
  ::protobuf_camback_2eproto::InitDefaultsPtzCommandResult();
  return *internal_default_instance();
}

PtzCommandResult* PtzCommandResult::New(::google::protobuf::Arena* arena) const {
  PtzCommandResult* n = new PtzCommandResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PtzCommandResult::Clear() {
// @@protoc_insertion_point(message_clear_start:camback.PtzCommandResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear();
}

bool PtzCommandResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camback.PtzCommandResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camback.PtzCommandResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camback.PtzCommandResult)
  return false;
#undef DO_
}

void PtzCommandResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camback.PtzCommandResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camback.PtzCommandResult)
}

::google::protobuf::uint8* PtzCommandResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camback.PtzCommandResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camback.PtzCommandResult)
  return target;
}

size_t PtzCommandResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camback.PtzCommandResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 err = 1;
  if (this->err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PtzCommandResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camback.PtzCommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PtzCommandResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PtzCommandResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camback.PtzCommandResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camback.PtzCommandResult)
    MergeFrom(*source);
  }
}

void PtzCommandResult::MergeFrom(const PtzCommandResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camback.PtzCommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    set_err(from.err());
  }
}

void PtzCommandResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camback.PtzCommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtzCommandResult::CopyFrom(const PtzCommandResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camback.PtzCommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzCommandResult::IsInitialized() const {
  return true;
}

void PtzCommandResult::Swap(PtzCommandResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PtzCommandResult::InternalSwap(PtzCommandResult* other) {
  using std::swap;
  swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PtzCommandResult::GetMetadata() const {
  protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PTZInfoQ::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PTZInfoQ::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PTZInfoQ::PTZInfoQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_camback_2eproto::InitDefaultsPTZInfoQ();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camback.PTZInfoQ)
}
PTZInfoQ::PTZInfoQ(const PTZInfoQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:camback.PTZInfoQ)
}

void PTZInfoQ::SharedCtor() {
  dummy_ = 0;
  _cached_size_ = 0;
}

PTZInfoQ::~PTZInfoQ() {
  // @@protoc_insertion_point(destructor:camback.PTZInfoQ)
  SharedDtor();
}

void PTZInfoQ::SharedDtor() {
}

void PTZInfoQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PTZInfoQ::descriptor() {
  ::protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PTZInfoQ& PTZInfoQ::default_instance() {
  ::protobuf_camback_2eproto::InitDefaultsPTZInfoQ();
  return *internal_default_instance();
}

PTZInfoQ* PTZInfoQ::New(::google::protobuf::Arena* arena) const {
  PTZInfoQ* n = new PTZInfoQ;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PTZInfoQ::Clear() {
// @@protoc_insertion_point(message_clear_start:camback.PTZInfoQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0;
  _internal_metadata_.Clear();
}

bool PTZInfoQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camback.PTZInfoQ)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camback.PTZInfoQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camback.PTZInfoQ)
  return false;
#undef DO_
}

void PTZInfoQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camback.PTZInfoQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camback.PTZInfoQ)
}

::google::protobuf::uint8* PTZInfoQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camback.PTZInfoQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dummy = 1;
  if (this->dummy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camback.PTZInfoQ)
  return target;
}

size_t PTZInfoQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camback.PTZInfoQ)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTZInfoQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camback.PTZInfoQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PTZInfoQ* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PTZInfoQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camback.PTZInfoQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camback.PTZInfoQ)
    MergeFrom(*source);
  }
}

void PTZInfoQ::MergeFrom(const PTZInfoQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camback.PTZInfoQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void PTZInfoQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camback.PTZInfoQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTZInfoQ::CopyFrom(const PTZInfoQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camback.PTZInfoQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTZInfoQ::IsInitialized() const {
  return true;
}

void PTZInfoQ::Swap(PTZInfoQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PTZInfoQ::InternalSwap(PTZInfoQ* other) {
  using std::swap;
  swap(dummy_, other->dummy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PTZInfoQ::GetMetadata() const {
  protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PTZPosInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PTZPosInfo::kPanPosFieldNumber;
const int PTZPosInfo::kTiltPosFieldNumber;
const int PTZPosInfo::kZoomPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PTZPosInfo::PTZPosInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_camback_2eproto::InitDefaultsPTZPosInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camback.PTZPosInfo)
}
PTZPosInfo::PTZPosInfo(const PTZPosInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pan_pos_, &from.pan_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoom_pos_) -
    reinterpret_cast<char*>(&pan_pos_)) + sizeof(zoom_pos_));
  // @@protoc_insertion_point(copy_constructor:camback.PTZPosInfo)
}

void PTZPosInfo::SharedCtor() {
  ::memset(&pan_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_pos_) -
      reinterpret_cast<char*>(&pan_pos_)) + sizeof(zoom_pos_));
  _cached_size_ = 0;
}

PTZPosInfo::~PTZPosInfo() {
  // @@protoc_insertion_point(destructor:camback.PTZPosInfo)
  SharedDtor();
}

void PTZPosInfo::SharedDtor() {
}

void PTZPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PTZPosInfo::descriptor() {
  ::protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PTZPosInfo& PTZPosInfo::default_instance() {
  ::protobuf_camback_2eproto::InitDefaultsPTZPosInfo();
  return *internal_default_instance();
}

PTZPosInfo* PTZPosInfo::New(::google::protobuf::Arena* arena) const {
  PTZPosInfo* n = new PTZPosInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PTZPosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:camback.PTZPosInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pan_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_pos_) -
      reinterpret_cast<char*>(&pan_pos_)) + sizeof(zoom_pos_));
  _internal_metadata_.Clear();
}

bool PTZPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camback.PTZPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pan_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pan_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tilt_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tilt_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 zoom_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoom_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camback.PTZPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camback.PTZPosInfo)
  return false;
#undef DO_
}

void PTZPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camback.PTZPosInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pan_pos = 1;
  if (this->pan_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pan_pos(), output);
  }

  // int32 tilt_pos = 2;
  if (this->tilt_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tilt_pos(), output);
  }

  // int32 zoom_pos = 3;
  if (this->zoom_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zoom_pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camback.PTZPosInfo)
}

::google::protobuf::uint8* PTZPosInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camback.PTZPosInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pan_pos = 1;
  if (this->pan_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pan_pos(), target);
  }

  // int32 tilt_pos = 2;
  if (this->tilt_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tilt_pos(), target);
  }

  // int32 zoom_pos = 3;
  if (this->zoom_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zoom_pos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camback.PTZPosInfo)
  return target;
}

size_t PTZPosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camback.PTZPosInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 pan_pos = 1;
  if (this->pan_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pan_pos());
  }

  // int32 tilt_pos = 2;
  if (this->tilt_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tilt_pos());
  }

  // int32 zoom_pos = 3;
  if (this->zoom_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zoom_pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTZPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camback.PTZPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PTZPosInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PTZPosInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camback.PTZPosInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camback.PTZPosInfo)
    MergeFrom(*source);
  }
}

void PTZPosInfo::MergeFrom(const PTZPosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camback.PTZPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pan_pos() != 0) {
    set_pan_pos(from.pan_pos());
  }
  if (from.tilt_pos() != 0) {
    set_tilt_pos(from.tilt_pos());
  }
  if (from.zoom_pos() != 0) {
    set_zoom_pos(from.zoom_pos());
  }
}

void PTZPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camback.PTZPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTZPosInfo::CopyFrom(const PTZPosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camback.PTZPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTZPosInfo::IsInitialized() const {
  return true;
}

void PTZPosInfo::Swap(PTZPosInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PTZPosInfo::InternalSwap(PTZPosInfo* other) {
  using std::swap;
  swap(pan_pos_, other->pan_pos_);
  swap(tilt_pos_, other->tilt_pos_);
  swap(zoom_pos_, other->zoom_pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PTZPosInfo::GetMetadata() const {
  protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PanTiltPos::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PanTiltPos::kPanPosFieldNumber;
const int PanTiltPos::kTiltPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PanTiltPos::PanTiltPos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_camback_2eproto::InitDefaultsPanTiltPos();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camback.PanTiltPos)
}
PanTiltPos::PanTiltPos(const PanTiltPos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pan_pos_, &from.pan_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&tilt_pos_) -
    reinterpret_cast<char*>(&pan_pos_)) + sizeof(tilt_pos_));
  // @@protoc_insertion_point(copy_constructor:camback.PanTiltPos)
}

void PanTiltPos::SharedCtor() {
  ::memset(&pan_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilt_pos_) -
      reinterpret_cast<char*>(&pan_pos_)) + sizeof(tilt_pos_));
  _cached_size_ = 0;
}

PanTiltPos::~PanTiltPos() {
  // @@protoc_insertion_point(destructor:camback.PanTiltPos)
  SharedDtor();
}

void PanTiltPos::SharedDtor() {
}

void PanTiltPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PanTiltPos::descriptor() {
  ::protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PanTiltPos& PanTiltPos::default_instance() {
  ::protobuf_camback_2eproto::InitDefaultsPanTiltPos();
  return *internal_default_instance();
}

PanTiltPos* PanTiltPos::New(::google::protobuf::Arena* arena) const {
  PanTiltPos* n = new PanTiltPos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PanTiltPos::Clear() {
// @@protoc_insertion_point(message_clear_start:camback.PanTiltPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pan_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilt_pos_) -
      reinterpret_cast<char*>(&pan_pos_)) + sizeof(tilt_pos_));
  _internal_metadata_.Clear();
}

bool PanTiltPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camback.PanTiltPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pan_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pan_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tilt_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tilt_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camback.PanTiltPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camback.PanTiltPos)
  return false;
#undef DO_
}

void PanTiltPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camback.PanTiltPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pan_pos = 1;
  if (this->pan_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pan_pos(), output);
  }

  // float tilt_pos = 2;
  if (this->tilt_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->tilt_pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camback.PanTiltPos)
}

::google::protobuf::uint8* PanTiltPos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camback.PanTiltPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pan_pos = 1;
  if (this->pan_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pan_pos(), target);
  }

  // float tilt_pos = 2;
  if (this->tilt_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->tilt_pos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camback.PanTiltPos)
  return target;
}

size_t PanTiltPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camback.PanTiltPos)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float pan_pos = 1;
  if (this->pan_pos() != 0) {
    total_size += 1 + 4;
  }

  // float tilt_pos = 2;
  if (this->tilt_pos() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PanTiltPos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camback.PanTiltPos)
  GOOGLE_DCHECK_NE(&from, this);
  const PanTiltPos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PanTiltPos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camback.PanTiltPos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camback.PanTiltPos)
    MergeFrom(*source);
  }
}

void PanTiltPos::MergeFrom(const PanTiltPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camback.PanTiltPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pan_pos() != 0) {
    set_pan_pos(from.pan_pos());
  }
  if (from.tilt_pos() != 0) {
    set_tilt_pos(from.tilt_pos());
  }
}

void PanTiltPos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camback.PanTiltPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanTiltPos::CopyFrom(const PanTiltPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camback.PanTiltPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanTiltPos::IsInitialized() const {
  return true;
}

void PanTiltPos::Swap(PanTiltPos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PanTiltPos::InternalSwap(PanTiltPos* other) {
  using std::swap;
  swap(pan_pos_, other->pan_pos_);
  swap(tilt_pos_, other->tilt_pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PanTiltPos::GetMetadata() const {
  protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PTZCmdInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PTZCmdInfo::kPanCmdFieldNumber;
const int PTZCmdInfo::kTiltCmdFieldNumber;
const int PTZCmdInfo::kZoomCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PTZCmdInfo::PTZCmdInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_camback_2eproto::InitDefaultsPTZCmdInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camback.PTZCmdInfo)
}
PTZCmdInfo::PTZCmdInfo(const PTZCmdInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pan_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pan_cmd().size() > 0) {
    pan_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pan_cmd_);
  }
  tilt_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tilt_cmd().size() > 0) {
    tilt_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tilt_cmd_);
  }
  zoom_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zoom_cmd().size() > 0) {
    zoom_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zoom_cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:camback.PTZCmdInfo)
}

void PTZCmdInfo::SharedCtor() {
  pan_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tilt_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoom_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PTZCmdInfo::~PTZCmdInfo() {
  // @@protoc_insertion_point(destructor:camback.PTZCmdInfo)
  SharedDtor();
}

void PTZCmdInfo::SharedDtor() {
  pan_cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tilt_cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoom_cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PTZCmdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PTZCmdInfo::descriptor() {
  ::protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PTZCmdInfo& PTZCmdInfo::default_instance() {
  ::protobuf_camback_2eproto::InitDefaultsPTZCmdInfo();
  return *internal_default_instance();
}

PTZCmdInfo* PTZCmdInfo::New(::google::protobuf::Arena* arena) const {
  PTZCmdInfo* n = new PTZCmdInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PTZCmdInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:camback.PTZCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pan_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tilt_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoom_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PTZCmdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camback.PTZCmdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pan_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pan_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pan_cmd().data(), static_cast<int>(this->pan_cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "camback.PTZCmdInfo.pan_cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tilt_cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tilt_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tilt_cmd().data(), static_cast<int>(this->tilt_cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "camback.PTZCmdInfo.tilt_cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zoom_cmd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoom_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zoom_cmd().data(), static_cast<int>(this->zoom_cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "camback.PTZCmdInfo.zoom_cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camback.PTZCmdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camback.PTZCmdInfo)
  return false;
#undef DO_
}

void PTZCmdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camback.PTZCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pan_cmd = 1;
  if (this->pan_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pan_cmd().data(), static_cast<int>(this->pan_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.PTZCmdInfo.pan_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pan_cmd(), output);
  }

  // string tilt_cmd = 2;
  if (this->tilt_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tilt_cmd().data(), static_cast<int>(this->tilt_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.PTZCmdInfo.tilt_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tilt_cmd(), output);
  }

  // string zoom_cmd = 3;
  if (this->zoom_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zoom_cmd().data(), static_cast<int>(this->zoom_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.PTZCmdInfo.zoom_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->zoom_cmd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camback.PTZCmdInfo)
}

::google::protobuf::uint8* PTZCmdInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camback.PTZCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pan_cmd = 1;
  if (this->pan_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pan_cmd().data(), static_cast<int>(this->pan_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.PTZCmdInfo.pan_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pan_cmd(), target);
  }

  // string tilt_cmd = 2;
  if (this->tilt_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tilt_cmd().data(), static_cast<int>(this->tilt_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.PTZCmdInfo.tilt_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tilt_cmd(), target);
  }

  // string zoom_cmd = 3;
  if (this->zoom_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zoom_cmd().data(), static_cast<int>(this->zoom_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.PTZCmdInfo.zoom_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zoom_cmd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camback.PTZCmdInfo)
  return target;
}

size_t PTZCmdInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camback.PTZCmdInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pan_cmd = 1;
  if (this->pan_cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pan_cmd());
  }

  // string tilt_cmd = 2;
  if (this->tilt_cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tilt_cmd());
  }

  // string zoom_cmd = 3;
  if (this->zoom_cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zoom_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTZCmdInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camback.PTZCmdInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PTZCmdInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PTZCmdInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camback.PTZCmdInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camback.PTZCmdInfo)
    MergeFrom(*source);
  }
}

void PTZCmdInfo::MergeFrom(const PTZCmdInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camback.PTZCmdInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pan_cmd().size() > 0) {

    pan_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pan_cmd_);
  }
  if (from.tilt_cmd().size() > 0) {

    tilt_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tilt_cmd_);
  }
  if (from.zoom_cmd().size() > 0) {

    zoom_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zoom_cmd_);
  }
}

void PTZCmdInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camback.PTZCmdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTZCmdInfo::CopyFrom(const PTZCmdInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camback.PTZCmdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTZCmdInfo::IsInitialized() const {
  return true;
}

void PTZCmdInfo::Swap(PTZCmdInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PTZCmdInfo::InternalSwap(PTZCmdInfo* other) {
  using std::swap;
  pan_cmd_.Swap(&other->pan_cmd_);
  tilt_cmd_.Swap(&other->tilt_cmd_);
  zoom_cmd_.Swap(&other->zoom_cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PTZCmdInfo::GetMetadata() const {
  protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PanCmdInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PanCmdInfo::kPanCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PanCmdInfo::PanCmdInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_camback_2eproto::InitDefaultsPanCmdInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camback.PanCmdInfo)
}
PanCmdInfo::PanCmdInfo(const PanCmdInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pan_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pan_cmd().size() > 0) {
    pan_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pan_cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:camback.PanCmdInfo)
}

void PanCmdInfo::SharedCtor() {
  pan_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PanCmdInfo::~PanCmdInfo() {
  // @@protoc_insertion_point(destructor:camback.PanCmdInfo)
  SharedDtor();
}

void PanCmdInfo::SharedDtor() {
  pan_cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PanCmdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PanCmdInfo::descriptor() {
  ::protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PanCmdInfo& PanCmdInfo::default_instance() {
  ::protobuf_camback_2eproto::InitDefaultsPanCmdInfo();
  return *internal_default_instance();
}

PanCmdInfo* PanCmdInfo::New(::google::protobuf::Arena* arena) const {
  PanCmdInfo* n = new PanCmdInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PanCmdInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:camback.PanCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pan_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PanCmdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camback.PanCmdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pan_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pan_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pan_cmd().data(), static_cast<int>(this->pan_cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "camback.PanCmdInfo.pan_cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camback.PanCmdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camback.PanCmdInfo)
  return false;
#undef DO_
}

void PanCmdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camback.PanCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pan_cmd = 1;
  if (this->pan_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pan_cmd().data(), static_cast<int>(this->pan_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.PanCmdInfo.pan_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pan_cmd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camback.PanCmdInfo)
}

::google::protobuf::uint8* PanCmdInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camback.PanCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pan_cmd = 1;
  if (this->pan_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pan_cmd().data(), static_cast<int>(this->pan_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.PanCmdInfo.pan_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pan_cmd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camback.PanCmdInfo)
  return target;
}

size_t PanCmdInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camback.PanCmdInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pan_cmd = 1;
  if (this->pan_cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pan_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PanCmdInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camback.PanCmdInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PanCmdInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PanCmdInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camback.PanCmdInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camback.PanCmdInfo)
    MergeFrom(*source);
  }
}

void PanCmdInfo::MergeFrom(const PanCmdInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camback.PanCmdInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pan_cmd().size() > 0) {

    pan_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pan_cmd_);
  }
}

void PanCmdInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camback.PanCmdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanCmdInfo::CopyFrom(const PanCmdInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camback.PanCmdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanCmdInfo::IsInitialized() const {
  return true;
}

void PanCmdInfo::Swap(PanCmdInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PanCmdInfo::InternalSwap(PanCmdInfo* other) {
  using std::swap;
  pan_cmd_.Swap(&other->pan_cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PanCmdInfo::GetMetadata() const {
  protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TiltCmdInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TiltCmdInfo::kTiltCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TiltCmdInfo::TiltCmdInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_camback_2eproto::InitDefaultsTiltCmdInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camback.TiltCmdInfo)
}
TiltCmdInfo::TiltCmdInfo(const TiltCmdInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tilt_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tilt_cmd().size() > 0) {
    tilt_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tilt_cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:camback.TiltCmdInfo)
}

void TiltCmdInfo::SharedCtor() {
  tilt_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TiltCmdInfo::~TiltCmdInfo() {
  // @@protoc_insertion_point(destructor:camback.TiltCmdInfo)
  SharedDtor();
}

void TiltCmdInfo::SharedDtor() {
  tilt_cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TiltCmdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TiltCmdInfo::descriptor() {
  ::protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TiltCmdInfo& TiltCmdInfo::default_instance() {
  ::protobuf_camback_2eproto::InitDefaultsTiltCmdInfo();
  return *internal_default_instance();
}

TiltCmdInfo* TiltCmdInfo::New(::google::protobuf::Arena* arena) const {
  TiltCmdInfo* n = new TiltCmdInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TiltCmdInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:camback.TiltCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tilt_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TiltCmdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camback.TiltCmdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tilt_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tilt_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tilt_cmd().data(), static_cast<int>(this->tilt_cmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "camback.TiltCmdInfo.tilt_cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camback.TiltCmdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camback.TiltCmdInfo)
  return false;
#undef DO_
}

void TiltCmdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camback.TiltCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tilt_cmd = 1;
  if (this->tilt_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tilt_cmd().data(), static_cast<int>(this->tilt_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.TiltCmdInfo.tilt_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tilt_cmd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camback.TiltCmdInfo)
}

::google::protobuf::uint8* TiltCmdInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camback.TiltCmdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tilt_cmd = 1;
  if (this->tilt_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tilt_cmd().data(), static_cast<int>(this->tilt_cmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "camback.TiltCmdInfo.tilt_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tilt_cmd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camback.TiltCmdInfo)
  return target;
}

size_t TiltCmdInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camback.TiltCmdInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tilt_cmd = 1;
  if (this->tilt_cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tilt_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TiltCmdInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camback.TiltCmdInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TiltCmdInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TiltCmdInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camback.TiltCmdInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camback.TiltCmdInfo)
    MergeFrom(*source);
  }
}

void TiltCmdInfo::MergeFrom(const TiltCmdInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camback.TiltCmdInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tilt_cmd().size() > 0) {

    tilt_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tilt_cmd_);
  }
}

void TiltCmdInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camback.TiltCmdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TiltCmdInfo::CopyFrom(const TiltCmdInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camback.TiltCmdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TiltCmdInfo::IsInitialized() const {
  return true;
}

void TiltCmdInfo::Swap(TiltCmdInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TiltCmdInfo::InternalSwap(TiltCmdInfo* other) {
  using std::swap;
  tilt_cmd_.Swap(&other->tilt_cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TiltCmdInfo::GetMetadata() const {
  protobuf_camback_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camback_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace camback

// @@protoc_insertion_point(global_scope)
