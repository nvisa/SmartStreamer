syntax="proto3";

package AlgorithmCommunication;

service AlgorithmService {
	rpc GetScreenShot(ScreenshotInfo) returns(ScreenFrame) {}
	rpc GetScreenShotStream(ScreenshotInfo) returns(stream ScreenFrame) {}
	//////////////////////////////////////////////////////////////////////////////
	rpc RunAlgorithm(RequestForAlgorithm) returns(ResponseOfRequests) { }
	rpc StopAlgorithm(RequestForAlgorithm) returns(ResponseOfRequests) { }
	rpc SetAlgorithmParameters(RequestForAlgorithm) returns(ResponseOfRequests) { }
	rpc GetAlgorithmParameters(RequestForAlgorithm) returns(ResponseOfParameterRequests) { }

	rpc GetSystemFeature(SystemFeature) returns(SystemFeature) {}
	rpc SetSystemFeature(SystemFeature) returns(SystemFeature) {}
	rpc GetAllSystemFeatures(SystemFeatures) returns(SystemFeatures) {}
	rpc SetAllSystemFeatures(SystemFeatures) returns(SystemFeatures) {}

	rpc GetAlarm(stream AlarmReqInfo) returns(stream Alarms) {}
}

service DiagnosticService {
	rpc GetDiagnosticStatusStream(DiagnosticQ) returns (stream DiagnosticInfo) {}
	rpc GetDiagnosticStatus(DiagnosticQ) returns (DiagnosticInfo) {}
}

message DiagnosticQ {
	int32 value = 1;
}

message DiagnosticInfo {
	repeated Node nodes = 1;
	int64 latency = 2;
	int64 totalUseMemory = 3;
}

message Node {
	enum NodeType {
		ELEMENT = 0;
		QUEUE = 1;
	}

	NodeType type = 1;
	Element element = 2;
	ElementQueue queue = 3;
}

message Element {
	int32 inputQueueCount = 1;
	int32 outputQueueCount = 2;
	string name = 3;
	int64 latency = 4;
	int64 totalUseMemory = 5;
}

message ElementQueue {
	float fps = 1;
	int64 bitrate = 2;
	int32 sendCount = 3;
	int64 elapsedTime = 4;
	int32 bufferCount = 5;
	int32 receivedCount = 6;
	int64 totalSize = 7;
}


message ScreenshotInfo {
	int32 channelId = 1;
	int32 quality = 2;
	float fps = 3;
}

message ScreenFrame {
    bytes frame = 1;
    int32 quality = 2;
    int64 ts = 3;
    string metadata = 4;
}

message TargetStruct {
	enum TargetClass {
		HUMAN = 0;
		CAR = 1;
		OTHER = 2;
	}
	int32 topLeftX = 1;
	int32 topLeftY = 2;
	int32 widthOfTarget = 3;
	int32 heightOfTarget = 4;
	TargetClass targetClass = 5;
}


message AlarmInfo {
	int32 baseId = 1;
	int32 stationId = 2;
	int32 deviceId = 3;
	int32 unitType = 4;
	string date = 5;
	bool alarmFlag = 6;
	TargetStruct target = 7;
	bytes frameOfAlarm = 8;
}

message CITInfo {
	enum Info {
		OK = 0;
		NOK = 1;
	}

	Info moduleInfo = 1;
	Info motorInfo = 2;
	Info usbInfo = 3;
}

message GeneralInfo {
	AlarmInfo alarmInfo = 1;
	CITInfo citInfo = 2;
}

message AlarmReqInfo {
	string filter = 1;
	int32 channel = 2;
	int32 intervalMsecs = 3;
}

message Alarm {
	repeated string key = 1;
	repeated string value = 2;
	string type = 3;

	CITInfo cit = 4;
	AlarmInfo alarm = 5;
}

message Alarms {
	repeated Alarm alarms = 1;
	int64 ts = 2;
}

//*******************************************
message ResponseOfRequests {
	enum Response {
		SUCCESSFUL = 0;
		FAIL = 1;
		MISSING_PARAMETER = 2;
		NOT_APPLICABLE = 3;
	}
	int32 err = 1;
	Response response = 2;
}

message ResponseOfParameterRequests {
	enum Response {
		SUCCESSFUL = 0;
		FAIL = 1;
		MISSING_PARAMETER = 2;
		NOT_APPLICABLE = 3;
	}
	enum Algorithm {
		MOTION = 0;
		STABILIZATION = 1;
		TRACKING = 2;
		PANAROMA = 3;
		FACE_DETECTION = 4;
		NONE = 5;
	}
	Algorithm algorithmType = 1;
	int32 error = 2;
	Response response = 3;
	MotionParameters motionParam = 4;
	TrackParameters trackParam = 5;
	StabilizationParameters stabilizationParam = 6;
	PanaromaParameters panaromaParam = 7;
	FaceDetectionParameters faceDetectionParam = 8;
}

message RequestForAlgorithm {
	enum Algorithm {
		MOTION = 0;
		STABILIZATION = 1;
		TRACKING = 2;
		PANAROMA = 3;
		FACE_DETECTION = 4;
		NONE = 5;
	}
	Algorithm algorithmType = 1;
	MotionParameters motionParam = 2;
	TrackParameters trackParam = 3;
	StabilizationParameters stabilizationParam = 4;
	PanaromaParameters panaromaParam = 5;
	FaceDetectionParameters faceDetectionParam = 6;
	int32 channel = 7;
}

message SystemFeature {
	string key = 1;
	string value = 2;
	int32 device = 3;
}

message SystemFeatures {
	repeated SystemFeature features = 1;
}

message MotionParameters {
	enum Settings {
		SENSITIVITY = 0;
		ROI = 1;
		BOTH = 2;
	}
	Settings settingChoice = 1;
	int32 sensitivity = 2;
	TRoi ROIlist = 3;
}

message TRoi {
	repeated TPolygon polygon = 1;
	TRectangle rect1 = 2;
	TRectangle rect2 = 3;
}

message TPoint{
    float x = 1;
    float y = 2;
}

message TPolygon {
    repeated TPoint points = 1;
    bool is_active = 2;
}

message TRectangle {
    TPoint upperLeft = 1;
    TPoint bottomRight = 2;
}

message TrackParameters {
        enum TrackType {
		AUTO = 0;
		SEMI_AUTO = 1;
		MANUAL = 2;
	}
	enum Mode {
		DistanceToCenter = 0;
		SizeOfObject = 1;
		UserMode = 2;
	}
	TrackType trackType = 1;
	Mode mode = 2;
	float trackScore = 3;
	int32 trackInterval = 4;
	TrackObject target = 5;
}

message TrackObject {
	float point_x = 1;
	float point_y = 2;
	float width = 3;
	float height = 4;
}

message StabilizationParameters {
        int32 privacy = 1;
        int32 sensitivity = 2;
        int32 stabilization = 3;
}

message PanaromaParameters {
	int32 dummy = 1;
}

message FaceDetectionParameters {
	int32 dummy = 1;
}

