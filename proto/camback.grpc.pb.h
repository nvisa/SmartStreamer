// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camback.proto
#ifndef GRPC_camback_2eproto__INCLUDED
#define GRPC_camback_2eproto__INCLUDED

#include "camback.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace camback {

class PTZService final {
 public:
  static constexpr char const* service_full_name() {
    return "camback.PTZService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetPTZPosInfo(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::camback::PTZPosInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PTZPosInfo>> AsyncGetPTZPosInfo(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PTZPosInfo>>(AsyncGetPTZPosInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PTZPosInfo>> PrepareAsyncGetPTZPosInfo(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PTZPosInfo>>(PrepareAsyncGetPTZPosInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status PanLeft(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncPanLeft(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncPanLeftRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncPanLeft(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncPanLeftRaw(context, request, cq));
    }
    virtual ::grpc::Status PanRight(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncPanRight(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncPanRightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncPanRight(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncPanRightRaw(context, request, cq));
    }
    virtual ::grpc::Status TiltUp(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncTiltUp(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncTiltUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncTiltUp(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncTiltUpRaw(context, request, cq));
    }
    virtual ::grpc::Status TiltDown(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncTiltDown(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncTiltDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncTiltDown(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncTiltDownRaw(context, request, cq));
    }
    virtual ::grpc::Status PanStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncPanStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncPanStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncPanStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncPanStopRaw(context, request, cq));
    }
    virtual ::grpc::Status PanTiltAbs(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncPanTiltAbs(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncPanTiltAbsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncPanTiltAbs(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncPanTiltAbsRaw(context, request, cq));
    }
    virtual ::grpc::Status ZoomIn(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncZoomIn(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncZoomInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncZoomIn(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncZoomInRaw(context, request, cq));
    }
    virtual ::grpc::Status ZoomOut(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncZoomOut(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncZoomOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncZoomOut(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncZoomOutRaw(context, request, cq));
    }
    virtual ::grpc::Status ZoomStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncZoomStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncZoomStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncZoomStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncZoomStopRaw(context, request, cq));
    }
    virtual ::grpc::Status PanAbsCmd(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncPanAbsCmd(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncPanAbsCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncPanAbsCmd(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncPanAbsCmdRaw(context, request, cq));
    }
    virtual ::grpc::Status TiltAbsCmd(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncTiltAbsCmd(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncTiltAbsCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncTiltAbsCmd(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncTiltAbsCmdRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPanTiltPos(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::camback::PtzCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> AsyncSetPanTiltPos(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(AsyncSetPanTiltPosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>> PrepareAsyncSetPanTiltPos(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>>(PrepareAsyncSetPanTiltPosRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PTZPosInfo>* AsyncGetPTZPosInfoRaw(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PTZPosInfo>* PrepareAsyncGetPTZPosInfoRaw(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncPanLeftRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncPanLeftRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncPanRightRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncPanRightRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncTiltUpRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncTiltUpRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncTiltDownRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncTiltDownRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncPanStopRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncPanStopRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncPanTiltAbsRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncPanTiltAbsRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncZoomInRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncZoomInRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncZoomOutRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncZoomOutRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncZoomStopRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncZoomStopRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncPanAbsCmdRaw(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncPanAbsCmdRaw(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncTiltAbsCmdRaw(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncTiltAbsCmdRaw(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* AsyncSetPanTiltPosRaw(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::camback::PtzCommandResult>* PrepareAsyncSetPanTiltPosRaw(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetPTZPosInfo(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::camback::PTZPosInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PTZPosInfo>> AsyncGetPTZPosInfo(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PTZPosInfo>>(AsyncGetPTZPosInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PTZPosInfo>> PrepareAsyncGetPTZPosInfo(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PTZPosInfo>>(PrepareAsyncGetPTZPosInfoRaw(context, request, cq));
    }
    ::grpc::Status PanLeft(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncPanLeft(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncPanLeftRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncPanLeft(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncPanLeftRaw(context, request, cq));
    }
    ::grpc::Status PanRight(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncPanRight(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncPanRightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncPanRight(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncPanRightRaw(context, request, cq));
    }
    ::grpc::Status TiltUp(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncTiltUp(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncTiltUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncTiltUp(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncTiltUpRaw(context, request, cq));
    }
    ::grpc::Status TiltDown(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncTiltDown(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncTiltDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncTiltDown(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncTiltDownRaw(context, request, cq));
    }
    ::grpc::Status PanStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncPanStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncPanStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncPanStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncPanStopRaw(context, request, cq));
    }
    ::grpc::Status PanTiltAbs(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncPanTiltAbs(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncPanTiltAbsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncPanTiltAbs(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncPanTiltAbsRaw(context, request, cq));
    }
    ::grpc::Status ZoomIn(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncZoomIn(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncZoomInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncZoomIn(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncZoomInRaw(context, request, cq));
    }
    ::grpc::Status ZoomOut(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncZoomOut(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncZoomOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncZoomOut(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncZoomOutRaw(context, request, cq));
    }
    ::grpc::Status ZoomStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncZoomStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncZoomStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncZoomStop(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncZoomStopRaw(context, request, cq));
    }
    ::grpc::Status PanAbsCmd(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncPanAbsCmd(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncPanAbsCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncPanAbsCmd(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncPanAbsCmdRaw(context, request, cq));
    }
    ::grpc::Status TiltAbsCmd(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncTiltAbsCmd(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncTiltAbsCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncTiltAbsCmd(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncTiltAbsCmdRaw(context, request, cq));
    }
    ::grpc::Status SetPanTiltPos(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::camback::PtzCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> AsyncSetPanTiltPos(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(AsyncSetPanTiltPosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>> PrepareAsyncSetPanTiltPos(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>>(PrepareAsyncSetPanTiltPosRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::camback::PTZPosInfo>* AsyncGetPTZPosInfoRaw(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PTZPosInfo>* PrepareAsyncGetPTZPosInfoRaw(::grpc::ClientContext* context, const ::camback::PTZInfoQ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncPanLeftRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncPanLeftRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncPanRightRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncPanRightRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncTiltUpRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncTiltUpRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncTiltDownRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncTiltDownRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncPanStopRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncPanStopRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncPanTiltAbsRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncPanTiltAbsRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncZoomInRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncZoomInRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncZoomOutRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncZoomOutRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncZoomStopRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncZoomStopRaw(::grpc::ClientContext* context, const ::camback::PtzCmdPar& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncPanAbsCmdRaw(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncPanAbsCmdRaw(::grpc::ClientContext* context, const ::camback::PanCmdInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncTiltAbsCmdRaw(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncTiltAbsCmdRaw(::grpc::ClientContext* context, const ::camback::TiltCmdInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* AsyncSetPanTiltPosRaw(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::camback::PtzCommandResult>* PrepareAsyncSetPanTiltPosRaw(::grpc::ClientContext* context, const ::camback::PanTiltPos& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPTZPosInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_PanLeft_;
    const ::grpc::internal::RpcMethod rpcmethod_PanRight_;
    const ::grpc::internal::RpcMethod rpcmethod_TiltUp_;
    const ::grpc::internal::RpcMethod rpcmethod_TiltDown_;
    const ::grpc::internal::RpcMethod rpcmethod_PanStop_;
    const ::grpc::internal::RpcMethod rpcmethod_PanTiltAbs_;
    const ::grpc::internal::RpcMethod rpcmethod_ZoomIn_;
    const ::grpc::internal::RpcMethod rpcmethod_ZoomOut_;
    const ::grpc::internal::RpcMethod rpcmethod_ZoomStop_;
    const ::grpc::internal::RpcMethod rpcmethod_PanAbsCmd_;
    const ::grpc::internal::RpcMethod rpcmethod_TiltAbsCmd_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPanTiltPos_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetPTZPosInfo(::grpc::ServerContext* context, const ::camback::PTZInfoQ* request, ::camback::PTZPosInfo* response);
    virtual ::grpc::Status PanLeft(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status PanRight(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status TiltUp(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status TiltDown(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status PanStop(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status PanTiltAbs(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status ZoomIn(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status ZoomOut(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status ZoomStop(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status PanAbsCmd(::grpc::ServerContext* context, const ::camback::PanCmdInfo* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status TiltAbsCmd(::grpc::ServerContext* context, const ::camback::TiltCmdInfo* request, ::camback::PtzCommandResult* response);
    virtual ::grpc::Status SetPanTiltPos(::grpc::ServerContext* context, const ::camback::PanTiltPos* request, ::camback::PtzCommandResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPTZPosInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPTZPosInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPTZPosInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPTZPosInfo(::grpc::ServerContext* context, const ::camback::PTZInfoQ* request, ::camback::PTZPosInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPTZPosInfo(::grpc::ServerContext* context, ::camback::PTZInfoQ* request, ::grpc::ServerAsyncResponseWriter< ::camback::PTZPosInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PanLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PanLeft() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PanLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanLeft(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPanLeft(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PanRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PanRight() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PanRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanRight(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPanRight(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TiltUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TiltUp() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TiltUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TiltUp(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTiltUp(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TiltDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TiltDown() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TiltDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TiltDown(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTiltDown(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PanStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PanStop() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PanStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanStop(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPanStop(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PanTiltAbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PanTiltAbs() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PanTiltAbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanTiltAbs(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPanTiltAbs(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ZoomIn() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomIn(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomIn(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ZoomOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ZoomOut() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ZoomOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomOut(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomOut(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ZoomStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ZoomStop() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ZoomStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomStop(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZoomStop(::grpc::ServerContext* context, ::camback::PtzCmdPar* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PanAbsCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PanAbsCmd() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_PanAbsCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanAbsCmd(::grpc::ServerContext* context, const ::camback::PanCmdInfo* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPanAbsCmd(::grpc::ServerContext* context, ::camback::PanCmdInfo* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TiltAbsCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TiltAbsCmd() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_TiltAbsCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TiltAbsCmd(::grpc::ServerContext* context, const ::camback::TiltCmdInfo* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTiltAbsCmd(::grpc::ServerContext* context, ::camback::TiltCmdInfo* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPanTiltPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetPanTiltPos() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetPanTiltPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPanTiltPos(::grpc::ServerContext* context, const ::camback::PanTiltPos* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPanTiltPos(::grpc::ServerContext* context, ::camback::PanTiltPos* request, ::grpc::ServerAsyncResponseWriter< ::camback::PtzCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPTZPosInfo<WithAsyncMethod_PanLeft<WithAsyncMethod_PanRight<WithAsyncMethod_TiltUp<WithAsyncMethod_TiltDown<WithAsyncMethod_PanStop<WithAsyncMethod_PanTiltAbs<WithAsyncMethod_ZoomIn<WithAsyncMethod_ZoomOut<WithAsyncMethod_ZoomStop<WithAsyncMethod_PanAbsCmd<WithAsyncMethod_TiltAbsCmd<WithAsyncMethod_SetPanTiltPos<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetPTZPosInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPTZPosInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPTZPosInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPTZPosInfo(::grpc::ServerContext* context, const ::camback::PTZInfoQ* request, ::camback::PTZPosInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PanLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PanLeft() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PanLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanLeft(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PanRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PanRight() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PanRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanRight(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TiltUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TiltUp() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TiltUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TiltUp(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TiltDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TiltDown() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TiltDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TiltDown(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PanStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PanStop() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PanStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanStop(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PanTiltAbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PanTiltAbs() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PanTiltAbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanTiltAbs(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ZoomIn() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomIn(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ZoomOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ZoomOut() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ZoomOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomOut(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ZoomStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ZoomStop() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ZoomStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ZoomStop(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PanAbsCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PanAbsCmd() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_PanAbsCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PanAbsCmd(::grpc::ServerContext* context, const ::camback::PanCmdInfo* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TiltAbsCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TiltAbsCmd() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_TiltAbsCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TiltAbsCmd(::grpc::ServerContext* context, const ::camback::TiltCmdInfo* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPanTiltPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetPanTiltPos() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetPanTiltPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPanTiltPos(::grpc::ServerContext* context, const ::camback::PanTiltPos* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPTZPosInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPTZPosInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PTZInfoQ, ::camback::PTZPosInfo>(std::bind(&WithStreamedUnaryMethod_GetPTZPosInfo<BaseClass>::StreamedGetPTZPosInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPTZPosInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPTZPosInfo(::grpc::ServerContext* context, const ::camback::PTZInfoQ* request, ::camback::PTZPosInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPTZPosInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PTZInfoQ,::camback::PTZPosInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PanLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PanLeft() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_PanLeft<BaseClass>::StreamedPanLeft, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PanLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PanLeft(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPanLeft(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PanRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PanRight() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_PanRight<BaseClass>::StreamedPanRight, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PanRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PanRight(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPanRight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TiltUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TiltUp() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_TiltUp<BaseClass>::StreamedTiltUp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TiltUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TiltUp(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTiltUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TiltDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TiltDown() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_TiltDown<BaseClass>::StreamedTiltDown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TiltDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TiltDown(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTiltDown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PanStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PanStop() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_PanStop<BaseClass>::StreamedPanStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PanStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PanStop(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPanStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PanTiltAbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PanTiltAbs() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_PanTiltAbs<BaseClass>::StreamedPanTiltAbs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PanTiltAbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PanTiltAbs(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPanTiltAbs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ZoomIn() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_ZoomIn<BaseClass>::StreamedZoomIn, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ZoomIn(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZoomIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ZoomOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ZoomOut() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_ZoomOut<BaseClass>::StreamedZoomOut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ZoomOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ZoomOut(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZoomOut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ZoomStop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ZoomStop() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PtzCmdPar, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_ZoomStop<BaseClass>::StreamedZoomStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ZoomStop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ZoomStop(::grpc::ServerContext* context, const ::camback::PtzCmdPar* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZoomStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PtzCmdPar,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PanAbsCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PanAbsCmd() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PanCmdInfo, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_PanAbsCmd<BaseClass>::StreamedPanAbsCmd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PanAbsCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PanAbsCmd(::grpc::ServerContext* context, const ::camback::PanCmdInfo* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPanAbsCmd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PanCmdInfo,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TiltAbsCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TiltAbsCmd() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::TiltCmdInfo, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_TiltAbsCmd<BaseClass>::StreamedTiltAbsCmd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TiltAbsCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TiltAbsCmd(::grpc::ServerContext* context, const ::camback::TiltCmdInfo* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTiltAbsCmd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::TiltCmdInfo,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPanTiltPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetPanTiltPos() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::camback::PanTiltPos, ::camback::PtzCommandResult>(std::bind(&WithStreamedUnaryMethod_SetPanTiltPos<BaseClass>::StreamedSetPanTiltPos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPanTiltPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPanTiltPos(::grpc::ServerContext* context, const ::camback::PanTiltPos* request, ::camback::PtzCommandResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPanTiltPos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::camback::PanTiltPos,::camback::PtzCommandResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetPTZPosInfo<WithStreamedUnaryMethod_PanLeft<WithStreamedUnaryMethod_PanRight<WithStreamedUnaryMethod_TiltUp<WithStreamedUnaryMethod_TiltDown<WithStreamedUnaryMethod_PanStop<WithStreamedUnaryMethod_PanTiltAbs<WithStreamedUnaryMethod_ZoomIn<WithStreamedUnaryMethod_ZoomOut<WithStreamedUnaryMethod_ZoomStop<WithStreamedUnaryMethod_PanAbsCmd<WithStreamedUnaryMethod_TiltAbsCmd<WithStreamedUnaryMethod_SetPanTiltPos<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetPTZPosInfo<WithStreamedUnaryMethod_PanLeft<WithStreamedUnaryMethod_PanRight<WithStreamedUnaryMethod_TiltUp<WithStreamedUnaryMethod_TiltDown<WithStreamedUnaryMethod_PanStop<WithStreamedUnaryMethod_PanTiltAbs<WithStreamedUnaryMethod_ZoomIn<WithStreamedUnaryMethod_ZoomOut<WithStreamedUnaryMethod_ZoomStop<WithStreamedUnaryMethod_PanAbsCmd<WithStreamedUnaryMethod_TiltAbsCmd<WithStreamedUnaryMethod_SetPanTiltPos<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace camback


#endif  // GRPC_camback_2eproto__INCLUDED
